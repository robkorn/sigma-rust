{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0","program":"/home/rob/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","proptest","--edition=2018","/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"lazy_static\"","--cfg","feature=\"quick-error\"","--cfg","feature=\"regex-syntax\"","--cfg","feature=\"std\"","-C","metadata=9aa23f25288a6ec4","-C","extra-filename=-9aa23f25288a6ec4","--out-dir","/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps","-L","dependency=/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps","--extern","bitflags=/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps/libbitflags-8012c52f40cad26f.rmeta","--extern","byteorder=/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps/libbyteorder-2aa765197a3db035.rmeta","--extern","lazy_static=/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps/liblazy_static-1afbd4bd273784b5.rmeta","--extern","num_traits=/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps/libnum_traits-a49c1dcf894963a0.rmeta","--extern","quick_error=/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps/libquick_error-30892869ecc1715c.rmeta","--extern","rand=/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps/librand-a6e74e0c8a3389c1.rmeta","--extern","rand_chacha=/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps/librand_chacha-3bcf7d55670db999.rmeta","--extern","rand_xorshift=/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps/librand_xorshift-69acdc8bfc250ee6.rmeta","--extern","regex_syntax=/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps/libregex_syntax-f10ca034ccea121d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/rob/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps/libproptest-9aa23f25288a6ec4.rmeta"},"prelude":{"crate_id":{"name":"proptest","disambiguator":[9481462557449256571,3766025838754660570]},"crate_root":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src","external_crates":[{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16221439354469382097,15565837348772828253]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15613252303691562375,4556165055238676072]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[12269617896898487533,65142111397584226]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[12673765241971086519,1979875191208036248]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15862783141653200230,4773813417861420487]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[501305773035659233,3889300012469539238]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9126002216567348836,15610270334556716503]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9479301707518706798,13352731276321566042]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[15203654865662241151,17897348793673631766]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10290502124864695413,7672610073830174493]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14838544226648722576,13006716085524361330]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[9246889555580827340,16878203682218964580]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8284748314555817558,4769950866534510046]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14671874173783541769,17969261176539820175]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":15,"id":{"name":"bitflags","disambiguator":[8265728201036081832,5958351863204443504]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":16,"id":{"name":"lazy_static","disambiguator":[8531607769344049769,5565090804460170418]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","num":17,"id":{"name":"quick_error","disambiguator":[11518506630605163377,11712855867845135964]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","num":18,"id":{"name":"rand","disambiguator":[14397990148985045269,18262821326131893958]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","num":19,"id":{"name":"rand_core","disambiguator":[14720404497753316698,16441202551837207232]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","num":20,"id":{"name":"getrandom","disambiguator":[8228435480878630374,5359753681457646114]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","num":21,"id":{"name":"cfg_if","disambiguator":[15827525173548159870,8372847108566091306]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","num":22,"id":{"name":"libc","disambiguator":[13274541647785893459,1686673962777082215]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","num":23,"id":{"name":"rand_chacha","disambiguator":[8034961231569696482,15295204571757391800]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","num":24,"id":{"name":"ppv_lite86","disambiguator":[9001560210023072495,16849727195987984284]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","num":25,"id":{"name":"byteorder","disambiguator":[2273535345620388605,12137058404407011930]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","num":26,"id":{"name":"rand_xorshift","disambiguator":[10364566311393723427,12809788695468608493]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","num":27,"id":{"name":"regex_syntax","disambiguator":[10220819006313219056,10198597248704708206]}}],"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":345,"byte_end":2333,"line_start":10,"line_end":108,"column_start":1,"column_end":17}},"imports":[{"kind":"Use","ref_id":{"krate":5,"index":323},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3307,"byte_end":3310,"line_start":35,"line_end":35,"column_start":40,"column_end":43},"alias_span":null,"name":"Cow","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":314},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3355,"byte_end":3362,"line_start":36,"line_end":36,"column_start":44,"column_end":51},"alias_span":null,"name":"ToOwned","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":81},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3401,"byte_end":3404,"line_start":37,"line_end":37,"column_start":38,"column_end":41},"alias_span":null,"name":"Box","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4867},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3448,"byte_end":3454,"line_start":38,"line_end":38,"column_start":43,"column_end":49},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":3509},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3482,"byte_end":3488,"line_start":39,"line_end":39,"column_start":27,"column_end":33},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":3840},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3525,"byte_end":3528,"line_start":40,"line_end":40,"column_start":36,"column_end":39},"alias_span":null,"name":"Arc","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":2993},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3560,"byte_end":3562,"line_start":41,"line_end":41,"column_start":31,"column_end":33},"alias_span":null,"name":"Rc","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4166},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3597,"byte_end":3600,"line_start":42,"line_end":42,"column_start":34,"column_end":37},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4125},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3625,"byte_end":3628,"line_start":43,"line_end":43,"column_start":24,"column_end":27},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":2495},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3682,"byte_end":3690,"line_start":44,"line_end":44,"column_start":53,"column_end":61},"alias_span":null,"name":"VecDeque","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":2403},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3745,"byte_end":3754,"line_start":45,"line_end":45,"column_start":54,"column_end":63},"alias_span":null,"name":"vec_deque","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":412},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3812,"byte_end":3822,"line_start":46,"line_end":46,"column_start":57,"column_end":67},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":392},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3881,"byte_end":3892,"line_start":47,"line_end":47,"column_start":58,"column_end":69},"alias_span":null,"name":"binary_heap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":2076},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":3950,"byte_end":3960,"line_start":48,"line_end":48,"column_start":57,"column_end":67},"alias_span":null,"name":"LinkedList","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":2062},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":4019,"byte_end":4030,"line_start":49,"line_end":49,"column_start":58,"column_end":69},"alias_span":null,"name":"linked_list","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4682},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":4086,"byte_end":4094,"line_start":50,"line_end":50,"column_start":55,"column_end":63},"alias_span":null,"name":"BTreeSet","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":670},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":4150,"byte_end":4158,"line_start":51,"line_end":51,"column_start":55,"column_end":63},"alias_span":null,"name":"BTreeMap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":2790},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":4215,"byte_end":4224,"line_start":52,"line_end":52,"column_start":56,"column_end":65},"alias_span":null,"name":"btree_map","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":2792},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":4281,"byte_end":4290,"line_start":53,"line_end":53,"column_start":56,"column_end":65},"alias_span":null,"name":"btree_set","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":6209},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":4384,"byte_end":4391,"line_start":58,"line_end":58,"column_start":48,"column_end":55},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":6235},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":4440,"byte_end":4447,"line_start":59,"line_end":59,"column_start":48,"column_end":55},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":1489},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":4582,"byte_end":4590,"line_start":65,"line_end":65,"column_start":29,"column_end":37},"alias_span":null,"name":"hash_map","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":1491},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":4723,"byte_end":4731,"line_start":69,"line_end":69,"column_start":29,"column_end":37},"alias_span":null,"name":"hash_set","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":2810},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":4774,"byte_end":4777,"line_start":72,"line_end":72,"column_start":23,"column_end":26},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":1,"index":2758},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":4814,"byte_end":4818,"line_start":73,"line_end":73,"column_start":36,"column_end":40},"alias_span":null,"name":"Cell","value":"","parent":{"krate":0,"index":4}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65113,"byte_end":65114,"line_start":45,"line_end":45,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Arbitrary, StrategyFor, any, arbitrary, any_with, arbitrary_with","parent":{"krate":0,"index":37}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Filter","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"FilterMap","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"IndFlatten, Flatten, IndFlattenMap","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Just, LazyJust, LazyJustFn","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"LazyValueTree","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"MapInto, Perturb, Map","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Recursive","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Shuffleable, Shuffle","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"NewTree, BoxedStrategy, ValueTree, SBoxedStrategy, Strategy","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291308,"byte_end":291309,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"TupleUnionValueTree, WA, TupleUnion, float_to_weight, Union","parent":{"krate":0,"index":800}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":421440,"byte_end":421441,"line_start":25,"line_end":25,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Config","parent":{"krate":0,"index":1513}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":421440,"byte_end":421441,"line_start":25,"line_end":25,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"TestCaseError","parent":{"krate":0,"index":1513}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":421440,"byte_end":421441,"line_start":25,"line_end":25,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"FailurePersistence, FileFailurePersistence","parent":{"krate":0,"index":1513}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":421440,"byte_end":421441,"line_start":25,"line_end":25,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Reason","parent":{"krate":0,"index":1513}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":421440,"byte_end":421441,"line_start":25,"line_end":25,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"ResultCache","parent":{"krate":0,"index":1513}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":421440,"byte_end":421441,"line_start":25,"line_end":25,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Seed, TestRng","parent":{"krate":0,"index":1513}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":421440,"byte_end":421441,"line_start":25,"line_end":25,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"TestRunner","parent":{"krate":0,"index":1513}},{"kind":"Use","ref_id":{"krate":0,"index":1926},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556156,"byte_end":556160,"line_start":39,"line_end":39,"column_start":25,"column_end":29},"alias_span":null,"name":"prob","value":"","parent":{"krate":0,"index":1977}},{"kind":"Use","ref_id":{"krate":0,"index":7841},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556162,"byte_end":556173,"line_start":39,"line_end":39,"column_start":31,"column_end":42},"alias_span":null,"name":"Probability","value":"","parent":{"krate":0,"index":1977}},{"kind":"Use","ref_id":{"krate":0,"index":669},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":565824,"byte_end":565834,"line_start":30,"line_end":30,"column_start":29,"column_end":39},"alias_span":null,"name":"size_range","value":"","parent":{"krate":0,"index":2074}},{"kind":"Use","ref_id":{"krate":0,"index":5246},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":565836,"byte_end":565845,"line_start":30,"line_end":30,"column_start":41,"column_end":50},"alias_span":null,"name":"SizeRange","value":"","parent":{"krate":0,"index":2074}},{"kind":"Use","ref_id":{"krate":0,"index":8082},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":584021,"byte_end":584026,"line_start":85,"line_end":85,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":2144}},{"kind":"Use","ref_id":{"krate":0,"index":54},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598968,"byte_end":598971,"line_start":23,"line_end":23,"column_start":28,"column_end":31},"alias_span":null,"name":"any","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":56},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598973,"byte_end":598981,"line_start":23,"line_end":23,"column_start":33,"column_end":41},"alias_span":null,"name":"any_with","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":45},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598983,"byte_end":598992,"line_start":23,"line_end":23,"column_start":43,"column_end":52},"alias_span":null,"name":"Arbitrary","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":6886},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599021,"byte_end":599034,"line_start":24,"line_end":24,"column_start":27,"column_end":40},"alias_span":null,"name":"BoxedStrategy","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":6630},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599036,"byte_end":599040,"line_start":24,"line_end":24,"column_start":42,"column_end":46},"alias_span":null,"name":"Just","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":6893},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599042,"byte_end":599056,"line_start":24,"line_end":24,"column_start":48,"column_end":62},"alias_span":null,"name":"SBoxedStrategy","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":1279},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599058,"byte_end":599066,"line_start":24,"line_end":24,"column_start":64,"column_end":72},"alias_span":null,"name":"Strategy","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":7350},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599097,"byte_end":599103,"line_start":25,"line_end":25,"column_start":29,"column_end":35},"alias_span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599107,"byte_end":599121,"line_start":25,"line_end":25,"column_start":39,"column_end":53},"name":"ProptestConfig","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":7372},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599151,"byte_end":599164,"line_start":26,"line_end":26,"column_start":29,"column_end":42},"alias_span":null,"name":"TestCaseError","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":28},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599187,"byte_end":599198,"line_start":28,"line_end":28,"column_start":5,"column_end":16},"alias_span":null,"name":"prop_assert","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":29},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599200,"byte_end":599214,"line_start":28,"line_end":28,"column_start":18,"column_end":32},"alias_span":null,"name":"prop_assert_eq","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599216,"byte_end":599230,"line_start":28,"line_end":28,"column_start":34,"column_end":48},"alias_span":null,"name":"prop_assert_ne","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":25},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599232,"byte_end":599243,"line_start":28,"line_end":28,"column_start":50,"column_end":61},"alias_span":null,"name":"prop_assume","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":27},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599245,"byte_end":599257,"line_start":28,"line_end":28,"column_start":63,"column_end":75},"alias_span":null,"name":"prop_compose","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599263,"byte_end":599273,"line_start":29,"line_end":29,"column_start":5,"column_end":15},"alias_span":null,"name":"prop_oneof","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":24},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599275,"byte_end":599283,"line_start":29,"line_end":29,"column_start":17,"column_end":25},"alias_span":null,"name":"proptest","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":18,"index":902},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599304,"byte_end":599307,"line_start":32,"line_end":32,"column_start":16,"column_end":19},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":19,"index":141},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599309,"byte_end":599316,"line_start":32,"line_end":32,"column_start":21,"column_end":28},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":2236}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599571,"byte_end":599580,"line_start":38,"line_end":38,"column_start":20,"column_end":29},"alias_span":null,"name":"arbitrary","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":492},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599601,"byte_end":599606,"line_start":39,"line_end":39,"column_start":20,"column_end":25},"alias_span":null,"name":"array","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":501},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599627,"byte_end":599631,"line_start":40,"line_end":40,"column_start":20,"column_end":24},"alias_span":null,"name":"bits","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":583},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599652,"byte_end":599656,"line_start":41,"line_end":41,"column_start":20,"column_end":24},"alias_span":null,"name":"bool","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":604},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599677,"byte_end":599681,"line_start":42,"line_end":42,"column_start":20,"column_end":24},"alias_span":null,"name":"char","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":641},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599702,"byte_end":599712,"line_start":43,"line_end":43,"column_start":20,"column_end":30},"alias_span":null,"name":"collection","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":761},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599733,"byte_end":599736,"line_start":44,"line_end":44,"column_start":20,"column_end":23},"alias_span":null,"name":"num","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":1920},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599757,"byte_end":599763,"line_start":45,"line_end":45,"column_start":20,"column_end":26},"alias_span":null,"name":"option","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":1977},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599784,"byte_end":599790,"line_start":46,"line_end":46,"column_start":20,"column_end":26},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":2074},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599811,"byte_end":599817,"line_start":47,"line_end":47,"column_start":20,"column_end":26},"alias_span":null,"name":"sample","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":800},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599838,"byte_end":599846,"line_start":48,"line_end":48,"column_start":20,"column_end":28},"alias_span":null,"name":"strategy","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":2144},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599895,"byte_end":599901,"line_start":50,"line_end":50,"column_start":20,"column_end":26},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":1513},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599922,"byte_end":599933,"line_start":51,"line_end":51,"column_start":20,"column_end":31},"alias_span":null,"name":"test_runner","value":"","parent":{"krate":0,"index":2259}},{"kind":"Use","ref_id":{"krate":0,"index":1913},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599954,"byte_end":599959,"line_start":52,"line_end":52,"column_start":20,"column_end":25},"alias_span":null,"name":"tuple","value":"","parent":{"krate":0,"index":2259}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":345,"byte_end":2333,"line_start":10,"line_end":108,"column_start":1,"column_end":17},"name":"","qualname":"::","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":22},{"krate":0,"index":37},{"krate":0,"index":492},{"krate":0,"index":501},{"krate":0,"index":583},{"krate":0,"index":604},{"krate":0,"index":641},{"krate":0,"index":761},{"krate":0,"index":800},{"krate":0,"index":1513},{"krate":0,"index":1913},{"krate":0,"index":1920},{"krate":0,"index":1977},{"krate":0,"index":2074},{"krate":0,"index":2144},{"krate":0,"index":2236}],"decl_id":null,"docs":" # Proptest Reference Documentation","sig":null,"attributes":[{"value":"! # Proptest Reference Documentation","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":345,"byte_end":383,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":384,"byte_end":387,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! This is the reference documentation for the proptest API.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":388,"byte_end":449,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":450,"byte_end":453,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! For documentation on how to get started with proptest and general usage","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":454,"byte_end":529,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"! advice, please refer to the [Proptest Book](https://altsysrq.github.io/proptest-book/intro.html).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":530,"byte_end":631,"line_start":15,"line_end":15,"column_start":1,"column_end":102}},{"value":"forbid(future_incompatible)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":633,"byte_end":664,"line_start":17,"line_end":17,"column_start":1,"column_end":32}},{"value":"deny(missing_docs, bare_trait_objects)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":665,"byte_end":707,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"no_std","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":708,"byte_end":718,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"std_facade","qualname":"::std_facade","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":2295},{"krate":0,"index":2296}],"decl_id":null,"docs":" This module provides #[cfg(..)]ed type aliases over features.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":1284,"byte_end":1296,"line_start":42,"line_end":42,"column_start":1,"column_end":13}},{"value":"! This module provides #[cfg(..)]ed type aliases over features.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/std_facade.rs","byte_start":2691,"byte_end":2756,"line_start":10,"line_end":10,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":22},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sugar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sugar","qualname":"::sugar","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sugar.rs","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":2297},{"krate":0,"index":2306},{"krate":0,"index":2303},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":2310},{"krate":0,"index":2315},{"krate":0,"index":2320},{"krate":0,"index":2327},{"krate":0,"index":2335},{"krate":0,"index":2344},{"krate":0,"index":2355},{"krate":0,"index":2366},{"krate":0,"index":2380},{"krate":0,"index":2393},{"krate":0,"index":2410},{"krate":0,"index":2425},{"krate":0,"index":2445},{"krate":0,"index":2462},{"krate":0,"index":2485},{"krate":0,"index":2504},{"krate":0,"index":2530},{"krate":0,"index":2551},{"krate":0,"index":2580},{"krate":0,"index":2603},{"krate":0,"index":36}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2035,"byte_end":2047,"line_start":88,"line_end":88,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":2297},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sugar.rs","byte_start":46629,"byte_end":46643,"line_start":1056,"line_end":1056,"column_start":12,"column_end":26},"name":"NamedArguments","qualname":"::sugar::NamedArguments","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sugar.rs","byte_start":49201,"byte_end":49214,"line_start":1126,"line_end":1126,"column_start":8,"column_end":21},"name":"force_no_fork","qualname":"::sugar::force_no_fork","value":"fn (config: &mut crate::test_runner::Config) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sugar.rs","byte_start":49155,"byte_end":49178,"line_start":1124,"line_end":1124,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":37},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"arbitrary","qualname":"::arbitrary","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":65},{"krate":0,"index":88},{"krate":0,"index":93},{"krate":0,"index":99},{"krate":0,"index":118},{"krate":0,"index":133},{"krate":0,"index":138},{"krate":0,"index":236},{"krate":0,"index":363},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":489}],"decl_id":null,"docs":" Defines the `Arbitrary` trait and related free functions\n and type aliases.","sig":null,"attributes":[{"value":"! Defines the `Arbitrary` trait and related free functions","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":64423,"byte_end":64483,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"! and type aliases.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":64484,"byte_end":64505,"line_start":11,"line_end":11,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":64506,"byte_end":64509,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! See the [`Arbitrary`] trait for more information.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":64510,"byte_end":64563,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":64564,"byte_end":64567,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":64568,"byte_end":64607,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67986,"byte_end":67995,"line_start":45,"line_end":45,"column_start":11,"column_end":20},"name":"Arbitrary","qualname":"::arbitrary::traits::Arbitrary","value":"Arbitrary: Sized + fmt::Debug","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":" Arbitrary determines a canonical [`Strategy`] for the implementing type.","sig":null,"attributes":[{"value":"/ Arbitrary determines a canonical [`Strategy`] for the implementing type.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":66498,"byte_end":66574,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":66575,"byte_end":66578,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ It provides the method `arbitrary_with` which generates a `Strategy` for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":66579,"byte_end":66655,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ producing arbitrary values of the implementing type *(`Self`)*. In general,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":66656,"byte_end":66735,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ these strategies will produce the entire set of values possible for the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":66736,"byte_end":66811,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ type, up to some size limitation or constraints set by their parameters.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":66812,"byte_end":66888,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ When this is not desired, strategies to produce the desired values can be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":66889,"byte_end":66966,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ built by combining [`Strategy`]s as described in the crate documentation.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":66967,"byte_end":67044,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67045,"byte_end":67048,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This trait analogous to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67049,"byte_end":67076,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/ [Haskell QuickCheck's implementation of `Arbitrary`][HaskellQC].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67077,"byte_end":67145,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ In this interpretation of `Arbitrary`, `Strategy` is the equivalent of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67146,"byte_end":67220,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ the `Gen` monad. Unlike in QuickCheck, `Arbitrary` is not a core component;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67221,"byte_end":67300,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ types do not need to implement `Arbitrary` unless one wants to use","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67301,"byte_end":67371,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ [`any`](fn.any.html) or other free functions in this module.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67372,"byte_end":67436,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67437,"byte_end":67440,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ `Arbitrary` currently only works for types which represent owned data as","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67441,"byte_end":67517,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ opposed to borrowed data. This is a fundamental restriction of `proptest`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67518,"byte_end":67595,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ which may be lifted in the future as the [generic associated types (GAT)]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67596,"byte_end":67673,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ feature of Rust is implemented and stabilized.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67674,"byte_end":67724,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67725,"byte_end":67728,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [generic associated types (GAT)]: https://github.com/rust-lang/rust/issues/44265","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67729,"byte_end":67813,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67814,"byte_end":67817,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67818,"byte_end":67867,"line_start":41,"line_end":41,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67868,"byte_end":67871,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [HaskellQC]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67872,"byte_end":67888,"line_start":43,"line_end":43,"column_start":1,"column_end":17}},{"value":"/ https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck-Arbitrary.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67889,"byte_end":67975,"line_start":44,"line_end":44,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68427,"byte_end":68437,"line_start":54,"line_end":54,"column_start":10,"column_end":20},"name":"Parameters","qualname":"::arbitrary::traits::Arbitrary::Parameters","value":"type Parameters: Default;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" The type of parameters that [`arbitrary_with`] accepts for configuration\n of the generated [`Strategy`]. Parameters must implement [`Default`].","sig":null,"attributes":[{"value":"/ The type of parameters that [`arbitrary_with`] accepts for configuration","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68022,"byte_end":68098,"line_start":46,"line_end":46,"column_start":5,"column_end":81}},{"value":"/ of the generated [`Strategy`]. Parameters must implement [`Default`].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68103,"byte_end":68176,"line_start":47,"line_end":47,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68181,"byte_end":68184,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ [`arbitrary_with`]: trait.Arbitrary.html#tymethod.arbitrary_with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68189,"byte_end":68257,"line_start":49,"line_end":49,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68262,"byte_end":68265,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68270,"byte_end":68319,"line_start":51,"line_end":51,"column_start":5,"column_end":54}},{"value":"/ [`Default`]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68324,"byte_end":68340,"line_start":52,"line_end":52,"column_start":5,"column_end":21}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68345,"byte_end":68417,"line_start":53,"line_end":53,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69054,"byte_end":69063,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"arbitrary","qualname":"::arbitrary::traits::Arbitrary::arbitrary","value":"fn () -> Self::Strategy","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] for producing arbitrary values\n of type the implementing type (`Self`).","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] for producing arbitrary values","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68453,"byte_end":68512,"line_start":56,"line_end":56,"column_start":5,"column_end":64}},{"value":"/ of type the implementing type (`Self`).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68517,"byte_end":68560,"line_start":57,"line_end":57,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68565,"byte_end":68568,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Calling this for the type `X` is the equivalent of using","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68573,"byte_end":68633,"line_start":59,"line_end":59,"column_start":5,"column_end":65}},{"value":"/ [`X::arbitrary_with(Default::default())`].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68638,"byte_end":68684,"line_start":60,"line_end":60,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68689,"byte_end":68692,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This method is defined in the trait for optimization for the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68697,"byte_end":68761,"line_start":62,"line_end":62,"column_start":5,"column_end":69}},{"value":"/ default if you want to do that. It is a logic error to not","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68766,"byte_end":68828,"line_start":63,"line_end":63,"column_start":5,"column_end":67}},{"value":"/ preserve the semantics when overriding.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68833,"byte_end":68876,"line_start":64,"line_end":64,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68881,"byte_end":68884,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68889,"byte_end":68938,"line_start":66,"line_end":66,"column_start":5,"column_end":54}},{"value":"/ [`X::arbitrary_with(Default::default())`]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68943,"byte_end":68989,"line_start":67,"line_end":67,"column_start":5,"column_end":51}},{"value":"/     trait.Arbitrary.html#tymethod.arbitrary_with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68994,"byte_end":69046,"line_start":68,"line_end":68,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69659,"byte_end":69673,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"arbitrary_with","qualname":"::arbitrary::traits::Arbitrary::arbitrary_with","value":"fn (args: Self::Parameters) -> Self::Strategy","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] for producing arbitrary values of type the\n implementing type (`Self`). The strategy is passed the arguments given\n in args.","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] for producing arbitrary values of type the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69146,"byte_end":69217,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/ implementing type (`Self`). The strategy is passed the arguments given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69222,"byte_end":69296,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ in args.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69301,"byte_end":69313,"line_start":75,"line_end":75,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69318,"byte_end":69321,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ If you wish to use the [`default()`] arguments,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69326,"byte_end":69377,"line_start":77,"line_end":77,"column_start":5,"column_end":56}},{"value":"/ use [`arbitrary`] instead.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69382,"byte_end":69412,"line_start":78,"line_end":78,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69417,"byte_end":69420,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69425,"byte_end":69474,"line_start":80,"line_end":80,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69479,"byte_end":69482,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ [`arbitrary`]: trait.Arbitrary.html#method.arbitrary","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69487,"byte_end":69543,"line_start":82,"line_end":82,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69548,"byte_end":69551,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ [`default()`]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69556,"byte_end":69574,"line_start":84,"line_end":84,"column_start":5,"column_end":23}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69579,"byte_end":69651,"line_start":85,"line_end":85,"column_start":5,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":49},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69862,"byte_end":69870,"line_start":91,"line_end":91,"column_start":10,"column_end":18},"name":"Strategy","qualname":"::arbitrary::traits::Arbitrary::Strategy","value":"type Strategy: Strategy<Value = Self>;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" The type of [`Strategy`] used to generate values of type `Self`.","sig":null,"attributes":[{"value":"/ The type of [`Strategy`] used to generate values of type `Self`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69722,"byte_end":69790,"line_start":88,"line_end":88,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69795,"byte_end":69798,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":69803,"byte_end":69852,"line_start":90,"line_end":90,"column_start":5,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":50},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70611,"byte_end":70622,"line_start":107,"line_end":107,"column_start":10,"column_end":21},"name":"StrategyFor","qualname":"::arbitrary::traits::StrategyFor","value":"<A as Arbitrary>::Strategy","parent":null,"children":[],"decl_id":null,"docs":" `StrategyFor` allows you to mention the type of [`Strategy`] for the input\n type `A` without directly using associated types or without resorting to\n existential types. This way, if implementation of [`Arbitrary`] changes,\n your tests should not break. This can be especially beneficial when the\n type of `Strategy` that you are dealing with is very long in name\n (the case with generics).","sig":null,"attributes":[{"value":"/ `StrategyFor` allows you to mention the type of [`Strategy`] for the input","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70099,"byte_end":70177,"line_start":98,"line_end":98,"column_start":1,"column_end":79}},{"value":"/ type `A` without directly using associated types or without resorting to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70178,"byte_end":70254,"line_start":99,"line_end":99,"column_start":1,"column_end":77}},{"value":"/ existential types. This way, if implementation of [`Arbitrary`] changes,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70255,"byte_end":70331,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ your tests should not break. This can be especially beneficial when the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70332,"byte_end":70407,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/ type of `Strategy` that you are dealing with is very long in name","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70408,"byte_end":70477,"line_start":102,"line_end":102,"column_start":1,"column_end":70}},{"value":"/ (the case with generics).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70478,"byte_end":70507,"line_start":103,"line_end":103,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70508,"byte_end":70511,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70512,"byte_end":70551,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70552,"byte_end":70601,"line_start":106,"line_end":106,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":52},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71093,"byte_end":71102,"line_start":117,"line_end":117,"column_start":10,"column_end":19},"name":"ParamsFor","qualname":"::arbitrary::traits::ParamsFor","value":"<A as Arbitrary>::Parameters","parent":null,"children":[],"decl_id":null,"docs":" `ParamsFor` allows you to mention the type of [`Parameters`] for the input\n type `A` without directly using associated types or without resorting to\n existential types. This way, if implementation of [`Arbitrary`] changes,\n your tests should not break.","sig":null,"attributes":[{"value":"/ `ParamsFor` allows you to mention the type of [`Parameters`] for the input","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70657,"byte_end":70735,"line_start":109,"line_end":109,"column_start":1,"column_end":79}},{"value":"/ type `A` without directly using associated types or without resorting to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70736,"byte_end":70812,"line_start":110,"line_end":110,"column_start":1,"column_end":77}},{"value":"/ existential types. This way, if implementation of [`Arbitrary`] changes,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70813,"byte_end":70889,"line_start":111,"line_end":111,"column_start":1,"column_end":77}},{"value":"/ your tests should not break.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70890,"byte_end":70922,"line_start":112,"line_end":112,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70923,"byte_end":70926,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ [`Parameters`]: trait.Arbitrary.html#associatedtype.Parameters","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70927,"byte_end":70993,"line_start":114,"line_end":114,"column_start":1,"column_end":67}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":70994,"byte_end":71033,"line_start":115,"line_end":115,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71034,"byte_end":71083,"line_start":116,"line_end":116,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72597,"byte_end":72600,"line_start":159,"line_end":159,"column_start":8,"column_end":11},"name":"any","qualname":"::arbitrary::traits::any","value":"fn <A> () -> StrategyFor<A>","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`][trait Arbitrary] values of\n `A`. Unlike [`arbitrary`][fn arbitrary], it should be used for being\n explicit on what `A` is. For clarity, this may be a good idea.","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`][trait Arbitrary] values of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71343,"byte_end":71422,"line_start":123,"line_end":123,"column_start":1,"column_end":80}},{"value":"/ `A`. Unlike [`arbitrary`][fn arbitrary], it should be used for being","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71423,"byte_end":71495,"line_start":124,"line_end":124,"column_start":1,"column_end":73}},{"value":"/ explicit on what `A` is. For clarity, this may be a good idea.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71496,"byte_end":71562,"line_start":125,"line_end":125,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71563,"byte_end":71566,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ Use this version instead of [`arbitrary`][fn arbitrary] if you want to be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71567,"byte_end":71644,"line_start":127,"line_end":127,"column_start":1,"column_end":78}},{"value":"/ clear which type you want to generate a `Strategy` for, or if you don't","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71645,"byte_end":71720,"line_start":128,"line_end":128,"column_start":1,"column_end":76}},{"value":"/ have an anchoring type for type inference to work with.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71721,"byte_end":71780,"line_start":129,"line_end":129,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71781,"byte_end":71784,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ If you want to customize how the strategy is generated, use","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71785,"byte_end":71848,"line_start":131,"line_end":131,"column_start":1,"column_end":64}},{"value":"/ [`any_with::<A>(args)`] where `args` are any arguments accepted by","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71849,"byte_end":71919,"line_start":132,"line_end":132,"column_start":1,"column_end":71}},{"value":"/ the `Arbitrary` impl in question.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71920,"byte_end":71957,"line_start":133,"line_end":133,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71958,"byte_end":71961,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71962,"byte_end":71975,"line_start":135,"line_end":135,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71976,"byte_end":71979,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":71980,"byte_end":72012,"line_start":137,"line_end":137,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72013,"byte_end":72016,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72017,"byte_end":72028,"line_start":139,"line_end":139,"column_start":1,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72029,"byte_end":72058,"line_start":140,"line_end":140,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72059,"byte_end":72062,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72063,"byte_end":72078,"line_start":142,"line_end":142,"column_start":1,"column_end":16}},{"value":"/     fn reverse_reverse_is_identity(ref vec in any::<Vec<u32>>()) {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72079,"byte_end":72149,"line_start":143,"line_end":143,"column_start":1,"column_end":71}},{"value":"/         let vec2 = vec.iter().cloned().rev().rev().collect::<Vec<u32>>();","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72150,"byte_end":72227,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/         prop_assert_eq!(vec, &vec2);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72228,"byte_end":72268,"line_start":145,"line_end":145,"column_start":1,"column_end":41}},{"value":"/     }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72269,"byte_end":72278,"line_start":146,"line_end":146,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72279,"byte_end":72284,"line_start":147,"line_end":147,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72285,"byte_end":72288,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72289,"byte_end":72304,"line_start":149,"line_end":149,"column_start":1,"column_end":16}},{"value":"/     reverse_reverse_is_identity();","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72305,"byte_end":72343,"line_start":150,"line_end":150,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72344,"byte_end":72349,"line_start":151,"line_end":151,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72350,"byte_end":72357,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72358,"byte_end":72361,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ [`any_with::<A>(args)`]: fn.any_with.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72362,"byte_end":72407,"line_start":154,"line_end":154,"column_start":1,"column_end":46}},{"value":"/ [fn arbitrary]: fn.arbitrary.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72408,"byte_end":72445,"line_start":155,"line_end":155,"column_start":1,"column_end":38}},{"value":"/ [trait Arbitrary]: trait.Arbitrary.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72446,"byte_end":72489,"line_start":156,"line_end":156,"column_start":1,"column_end":44}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72490,"byte_end":72539,"line_start":157,"line_end":157,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72540,"byte_end":72589,"line_start":158,"line_end":158,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74042,"byte_end":74050,"line_start":203,"line_end":203,"column_start":8,"column_end":16},"name":"any_with","qualname":"::arbitrary::traits::any_with","value":"fn <A> (args: ParamsFor<A>) -> StrategyFor<A>","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the\n given configuration arguments passed in `args`. Unlike [`arbitrary_with`],\n it should be used for being explicit on what `A` is.\n For clarity, this may be a good idea.","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72734,"byte_end":72809,"line_start":164,"line_end":164,"column_start":1,"column_end":76}},{"value":"/ given configuration arguments passed in `args`. Unlike [`arbitrary_with`],","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72810,"byte_end":72888,"line_start":165,"line_end":165,"column_start":1,"column_end":79}},{"value":"/ it should be used for being explicit on what `A` is.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72889,"byte_end":72945,"line_start":166,"line_end":166,"column_start":1,"column_end":57}},{"value":"/ For clarity, this may be a good idea.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72946,"byte_end":72987,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72988,"byte_end":72991,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Use this version instead of [`arbitrary_with`] if you want to be clear which","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":72992,"byte_end":73072,"line_start":169,"line_end":169,"column_start":1,"column_end":81}},{"value":"/ type you want to generate a `Strategy` for, or if you don't have an anchoring","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73073,"byte_end":73154,"line_start":170,"line_end":170,"column_start":1,"column_end":82}},{"value":"/ type for type inference to work with.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73155,"byte_end":73196,"line_start":171,"line_end":171,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73197,"byte_end":73200,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ If you don't want to specify any arguments and instead use the default","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73201,"byte_end":73275,"line_start":173,"line_end":173,"column_start":1,"column_end":75}},{"value":"/ behavior, you should use [`any::<A>()`].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73276,"byte_end":73320,"line_start":174,"line_end":174,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73321,"byte_end":73324,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73325,"byte_end":73338,"line_start":176,"line_end":176,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73339,"byte_end":73342,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73343,"byte_end":73375,"line_start":178,"line_end":178,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73376,"byte_end":73379,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73380,"byte_end":73391,"line_start":180,"line_end":180,"column_start":1,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73392,"byte_end":73421,"line_start":181,"line_end":181,"column_start":1,"column_end":30}},{"value":"/ use proptest::collection::size_range;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73422,"byte_end":73463,"line_start":182,"line_end":182,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73464,"byte_end":73467,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73468,"byte_end":73483,"line_start":184,"line_end":184,"column_start":1,"column_end":16}},{"value":"/     fn reverse_reverse_is_identity","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73484,"byte_end":73522,"line_start":185,"line_end":185,"column_start":1,"column_end":39}},{"value":"/         (ref vec in any_with::<Vec<u32>>(size_range(1000).lift()))","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73523,"byte_end":73593,"line_start":186,"line_end":186,"column_start":1,"column_end":71}},{"value":"/     {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73594,"byte_end":73603,"line_start":187,"line_end":187,"column_start":1,"column_end":10}},{"value":"/         let vec2 = vec.iter().cloned().rev().rev().collect::<Vec<u32>>();","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73604,"byte_end":73681,"line_start":188,"line_end":188,"column_start":1,"column_end":78}},{"value":"/         prop_assert_eq!(vec, &vec2);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73682,"byte_end":73722,"line_start":189,"line_end":189,"column_start":1,"column_end":41}},{"value":"/     }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73723,"byte_end":73732,"line_start":190,"line_end":190,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73733,"byte_end":73738,"line_start":191,"line_end":191,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73739,"byte_end":73742,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73743,"byte_end":73758,"line_start":193,"line_end":193,"column_start":1,"column_end":16}},{"value":"/     reverse_reverse_is_identity();","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73759,"byte_end":73797,"line_start":194,"line_end":194,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73798,"byte_end":73803,"line_start":195,"line_end":195,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73804,"byte_end":73811,"line_start":196,"line_end":196,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73812,"byte_end":73815,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ [`any::<A>()`]: fn.any.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73816,"byte_end":73847,"line_start":198,"line_end":198,"column_start":1,"column_end":32}},{"value":"/ [`arbitrary_with`]: fn.arbitrary_with.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73848,"byte_end":73894,"line_start":199,"line_end":199,"column_start":1,"column_end":47}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73895,"byte_end":73934,"line_start":200,"line_end":200,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73935,"byte_end":73984,"line_start":201,"line_end":201,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":73985,"byte_end":74034,"line_start":202,"line_end":202,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75359,"byte_end":75368,"line_start":242,"line_end":242,"column_start":8,"column_end":17},"name":"arbitrary","qualname":"::arbitrary::traits::arbitrary","value":"fn <A, S> () -> S","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`] values of `A`.\n Works better with type inference than [`any::<A>()`].","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`] values of `A`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74211,"byte_end":74278,"line_start":208,"line_end":208,"column_start":1,"column_end":68}},{"value":"/ Works better with type inference than [`any::<A>()`].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74279,"byte_end":74336,"line_start":209,"line_end":209,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74337,"byte_end":74340,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ With this version, you shouldn't need to specify any of the (many) type","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74341,"byte_end":74416,"line_start":211,"line_end":211,"column_start":1,"column_end":76}},{"value":"/ parameters explicitly. This can have a positive effect on type inference.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74417,"byte_end":74494,"line_start":212,"line_end":212,"column_start":1,"column_end":78}},{"value":"/ However, if you want specify `A`, you should use [`any::<A>()`] instead.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74495,"byte_end":74571,"line_start":213,"line_end":213,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74572,"byte_end":74575,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ For clarity, it is often a good idea to specify the type generated, and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74576,"byte_end":74651,"line_start":215,"line_end":215,"column_start":1,"column_end":76}},{"value":"/ so using [`any::<A>()`] can be a good idea.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74652,"byte_end":74699,"line_start":216,"line_end":216,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74700,"byte_end":74703,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ If you want to customize how the strategy is generated, use","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74704,"byte_end":74767,"line_start":218,"line_end":218,"column_start":1,"column_end":64}},{"value":"/ [`arbitrary_with(args)`] where `args` is of type","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74768,"byte_end":74820,"line_start":219,"line_end":219,"column_start":1,"column_end":53}},{"value":"/ `<A as Arbitrary>::Parameters`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74821,"byte_end":74856,"line_start":220,"line_end":220,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74857,"byte_end":74860,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74861,"byte_end":74874,"line_start":222,"line_end":222,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74875,"byte_end":74878,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74879,"byte_end":74911,"line_start":224,"line_end":224,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74912,"byte_end":74915,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74916,"byte_end":74927,"line_start":226,"line_end":226,"column_start":1,"column_end":12}},{"value":"/ extern crate proptest;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74928,"byte_end":74954,"line_start":227,"line_end":227,"column_start":1,"column_end":27}},{"value":"/ use proptest::arbitrary::{arbitrary, StrategyFor};","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":74955,"byte_end":75009,"line_start":228,"line_end":228,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75010,"byte_end":75013,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ fn gen_vec_usize() -> StrategyFor<Vec<usize>> {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75014,"byte_end":75065,"line_start":230,"line_end":230,"column_start":1,"column_end":52}},{"value":"/     arbitrary()","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75066,"byte_end":75085,"line_start":231,"line_end":231,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75086,"byte_end":75091,"line_start":232,"line_end":232,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75092,"byte_end":75095,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75096,"byte_end":75114,"line_start":234,"line_end":234,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75115,"byte_end":75122,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75123,"byte_end":75126,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ [`arbitrary_with(args)`]: fn.arbitrary_with.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75127,"byte_end":75179,"line_start":237,"line_end":237,"column_start":1,"column_end":53}},{"value":"/ [`any::<A>()`]: fn.any.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75180,"byte_end":75211,"line_start":238,"line_end":238,"column_start":1,"column_end":32}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75212,"byte_end":75251,"line_start":239,"line_end":239,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75252,"byte_end":75301,"line_start":240,"line_end":240,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75302,"byte_end":75351,"line_start":241,"line_end":241,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76826,"byte_end":76840,"line_start":287,"line_end":287,"column_start":8,"column_end":22},"name":"arbitrary_with","qualname":"::arbitrary::traits::arbitrary_with","value":"fn <A, S, P> (args: P) -> S","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the\n given configuration arguments passed in `args`.\n Works better with type inference than [`any_with::<A>(args)`].","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75547,"byte_end":75622,"line_start":251,"line_end":251,"column_start":1,"column_end":76}},{"value":"/ given configuration arguments passed in `args`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75623,"byte_end":75674,"line_start":252,"line_end":252,"column_start":1,"column_end":52}},{"value":"/ Works better with type inference than [`any_with::<A>(args)`].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75675,"byte_end":75741,"line_start":253,"line_end":253,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75742,"byte_end":75745,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ With this version, you shouldn't need to specify any of the (many) type","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75746,"byte_end":75821,"line_start":255,"line_end":255,"column_start":1,"column_end":76}},{"value":"/ parameters explicitly. This can have a positive effect on type inference.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75822,"byte_end":75899,"line_start":256,"line_end":256,"column_start":1,"column_end":78}},{"value":"/ However, if you want specify `A`, you should use","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75900,"byte_end":75952,"line_start":257,"line_end":257,"column_start":1,"column_end":53}},{"value":"/ [`any_with::<A>(args)`] instead.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75953,"byte_end":75989,"line_start":258,"line_end":258,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75990,"byte_end":75993,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ For clarity, it is often a good idea to specify the type generated, and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":75994,"byte_end":76069,"line_start":260,"line_end":260,"column_start":1,"column_end":76}},{"value":"/ so using [`any_with::<A>(args)`] can be a good idea.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76070,"byte_end":76126,"line_start":261,"line_end":261,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76127,"byte_end":76130,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ If you don't want to specify any arguments and instead use the default","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76131,"byte_end":76205,"line_start":263,"line_end":263,"column_start":1,"column_end":75}},{"value":"/ behavior, you should use [`arbitrary()`].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76206,"byte_end":76251,"line_start":264,"line_end":264,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76252,"byte_end":76255,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76256,"byte_end":76269,"line_start":266,"line_end":266,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76270,"byte_end":76273,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76274,"byte_end":76306,"line_start":268,"line_end":268,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76307,"byte_end":76310,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76311,"byte_end":76322,"line_start":270,"line_end":270,"column_start":1,"column_end":12}},{"value":"/ extern crate proptest;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76323,"byte_end":76349,"line_start":271,"line_end":271,"column_start":1,"column_end":27}},{"value":"/ use proptest::arbitrary::{arbitrary_with, StrategyFor};","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76350,"byte_end":76409,"line_start":272,"line_end":272,"column_start":1,"column_end":60}},{"value":"/ use proptest::collection::size_range;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76410,"byte_end":76451,"line_start":273,"line_end":273,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76452,"byte_end":76455,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ fn gen_vec_10_u32() -> StrategyFor<Vec<u32>> {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76456,"byte_end":76506,"line_start":275,"line_end":275,"column_start":1,"column_end":51}},{"value":"/     arbitrary_with(size_range(10).lift())","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76507,"byte_end":76552,"line_start":276,"line_end":276,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76553,"byte_end":76558,"line_start":277,"line_end":277,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76559,"byte_end":76562,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76563,"byte_end":76581,"line_start":279,"line_end":279,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76582,"byte_end":76589,"line_start":280,"line_end":280,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76590,"byte_end":76593,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ [`any_with::<A>(args)`]: fn.any_with.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76594,"byte_end":76639,"line_start":282,"line_end":282,"column_start":1,"column_end":46}},{"value":"/ [`arbitrary()`]: fn.arbitrary.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76640,"byte_end":76678,"line_start":283,"line_end":283,"column_start":1,"column_end":39}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76679,"byte_end":76718,"line_start":284,"line_end":284,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76719,"byte_end":76768,"line_start":285,"line_end":285,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":76769,"byte_end":76818,"line_start":286,"line_end":286,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":65},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"functor","qualname":"::arbitrary::functor","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":77},{"krate":0,"index":87}],"decl_id":null,"docs":" Provides higher order `Arbitrary` traits.\n This is mainly for use by `proptest_derive`.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":64873,"byte_end":64885,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"! Provides higher order `Arbitrary` traits.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77426,"byte_end":77471,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"! This is mainly for use by `proptest_derive`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77472,"byte_end":77520,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77521,"byte_end":77524,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! ## Stability note","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77525,"byte_end":77546,"line_start":13,"line_end":13,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77547,"byte_end":77550,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! This trait is mainly defined for `proptest_derive` to simplify the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77551,"byte_end":77621,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"! mechanics of deriving recursive types. If you have custom containers","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77622,"byte_end":77694,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"! and want to support recursive for those, it is a good idea to implement","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77695,"byte_end":77770,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"! this trait.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77771,"byte_end":77786,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77787,"byte_end":77790,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! There are clearer and terser ways that work better with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77791,"byte_end":77850,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"! inference such as using `proptest::collection::vec(..)`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77851,"byte_end":77910,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"! to achieve the same result.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77911,"byte_end":77942,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77943,"byte_end":77946,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! For these reasons, the traits here are deliberately","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":77947,"byte_end":78002,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"! not exported in a convenient way.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78003,"byte_end":78040,"line_start":25,"line_end":25,"column_start":1,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":70},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78531,"byte_end":78542,"line_start":41,"line_end":41,"column_start":11,"column_end":22},"name":"ArbitraryF1","qualname":"::arbitrary::functor::ArbitraryF1","value":"ArbitraryF1<A: fmt::Debug>: fmt::Debug + Sized","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":75}],"decl_id":null,"docs":" `ArbitraryF1` lets you lift a [`Strategy`] to unary\n type constructors such as `Box`, `Vec`, and `Option`.","sig":null,"attributes":[{"value":"/ `ArbitraryF1` lets you lift a [`Strategy`] to unary","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78120,"byte_end":78175,"line_start":31,"line_end":31,"column_start":1,"column_end":56}},{"value":"/ type constructors such as `Box`, `Vec`, and `Option`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78176,"byte_end":78233,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78234,"byte_end":78237,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The trait corresponds to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78238,"byte_end":78266,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/ [Haskell QuickCheck's `Arbitrary1` type class][HaskellQC].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78267,"byte_end":78329,"line_start":35,"line_end":35,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78330,"byte_end":78333,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ [HaskellQC]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78334,"byte_end":78350,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/ https://hackage.haskell.org/package/QuickCheck-2.10.1/docs/Test-QuickCheck-Arbitrary.html#t:Arbitrary1","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78351,"byte_end":78457,"line_start":38,"line_end":38,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78458,"byte_end":78461,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78462,"byte_end":78520,"line_start":40,"line_end":40,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":72},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80329,"byte_end":80339,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"name":"Parameters","qualname":"::arbitrary::functor::ArbitraryF1::Parameters","value":"type Parameters: Default;","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" The type of parameters that [`lift1_with`] accepts for\n configuration of the lifted and generated [`Strategy`]. Parameters\n must implement [`Default`].","sig":null,"attributes":[{"value":"/ The type of parameters that [`lift1_with`] accepts for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":79894,"byte_end":79952,"line_start":67,"line_end":67,"column_start":5,"column_end":63}},{"value":"/ configuration of the lifted and generated [`Strategy`]. Parameters","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":79957,"byte_end":80027,"line_start":68,"line_end":68,"column_start":5,"column_end":75}},{"value":"/ must implement [`Default`].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80032,"byte_end":80063,"line_start":69,"line_end":69,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80068,"byte_end":80071,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ [`lift1_with`]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80076,"byte_end":80095,"line_start":71,"line_end":71,"column_start":5,"column_end":24}},{"value":"/     trait.ArbitraryF1.html#tymethod.lift1_with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80100,"byte_end":80150,"line_start":72,"line_end":72,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80155,"byte_end":80158,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80163,"byte_end":80221,"line_start":74,"line_end":74,"column_start":5,"column_end":63}},{"value":"/ [`Default`]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80226,"byte_end":80242,"line_start":75,"line_end":75,"column_start":5,"column_end":21}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80247,"byte_end":80319,"line_start":76,"line_end":76,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81065,"byte_end":81070,"line_start":94,"line_end":94,"column_start":8,"column_end":13},"name":"lift1","qualname":"::arbitrary::functor::ArbitraryF1::lift1","value":"fn <AS> (base: AS) -> BoxedStrategy<Self>","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `SomeType`\n to a container such as `Vec<SomeType>`.","sig":null,"attributes":[{"value":"/ Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80355,"byte_end":80428,"line_start":79,"line_end":79,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `SomeType`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80433,"byte_end":80504,"line_start":80,"line_end":80,"column_start":5,"column_end":76}},{"value":"/ to a container such as `Vec<SomeType>`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80509,"byte_end":80552,"line_start":81,"line_end":81,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80557,"byte_end":80560,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Calling this for the type `X` is the equivalent of using","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80565,"byte_end":80625,"line_start":83,"line_end":83,"column_start":5,"column_end":65}},{"value":"/ [`X::lift1_with(base, Default::default())`].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80630,"byte_end":80678,"line_start":84,"line_end":84,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80683,"byte_end":80686,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ This method is defined in the trait for optimization for the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80691,"byte_end":80755,"line_start":86,"line_end":86,"column_start":5,"column_end":69}},{"value":"/ default if you want to do that. It is a logic error to not","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80760,"byte_end":80822,"line_start":87,"line_end":87,"column_start":5,"column_end":67}},{"value":"/ preserve the semantics when overriding.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80827,"byte_end":80870,"line_start":88,"line_end":88,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80875,"byte_end":80878,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80883,"byte_end":80941,"line_start":90,"line_end":90,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80946,"byte_end":80949,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ [`X::lift1_with(base, Default::default())`]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":80954,"byte_end":81002,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/     trait.ArbitraryF1.html#tymethod.lift1_with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81007,"byte_end":81057,"line_start":93,"line_end":93,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81856,"byte_end":81866,"line_start":115,"line_end":115,"column_start":8,"column_end":18},"name":"lift1_with","qualname":"::arbitrary::functor::ArbitraryF1::lift1_with","value":"fn <AS> (base: AS, args: Self::Parameters) -> BoxedStrategy<Self>","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `SomeType`\n to a container such as `Vec` of `SomeType`. The composite strategy is\n passed the arguments given in `args`.","sig":null,"attributes":[{"value":"/ Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81238,"byte_end":81311,"line_start":101,"line_end":101,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `SomeType`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81316,"byte_end":81387,"line_start":102,"line_end":102,"column_start":5,"column_end":76}},{"value":"/ to a container such as `Vec` of `SomeType`. The composite strategy is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81392,"byte_end":81465,"line_start":103,"line_end":103,"column_start":5,"column_end":78}},{"value":"/ passed the arguments given in `args`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81470,"byte_end":81511,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81516,"byte_end":81519,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ If you wish to use the [`default()`] arguments,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81524,"byte_end":81575,"line_start":106,"line_end":106,"column_start":5,"column_end":56}},{"value":"/ use [`lift1`] instead.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81580,"byte_end":81606,"line_start":107,"line_end":107,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81611,"byte_end":81614,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81619,"byte_end":81677,"line_start":109,"line_end":109,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81682,"byte_end":81685,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ [`lift1`]: trait.ArbitraryF1.html#method.lift1","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81690,"byte_end":81740,"line_start":111,"line_end":111,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81745,"byte_end":81748,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ [`default()`]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81753,"byte_end":81771,"line_start":113,"line_end":113,"column_start":5,"column_end":23}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81776,"byte_end":81848,"line_start":114,"line_end":114,"column_start":5,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":77},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82387,"byte_end":82398,"line_start":130,"line_end":130,"column_start":11,"column_end":22},"name":"ArbitraryF2","qualname":"::arbitrary::functor::ArbitraryF2","value":"ArbitraryF2<A: fmt::Debug, B: fmt::Debug>: fmt::Debug + Sized","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":84}],"decl_id":null,"docs":" `ArbitraryF2` lets you lift [`Strategy`] to binary\n type constructors such as `Result`, `HashMap`.","sig":null,"attributes":[{"value":"/ `ArbitraryF2` lets you lift [`Strategy`] to binary","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":81984,"byte_end":82038,"line_start":120,"line_end":120,"column_start":1,"column_end":55}},{"value":"/ type constructors such as `Result`, `HashMap`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82039,"byte_end":82089,"line_start":121,"line_end":121,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82090,"byte_end":82093,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ The trait corresponds to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82094,"byte_end":82122,"line_start":123,"line_end":123,"column_start":1,"column_end":29}},{"value":"/ [Haskell QuickCheck's `Arbitrary2` type class][HaskellQC].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82123,"byte_end":82185,"line_start":124,"line_end":124,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82186,"byte_end":82189,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [HaskellQC]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82190,"byte_end":82206,"line_start":126,"line_end":126,"column_start":1,"column_end":17}},{"value":"/ https://hackage.haskell.org/package/QuickCheck-2.10.1/docs/Test-QuickCheck-Arbitrary.html#t:Arbitrary2","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82207,"byte_end":82313,"line_start":127,"line_end":127,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82314,"byte_end":82317,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82318,"byte_end":82376,"line_start":129,"line_end":129,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":80},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82890,"byte_end":82900,"line_start":143,"line_end":143,"column_start":10,"column_end":20},"name":"Parameters","qualname":"::arbitrary::functor::ArbitraryF2::Parameters","value":"type Parameters: Default;","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" The type of parameters that [`lift2_with`] accepts for\n configuration of the lifted and generated [`Strategy`]. Parameters\n must implement [`Default`].","sig":null,"attributes":[{"value":"/ The type of parameters that [`lift2_with`] accepts for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82459,"byte_end":82517,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ configuration of the lifted and generated [`Strategy`]. Parameters","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82522,"byte_end":82592,"line_start":134,"line_end":134,"column_start":5,"column_end":75}},{"value":"/ must implement [`Default`].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82597,"byte_end":82628,"line_start":135,"line_end":135,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82633,"byte_end":82636,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ [`lift2_with`]: trait.ArbitraryF2.html#tymethod.lift2_with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82641,"byte_end":82703,"line_start":137,"line_end":137,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82708,"byte_end":82711,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82716,"byte_end":82774,"line_start":139,"line_end":139,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82779,"byte_end":82782,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ [`Default`]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82787,"byte_end":82803,"line_start":141,"line_end":141,"column_start":5,"column_end":21}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82808,"byte_end":82880,"line_start":142,"line_end":142,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83649,"byte_end":83654,"line_start":160,"line_end":160,"column_start":8,"column_end":13},"name":"lift2","qualname":"::arbitrary::functor::ArbitraryF2::lift2","value":"fn <AS, BS> (fst: AS, snd: BS) -> BoxedStrategy<Self>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Lifts two given strategies to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `Type1`\n and one for `Type2` to a container such as `HashMap<Type1, Type2>`.","sig":null,"attributes":[{"value":"/ Lifts two given strategies to a new [`Strategy`] for the (presumably)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82916,"byte_end":82989,"line_start":145,"line_end":145,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `Type1`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82994,"byte_end":83062,"line_start":146,"line_end":146,"column_start":5,"column_end":73}},{"value":"/ and one for `Type2` to a container such as `HashMap<Type1, Type2>`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83067,"byte_end":83138,"line_start":147,"line_end":147,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83143,"byte_end":83146,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ Calling this for the type `X` is the equivalent of using","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83151,"byte_end":83211,"line_start":149,"line_end":149,"column_start":5,"column_end":65}},{"value":"/ [`X::lift2_with(base, Default::default())`].","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83216,"byte_end":83264,"line_start":150,"line_end":150,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83269,"byte_end":83272,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ This method is defined in the trait for optimization for the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83277,"byte_end":83341,"line_start":152,"line_end":152,"column_start":5,"column_end":69}},{"value":"/ default if you want to do that. It is a logic error to not","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83346,"byte_end":83408,"line_start":153,"line_end":153,"column_start":5,"column_end":67}},{"value":"/ preserve the semantics when overriding.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83413,"byte_end":83456,"line_start":154,"line_end":154,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83461,"byte_end":83464,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83469,"byte_end":83527,"line_start":156,"line_end":156,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83532,"byte_end":83535,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ [`X::lift2_with(base, Default::default())`]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83540,"byte_end":83588,"line_start":158,"line_end":158,"column_start":5,"column_end":53}},{"value":"/     trait.Arbitrary.html#tymethod.lift2_with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83593,"byte_end":83641,"line_start":159,"line_end":159,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84520,"byte_end":84530,"line_start":182,"line_end":182,"column_start":8,"column_end":18},"name":"lift2_with","qualname":"::arbitrary::functor::ArbitraryF2::lift2_with","value":"fn <AS, BS> (fst: AS, snd: BS, args: Self::Parameters) -> BoxedStrategy<Self>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Lifts two given strategies to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `Type1`\n and one for `Type2` to a container such as `HashMap<Type1, Type2>`.\n The composite strategy is passed the arguments given in `args`.","sig":null,"attributes":[{"value":"/ Lifts two given strategies to a new [`Strategy`] for the (presumably)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83881,"byte_end":83954,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `Type1`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":83959,"byte_end":84027,"line_start":169,"line_end":169,"column_start":5,"column_end":73}},{"value":"/ and one for `Type2` to a container such as `HashMap<Type1, Type2>`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84032,"byte_end":84103,"line_start":170,"line_end":170,"column_start":5,"column_end":76}},{"value":"/ The composite strategy is passed the arguments given in `args`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84108,"byte_end":84175,"line_start":171,"line_end":171,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84180,"byte_end":84183,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ If you wish to use the [`default()`] arguments,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84188,"byte_end":84239,"line_start":173,"line_end":173,"column_start":5,"column_end":56}},{"value":"/ use [`lift2`] instead.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84244,"byte_end":84270,"line_start":174,"line_end":174,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84275,"byte_end":84278,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84283,"byte_end":84341,"line_start":176,"line_end":176,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84346,"byte_end":84349,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ [`lift2`]: trait.ArbitraryF2.html#method.lift2","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84354,"byte_end":84404,"line_start":178,"line_end":178,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84409,"byte_end":84412,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ [`default()`]:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84417,"byte_end":84435,"line_start":180,"line_end":180,"column_start":5,"column_end":23}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":84440,"byte_end":84512,"line_start":181,"line_end":181,"column_start":5,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":486},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65616,"byte_end":65623,"line_start":60,"line_end":60,"column_start":10,"column_end":17},"name":"SMapped","qualname":"::arbitrary::SMapped","value":"statics::Map<StrategyFor<I>, fn(I) -> O>","parent":null,"children":[],"decl_id":null,"docs":" A static map from a strategy of `I` to `O`.","sig":null,"attributes":[{"value":"/ A static map from a strategy of `I` to `O`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65428,"byte_end":65475,"line_start":54,"line_end":54,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65476,"byte_end":65479,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ # Stability","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65480,"byte_end":65495,"line_start":56,"line_end":56,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65496,"byte_end":65499,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ This is provided to make documentation more readable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65500,"byte_end":65557,"line_start":58,"line_end":58,"column_start":1,"column_end":58}},{"value":"/ Do not rely on it existing in your own code.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65558,"byte_end":65606,"line_start":59,"line_end":59,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":489},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65863,"byte_end":65869,"line_start":68,"line_end":68,"column_start":10,"column_end":16},"name":"Mapped","qualname":"::arbitrary::Mapped","value":"Map<StrategyFor<I>, fn(I) -> O>","parent":null,"children":[],"decl_id":null,"docs":" A normal map from a strategy of `I` to `O`.","sig":null,"attributes":[{"value":"/ A normal map from a strategy of `I` to `O`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65675,"byte_end":65722,"line_start":62,"line_end":62,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65723,"byte_end":65726,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Stability","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65727,"byte_end":65742,"line_start":64,"line_end":64,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65743,"byte_end":65746,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ This is provided to make documentation more readable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65747,"byte_end":65804,"line_start":66,"line_end":66,"column_start":1,"column_end":58}},{"value":"/ Do not rely on it existing in your own code.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":65805,"byte_end":65853,"line_start":67,"line_end":67,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":492},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":4064},{"krate":0,"index":4076},{"krate":0,"index":4073},{"krate":0,"index":4069},{"krate":0,"index":496},{"krate":0,"index":4080},{"krate":0,"index":4090},{"krate":0,"index":4088},{"krate":0,"index":4085},{"krate":0,"index":500},{"krate":0,"index":4093},{"krate":0,"index":4096},{"krate":0,"index":4104},{"krate":0,"index":4112},{"krate":0,"index":4121},{"krate":0,"index":4124},{"krate":0,"index":4132},{"krate":0,"index":4140},{"krate":0,"index":4149},{"krate":0,"index":4152},{"krate":0,"index":4160},{"krate":0,"index":4168},{"krate":0,"index":4177},{"krate":0,"index":4180},{"krate":0,"index":4188},{"krate":0,"index":4196},{"krate":0,"index":4205},{"krate":0,"index":4208},{"krate":0,"index":4216},{"krate":0,"index":4224},{"krate":0,"index":4233},{"krate":0,"index":4236},{"krate":0,"index":4244},{"krate":0,"index":4252},{"krate":0,"index":4261},{"krate":0,"index":4264},{"krate":0,"index":4272},{"krate":0,"index":4280},{"krate":0,"index":4289},{"krate":0,"index":4292},{"krate":0,"index":4300},{"krate":0,"index":4308},{"krate":0,"index":4317},{"krate":0,"index":4320},{"krate":0,"index":4328},{"krate":0,"index":4336},{"krate":0,"index":4345},{"krate":0,"index":4348},{"krate":0,"index":4356},{"krate":0,"index":4364},{"krate":0,"index":4373},{"krate":0,"index":4376},{"krate":0,"index":4384},{"krate":0,"index":4392},{"krate":0,"index":4401},{"krate":0,"index":4404},{"krate":0,"index":4412},{"krate":0,"index":4420},{"krate":0,"index":4429},{"krate":0,"index":4432},{"krate":0,"index":4440},{"krate":0,"index":4448},{"krate":0,"index":4457},{"krate":0,"index":4460},{"krate":0,"index":4468},{"krate":0,"index":4476},{"krate":0,"index":4485},{"krate":0,"index":4488},{"krate":0,"index":4496},{"krate":0,"index":4504},{"krate":0,"index":4513},{"krate":0,"index":4516},{"krate":0,"index":4524},{"krate":0,"index":4532},{"krate":0,"index":4541},{"krate":0,"index":4544},{"krate":0,"index":4552},{"krate":0,"index":4560},{"krate":0,"index":4569},{"krate":0,"index":4572},{"krate":0,"index":4580},{"krate":0,"index":4588},{"krate":0,"index":4597},{"krate":0,"index":4600},{"krate":0,"index":4608},{"krate":0,"index":4616},{"krate":0,"index":4625},{"krate":0,"index":4628},{"krate":0,"index":4636},{"krate":0,"index":4644},{"krate":0,"index":4653},{"krate":0,"index":4656},{"krate":0,"index":4664},{"krate":0,"index":4672},{"krate":0,"index":4681},{"krate":0,"index":4684},{"krate":0,"index":4692},{"krate":0,"index":4700},{"krate":0,"index":4709},{"krate":0,"index":4712},{"krate":0,"index":4720},{"krate":0,"index":4728},{"krate":0,"index":4737},{"krate":0,"index":4740},{"krate":0,"index":4748},{"krate":0,"index":4756},{"krate":0,"index":4765},{"krate":0,"index":4768},{"krate":0,"index":4776},{"krate":0,"index":4784},{"krate":0,"index":4793},{"krate":0,"index":4796},{"krate":0,"index":4804},{"krate":0,"index":4812},{"krate":0,"index":4821},{"krate":0,"index":4824},{"krate":0,"index":4832},{"krate":0,"index":4840},{"krate":0,"index":4849},{"krate":0,"index":4852},{"krate":0,"index":4860},{"krate":0,"index":4868},{"krate":0,"index":4877},{"krate":0,"index":4880},{"krate":0,"index":4888},{"krate":0,"index":4896},{"krate":0,"index":4905},{"krate":0,"index":4908},{"krate":0,"index":4916},{"krate":0,"index":4924},{"krate":0,"index":4933},{"krate":0,"index":4936},{"krate":0,"index":4944},{"krate":0,"index":4952},{"krate":0,"index":4961},{"krate":0,"index":4964},{"krate":0,"index":4972},{"krate":0,"index":4980}],"decl_id":null,"docs":" Support for strategies producing fixed-length arrays.","sig":null,"attributes":[{"value":"! Support for strategies producing fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":172416,"byte_end":172473,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":172474,"byte_end":172477,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! An array of strategies (but only length 1 to 32 for now) is itself a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":172478,"byte_end":172550,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"! strategy which generates arrays of that size drawing elements from the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":172551,"byte_end":172625,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"! corresponding input strategies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":172626,"byte_end":172661,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":172662,"byte_end":172665,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! See also [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":172666,"byte_end":172741,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"! easily making a strategy for an array drawn from one strategy.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":172742,"byte_end":172808,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":172809,"byte_end":172812,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! General implementations are available for sizes 1 through 32.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":172813,"byte_end":172878,"line_start":19,"line_end":19,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":4064},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173840,"byte_end":173860,"line_start":53,"line_end":53,"column_start":12,"column_end":32},"name":"UniformArrayStrategy","qualname":"::array::UniformArrayStrategy","value":"UniformArrayStrategy {  }","parent":null,"children":[{"krate":0,"index":4067},{"krate":0,"index":4068}],"decl_id":null,"docs":" A `Strategy` which generates fixed-size arrays containing values drawn from\n an inner strategy.","sig":null,"attributes":[{"value":"/ A `Strategy` which generates fixed-size arrays containing values drawn from","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":172964,"byte_end":173043,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ an inner strategy.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173044,"byte_end":173066,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173067,"byte_end":173070,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ `T` must be an array type of length 1 to 32 whose values are produced by","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173071,"byte_end":173147,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ strategy `S`. Instances of this type are normally created by the various","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173148,"byte_end":173224,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ `uniformXX` functions in this module.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173225,"byte_end":173266,"line_start":31,"line_end":31,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173267,"byte_end":173270,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This is mainly useful when the inner strategy is not `Copy`, precluding","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173271,"byte_end":173346,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ expressing the strategy as `[myStrategy; 32]`, for example.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173347,"byte_end":173410,"line_start":34,"line_end":34,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173411,"byte_end":173414,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173415,"byte_end":173429,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173430,"byte_end":173433,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173434,"byte_end":173441,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173442,"byte_end":173471,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173472,"byte_end":173475,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173476,"byte_end":173491,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"/   #[test]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173492,"byte_end":173505,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/   fn test_something(a in prop::array::uniform32(1u32..)) {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173506,"byte_end":173568,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"/     let unexpected = [0u32;32];","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173569,"byte_end":173604,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/     // `a` is also a [u32;32], so we can compare them directly","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173605,"byte_end":173671,"line_start":45,"line_end":45,"column_start":1,"column_end":67}},{"value":"/     assert_ne!(unexpected, a);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173672,"byte_end":173706,"line_start":46,"line_end":46,"column_start":1,"column_end":35}},{"value":"/   }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173707,"byte_end":173714,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173715,"byte_end":173720,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/ # fn main() { }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173721,"byte_end":173740,"line_start":49,"line_end":49,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173741,"byte_end":173748,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173749,"byte_end":173798,"line_start":51,"line_end":51,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174361,"byte_end":174364,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<UniformArrayStrategy<S, T>>::new","value":"fn (strategy: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Directly create a `UniformArrayStrategy`.","sig":null,"attributes":[{"value":"/ Directly create a `UniformArrayStrategy`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173962,"byte_end":174007,"line_start":59,"line_end":59,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174012,"byte_end":174015,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ This is only intended for advanced use, since the only way to specify","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174020,"byte_end":174093,"line_start":61,"line_end":61,"column_start":5,"column_end":78}},{"value":"/ the array size is with the turbofish operator and explicitly naming the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174098,"byte_end":174173,"line_start":62,"line_end":62,"column_start":5,"column_end":80}},{"value":"/ type of the values in the array and the strategy itself.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174178,"byte_end":174238,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174243,"byte_end":174246,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Prefer the `uniformXX` functions at module-level unless something","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174251,"byte_end":174320,"line_start":65,"line_end":65,"column_start":5,"column_end":74}},{"value":"/ precludes their use.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174325,"byte_end":174349,"line_start":66,"line_end":66,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":4080},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174588,"byte_end":174602,"line_start":77,"line_end":77,"column_start":12,"column_end":26},"name":"ArrayValueTree","qualname":"::array::ArrayValueTree","value":"ArrayValueTree {  }","parent":null,"children":[{"krate":0,"index":4082},{"krate":0,"index":4083},{"krate":0,"index":4084}],"decl_id":null,"docs":" A `ValueTree` operating over a fixed-size array.\n","sig":null,"attributes":[{"value":"/ A `ValueTree` operating over a fixed-size array.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174494,"byte_end":174546,"line_start":75,"line_end":75,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":4093},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":177488,"byte_end":177496,"line_start":169,"line_end":169,"column_start":16,"column_end":24},"name":"uniform1","qualname":"::array::uniform1","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 1]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4121},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":177530,"byte_end":177538,"line_start":171,"line_end":171,"column_start":16,"column_end":24},"name":"uniform2","qualname":"::array::uniform2","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 2]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4149},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":177575,"byte_end":177583,"line_start":173,"line_end":173,"column_start":16,"column_end":24},"name":"uniform3","qualname":"::array::uniform3","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 3]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4177},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":177623,"byte_end":177631,"line_start":175,"line_end":175,"column_start":16,"column_end":24},"name":"uniform4","qualname":"::array::uniform4","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 4]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4205},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":177674,"byte_end":177682,"line_start":177,"line_end":177,"column_start":16,"column_end":24},"name":"uniform5","qualname":"::array::uniform5","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 5]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4233},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":177728,"byte_end":177736,"line_start":179,"line_end":179,"column_start":16,"column_end":24},"name":"uniform6","qualname":"::array::uniform6","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 6]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4261},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":177785,"byte_end":177793,"line_start":181,"line_end":181,"column_start":16,"column_end":24},"name":"uniform7","qualname":"::array::uniform7","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 7]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4289},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":177845,"byte_end":177853,"line_start":183,"line_end":183,"column_start":16,"column_end":24},"name":"uniform8","qualname":"::array::uniform8","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 8]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4317},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":177908,"byte_end":177916,"line_start":185,"line_end":185,"column_start":16,"column_end":24},"name":"uniform9","qualname":"::array::uniform9","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 9]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4345},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":177975,"byte_end":177984,"line_start":187,"line_end":187,"column_start":17,"column_end":26},"name":"uniform10","qualname":"::array::uniform10","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 10]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4373},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":178046,"byte_end":178055,"line_start":189,"line_end":189,"column_start":17,"column_end":26},"name":"uniform11","qualname":"::array::uniform11","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 11]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4401},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":178121,"byte_end":178130,"line_start":191,"line_end":191,"column_start":17,"column_end":26},"name":"uniform12","qualname":"::array::uniform12","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 12]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4429},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":178200,"byte_end":178209,"line_start":193,"line_end":193,"column_start":17,"column_end":26},"name":"uniform13","qualname":"::array::uniform13","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 13]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4457},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":178283,"byte_end":178292,"line_start":195,"line_end":195,"column_start":17,"column_end":26},"name":"uniform14","qualname":"::array::uniform14","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 14]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4485},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":178370,"byte_end":178379,"line_start":197,"line_end":197,"column_start":17,"column_end":26},"name":"uniform15","qualname":"::array::uniform15","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 15]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4513},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":178461,"byte_end":178470,"line_start":199,"line_end":199,"column_start":17,"column_end":26},"name":"uniform16","qualname":"::array::uniform16","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 16]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4541},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":178556,"byte_end":178565,"line_start":201,"line_end":201,"column_start":17,"column_end":26},"name":"uniform17","qualname":"::array::uniform17","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 17]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4569},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":178655,"byte_end":178664,"line_start":203,"line_end":203,"column_start":17,"column_end":26},"name":"uniform18","qualname":"::array::uniform18","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 18]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4597},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":178758,"byte_end":178767,"line_start":205,"line_end":205,"column_start":17,"column_end":26},"name":"uniform19","qualname":"::array::uniform19","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 19]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4625},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":178878,"byte_end":178887,"line_start":208,"line_end":208,"column_start":17,"column_end":26},"name":"uniform20","qualname":"::array::uniform20","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 20]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4653},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":179002,"byte_end":179011,"line_start":211,"line_end":211,"column_start":17,"column_end":26},"name":"uniform21","qualname":"::array::uniform21","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 21]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4681},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":179130,"byte_end":179139,"line_start":214,"line_end":214,"column_start":17,"column_end":26},"name":"uniform22","qualname":"::array::uniform22","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 22]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4709},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":179262,"byte_end":179271,"line_start":217,"line_end":217,"column_start":17,"column_end":26},"name":"uniform23","qualname":"::array::uniform23","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 23]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4737},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":179398,"byte_end":179407,"line_start":220,"line_end":220,"column_start":17,"column_end":26},"name":"uniform24","qualname":"::array::uniform24","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 24]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4765},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":179538,"byte_end":179547,"line_start":223,"line_end":223,"column_start":17,"column_end":26},"name":"uniform25","qualname":"::array::uniform25","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 25]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4793},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":179682,"byte_end":179691,"line_start":226,"line_end":226,"column_start":17,"column_end":26},"name":"uniform26","qualname":"::array::uniform26","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 26]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4821},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":179830,"byte_end":179839,"line_start":229,"line_end":229,"column_start":17,"column_end":26},"name":"uniform27","qualname":"::array::uniform27","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 27]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4849},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":179982,"byte_end":179991,"line_start":232,"line_end":232,"column_start":17,"column_end":26},"name":"uniform28","qualname":"::array::uniform28","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 28]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4877},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":180138,"byte_end":180147,"line_start":235,"line_end":235,"column_start":17,"column_end":26},"name":"uniform29","qualname":"::array::uniform29","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 29]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4905},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":180298,"byte_end":180307,"line_start":238,"line_end":238,"column_start":17,"column_end":26},"name":"uniform30","qualname":"::array::uniform30","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 30]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4933},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":180462,"byte_end":180471,"line_start":241,"line_end":241,"column_start":17,"column_end":26},"name":"uniform31","qualname":"::array::uniform31","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 31]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":4961},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":180630,"byte_end":180639,"line_start":244,"line_end":244,"column_start":17,"column_end":26},"name":"uniform32","qualname":"::array::uniform32","value":"fn <S> (strategy: S) -> UniformArrayStrategy<S, [S::Value; 32]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174758,"byte_end":174812,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174821,"byte_end":174824,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174833,"byte_end":174901,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174910,"byte_end":174980,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":174989,"byte_end":175015,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175024,"byte_end":175027,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175036,"byte_end":175106,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":175115,"byte_end":175133,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":501},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bits","qualname":"::bits","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":522},{"krate":0,"index":4989},{"krate":0,"index":4996},{"krate":0,"index":5003},{"krate":0,"index":5010},{"krate":0,"index":5017},{"krate":0,"index":5024},{"krate":0,"index":5031},{"krate":0,"index":5038},{"krate":0,"index":5045},{"krate":0,"index":5052},{"krate":0,"index":523},{"krate":0,"index":5059},{"krate":0,"index":5069},{"krate":0,"index":5067},{"krate":0,"index":5064},{"krate":0,"index":531},{"krate":0,"index":535},{"krate":0,"index":5072},{"krate":0,"index":5080},{"krate":0,"index":5077},{"krate":0,"index":541},{"krate":0,"index":546},{"krate":0,"index":5083},{"krate":0,"index":5094},{"krate":0,"index":5092},{"krate":0,"index":5089},{"krate":0,"index":551},{"krate":0,"index":557},{"krate":0,"index":5097},{"krate":0,"index":5105},{"krate":0,"index":5113},{"krate":0,"index":5121},{"krate":0,"index":5129},{"krate":0,"index":5137},{"krate":0,"index":5145},{"krate":0,"index":5153},{"krate":0,"index":558},{"krate":0,"index":5161},{"krate":0,"index":5168},{"krate":0,"index":5175},{"krate":0,"index":559},{"krate":0,"index":582}],"decl_id":null,"docs":" Strategies for working with bit sets.","sig":null,"attributes":[{"value":"! Strategies for working with bit sets.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":182391,"byte_end":182432,"line_start":10,"line_end":10,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":182433,"byte_end":182436,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! Besides `BitSet` itself, this also defines strategies for all the primitive","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":182437,"byte_end":182516,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"! integer types. These strategies are appropriate for integers which are used","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":182517,"byte_end":182596,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"! as bit flags, etc; e.g., where the most reasonable simplification of `64`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":182597,"byte_end":182674,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"! is `0` (clearing one bit) and not `63` (clearing one bit but setting 6","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":182675,"byte_end":182749,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"! others). For integers treated as numeric values, see the corresponding","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":182750,"byte_end":182824,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"! modules of the `num` module instead.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":182825,"byte_end":182865,"line_start":17,"line_end":17,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":515},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183307,"byte_end":183317,"line_start":34,"line_end":34,"column_start":11,"column_end":21},"name":"BitSetLike","qualname":"::bits::BitSetLike","value":"BitSetLike: Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521}],"decl_id":null,"docs":" Trait for types which can be handled with `BitSetStrategy`.\n","sig":null,"attributes":[{"value":"/ Trait for types which can be handled with `BitSetStrategy`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183166,"byte_end":183229,"line_start":32,"line_end":32,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183450,"byte_end":183460,"line_start":37,"line_end":37,"column_start":8,"column_end":18},"name":"new_bitset","qualname":"::bits::BitSetLike::new_bitset","value":"fn (max: usize) -> Self","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Create a new value of `Self` with space for up to `max` bits, all\n initialised to zero.\n","sig":null,"attributes":[{"value":"/ Create a new value of `Self` with space for up to `max` bits, all","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183344,"byte_end":183413,"line_start":35,"line_end":35,"column_start":5,"column_end":74}},{"value":"/ initialised to zero.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183418,"byte_end":183442,"line_start":36,"line_end":36,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183555,"byte_end":183558,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"len","qualname":"::bits::BitSetLike::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Return an upper bound on the greatest bit set _plus one_.\n","sig":null,"attributes":[{"value":"/ Return an upper bound on the greatest bit set _plus one_.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183486,"byte_end":183547,"line_start":38,"line_end":38,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183626,"byte_end":183630,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"test","qualname":"::bits::BitSetLike::test","value":"fn (&self, ix: usize) -> bool","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Test whether the given bit is set.\n","sig":null,"attributes":[{"value":"/ Test whether the given bit is set.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183580,"byte_end":183618,"line_start":40,"line_end":40,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183692,"byte_end":183695,"line_start":43,"line_end":43,"column_start":8,"column_end":11},"name":"set","qualname":"::bits::BitSetLike::set","value":"fn (&mut self, ix: usize) -> ()","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Set the given bit.\n","sig":null,"attributes":[{"value":"/ Set the given bit.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183662,"byte_end":183684,"line_start":42,"line_end":42,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183755,"byte_end":183760,"line_start":45,"line_end":45,"column_start":8,"column_end":13},"name":"clear","qualname":"::bits::BitSetLike::clear","value":"fn (&mut self, ix: usize) -> ()","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Clear the given bit.\n","sig":null,"attributes":[{"value":"/ Clear the given bit.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183723,"byte_end":183747,"line_start":44,"line_end":44,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":184018,"byte_end":184023,"line_start":51,"line_end":51,"column_start":8,"column_end":13},"name":"count","qualname":"::bits::BitSetLike::count","value":"fn (&self) -> usize","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Return the number of bits set.","sig":null,"attributes":[{"value":"/ Return the number of bits set.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183788,"byte_end":183822,"line_start":46,"line_end":46,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183827,"byte_end":183830,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ This has a default for backwards compatibility, which simply does a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183835,"byte_end":183906,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/ linear scan through the bits. Implementations are strongly encouraged","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183911,"byte_end":183984,"line_start":49,"line_end":49,"column_start":5,"column_end":78}},{"value":"/ to override this.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183989,"byte_end":184010,"line_start":50,"line_end":50,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":5059},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186483,"byte_end":186497,"line_start":166,"line_end":166,"column_start":12,"column_end":26},"name":"BitSetStrategy","qualname":"::bits::BitSetStrategy","value":"BitSetStrategy {  }","parent":null,"children":[{"krate":0,"index":5061},{"krate":0,"index":5062},{"krate":0,"index":5063}],"decl_id":null,"docs":" Generates values as a set of bits between the two bounds.","sig":null,"attributes":[{"value":"/ Generates values as a set of bits between the two bounds.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186195,"byte_end":186256,"line_start":160,"line_end":160,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186257,"byte_end":186260,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ Values are generated by uniformly setting individual bits to 0","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186261,"byte_end":186327,"line_start":162,"line_end":162,"column_start":1,"column_end":67}},{"value":"/ or 1 between the bounds. Shrinking iteratively clears bits.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186328,"byte_end":186391,"line_start":163,"line_end":163,"column_start":1,"column_end":64}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186392,"byte_end":186441,"line_start":164,"line_end":164,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186882,"byte_end":186885,"line_start":178,"line_end":178,"column_start":12,"column_end":15},"name":"new","qualname":"<BitSetStrategy<T>>::new","value":"fn (min: usize, max: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which generates values where bits between `min`\n (inclusive) and `max` (exclusive) may be set.","sig":null,"attributes":[{"value":"/ Create a strategy which generates values where bits between `min`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186615,"byte_end":186684,"line_start":173,"line_end":173,"column_start":5,"column_end":74}},{"value":"/ (inclusive) and `max` (exclusive) may be set.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186689,"byte_end":186738,"line_start":174,"line_end":174,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186743,"byte_end":186746,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Due to the generics, the functions in the typed submodules are usually","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186751,"byte_end":186825,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/ preferable to calling this directly.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186830,"byte_end":186870,"line_start":177,"line_end":177,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":187151,"byte_end":187157,"line_start":188,"line_end":188,"column_start":12,"column_end":18},"name":"masked","qualname":"<BitSetStrategy<T>>::masked","value":"fn (mask: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which generates values where any bits set (and only\n those bits) in `mask` may be set.\n","sig":null,"attributes":[{"value":"/ Create a strategy which generates values where any bits set (and only","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":187024,"byte_end":187097,"line_start":186,"line_end":186,"column_start":5,"column_end":78}},{"value":"/ those bits) in `mask` may be set.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":187102,"byte_end":187139,"line_start":187,"line_end":187,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":5072},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188324,"byte_end":188345,"line_start":229,"line_end":229,"column_start":12,"column_end":33},"name":"SampledBitSetStrategy","qualname":"::bits::SampledBitSetStrategy","value":"SampledBitSetStrategy {  }","parent":null,"children":[{"krate":0,"index":5074},{"krate":0,"index":5075},{"krate":0,"index":5076}],"decl_id":null,"docs":" Generates bit sets with a particular number of bits set.","sig":null,"attributes":[{"value":"/ Generates bit sets with a particular number of bits set.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":187900,"byte_end":187960,"line_start":220,"line_end":220,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":187961,"byte_end":187964,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Specifically, this strategy is given both a size range and a bit range. To","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":187965,"byte_end":188043,"line_start":222,"line_end":222,"column_start":1,"column_end":79}},{"value":"/ produce a new value, it selects a size, then uniformly selects that many","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188044,"byte_end":188120,"line_start":223,"line_end":223,"column_start":1,"column_end":77}},{"value":"/ bits from within the bit range.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188121,"byte_end":188156,"line_start":224,"line_end":224,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188157,"byte_end":188160,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Shrinking happens as with [`BitSetStrategy`](struct.BitSetStrategy.html).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188161,"byte_end":188238,"line_start":226,"line_end":226,"column_start":1,"column_end":78}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188263,"byte_end":188312,"line_start":228,"line_end":228,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188962,"byte_end":188965,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<SampledBitSetStrategy<T>>::new","value":"fn (size: impl Into<SizeRange>, bits: impl Into<SizeRange>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which generates values where bits within the bounds\n given by `bits` may be set. The number of bits that are set is chosen\n to be in the range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy which generates values where bits within the bounds","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188488,"byte_end":188561,"line_start":236,"line_end":236,"column_start":5,"column_end":78}},{"value":"/ given by `bits` may be set. The number of bits that are set is chosen","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188566,"byte_end":188639,"line_start":237,"line_end":237,"column_start":5,"column_end":78}},{"value":"/ to be in the range given by `size`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188644,"byte_end":188683,"line_start":238,"line_end":238,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188688,"byte_end":188691,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Due to the generics, the functions in the typed submodules are usually","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188696,"byte_end":188770,"line_start":240,"line_end":240,"column_start":5,"column_end":79}},{"value":"/ preferable to calling this directly.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188775,"byte_end":188815,"line_start":241,"line_end":241,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188820,"byte_end":188823,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188828,"byte_end":188841,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188846,"byte_end":188849,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Panics if `size` includes a value that is greater than the number of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188854,"byte_end":188926,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/ bits in `bits`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188931,"byte_end":188950,"line_start":246,"line_end":246,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5083},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":190472,"byte_end":190487,"line_start":299,"line_end":299,"column_start":12,"column_end":27},"name":"BitSetValueTree","qualname":"::bits::BitSetValueTree","value":"BitSetValueTree {  }","parent":null,"children":[{"krate":0,"index":5085},{"krate":0,"index":5086},{"krate":0,"index":5087},{"krate":0,"index":5088}],"decl_id":null,"docs":" Value tree produced by `BitSetStrategy` and `SampledBitSetStrategy`.\n","sig":null,"attributes":[{"value":"/ Value tree produced by `BitSetStrategy` and `SampledBitSetStrategy`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":190358,"byte_end":190430,"line_start":297,"line_end":297,"column_start":1,"column_end":73}}]},{"kind":"Mod","id":{"krate":0,"index":5097},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":192935,"byte_end":192937,"line_start":386,"line_end":386,"column_start":10,"column_end":12},"name":"u8","qualname":"::bits::u8","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":5098},{"krate":0,"index":5099},{"krate":0,"index":5100},{"krate":0,"index":5101},{"krate":0,"index":5102}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":191513,"byte_end":191535,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5105},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":192952,"byte_end":192955,"line_start":387,"line_end":387,"column_start":10,"column_end":13},"name":"u16","qualname":"::bits::u16","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":5106},{"krate":0,"index":5107},{"krate":0,"index":5108},{"krate":0,"index":5109},{"krate":0,"index":5110}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":191513,"byte_end":191535,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5113},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":192971,"byte_end":192974,"line_start":388,"line_end":388,"column_start":10,"column_end":13},"name":"u32","qualname":"::bits::u32","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":5114},{"krate":0,"index":5115},{"krate":0,"index":5116},{"krate":0,"index":5117},{"krate":0,"index":5118}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":191513,"byte_end":191535,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5121},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":192990,"byte_end":192993,"line_start":389,"line_end":389,"column_start":10,"column_end":13},"name":"u64","qualname":"::bits::u64","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":5122},{"krate":0,"index":5123},{"krate":0,"index":5124},{"krate":0,"index":5125},{"krate":0,"index":5126}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":191513,"byte_end":191535,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5129},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":193009,"byte_end":193011,"line_start":390,"line_end":390,"column_start":10,"column_end":12},"name":"i8","qualname":"::bits::i8","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":5130},{"krate":0,"index":5131},{"krate":0,"index":5132},{"krate":0,"index":5133},{"krate":0,"index":5134}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":191513,"byte_end":191535,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5137},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":193026,"byte_end":193029,"line_start":391,"line_end":391,"column_start":10,"column_end":13},"name":"i16","qualname":"::bits::i16","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":5138},{"krate":0,"index":5139},{"krate":0,"index":5140},{"krate":0,"index":5141},{"krate":0,"index":5142}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":191513,"byte_end":191535,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5145},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":193045,"byte_end":193048,"line_start":392,"line_end":392,"column_start":10,"column_end":13},"name":"i32","qualname":"::bits::i32","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":5146},{"krate":0,"index":5147},{"krate":0,"index":5148},{"krate":0,"index":5149},{"krate":0,"index":5150}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":191513,"byte_end":191535,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5153},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":193064,"byte_end":193067,"line_start":393,"line_end":393,"column_start":10,"column_end":13},"name":"i64","qualname":"::bits::i64","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":5154},{"krate":0,"index":5155},{"krate":0,"index":5156},{"krate":0,"index":5157},{"krate":0,"index":5158}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":191513,"byte_end":191535,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5161},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":194340,"byte_end":194345,"line_start":430,"line_end":430,"column_start":14,"column_end":19},"name":"usize","qualname":"::bits::usize","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":5162},{"krate":0,"index":5163},{"krate":0,"index":5164},{"krate":0,"index":5165}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":193140,"byte_end":193162,"line_start":397,"line_end":397,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5168},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":194368,"byte_end":194373,"line_start":431,"line_end":431,"column_start":14,"column_end":19},"name":"isize","qualname":"::bits::isize","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":5169},{"krate":0,"index":5170},{"krate":0,"index":5171},{"krate":0,"index":5172}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":193140,"byte_end":193162,"line_start":397,"line_end":397,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5175},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":194454,"byte_end":194462,"line_start":434,"line_end":434,"column_start":14,"column_end":22},"name":"bool_vec","qualname":"::bits::bool_vec","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":5176},{"krate":0,"index":5177},{"krate":0,"index":5178},{"krate":0,"index":5179}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":193140,"byte_end":193162,"line_start":397,"line_end":397,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":583},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bool","qualname":"::bool","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":5189},{"krate":0,"index":5195},{"krate":0,"index":5194},{"krate":0,"index":5192},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":592},{"krate":0,"index":5197},{"krate":0,"index":5203},{"krate":0,"index":5202},{"krate":0,"index":5200},{"krate":0,"index":593},{"krate":0,"index":5205},{"krate":0,"index":5211},{"krate":0,"index":5210},{"krate":0,"index":5208},{"krate":0,"index":5213},{"krate":0,"index":5226},{"krate":0,"index":5225},{"krate":0,"index":5223},{"krate":0,"index":5220},{"krate":0,"index":5221},{"krate":0,"index":597},{"krate":0,"index":599}],"decl_id":null,"docs":" Strategies for generating `bool` values.\n","sig":null,"attributes":[{"value":"! Strategies for generating `bool` values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":201344,"byte_end":201388,"line_start":10,"line_end":10,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":5189},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":201535,"byte_end":201538,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"Any","qualname":"::bool::Any","value":"","parent":null,"children":[],"decl_id":null,"docs":" The type of the `ANY` constant.\n","sig":null,"attributes":[{"value":"/ The type of the `ANY` constant.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":201458,"byte_end":201493,"line_start":17,"line_end":17,"column_start":1,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":587},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":201659,"byte_end":201662,"line_start":24,"line_end":24,"column_start":11,"column_end":14},"name":"ANY","qualname":"::bool::ANY","value":"Any","parent":null,"children":[],"decl_id":null,"docs":" Generates boolean values by picking `true` or `false` uniformly.","sig":null,"attributes":[{"value":"/ Generates boolean values by picking `true` or `false` uniformly.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":201545,"byte_end":201613,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":201614,"byte_end":201617,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Shrinks `true` to `false`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":201618,"byte_end":201648,"line_start":23,"line_end":23,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":592},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202049,"byte_end":202057,"line_start":39,"line_end":39,"column_start":8,"column_end":16},"name":"weighted","qualname":"::bool::weighted","value":"fn (probability: f64) -> Weighted","parent":null,"children":[],"decl_id":null,"docs":" Generates boolean values by picking `true` with the given `probability`\n (1.0 = always true, 0.0 = always false).","sig":null,"attributes":[{"value":"/ Generates boolean values by picking `true` with the given `probability`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":201886,"byte_end":201961,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ (1.0 = always true, 0.0 = always false).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":201962,"byte_end":202006,"line_start":36,"line_end":36,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202007,"byte_end":202010,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Shrinks `true` to `false`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202011,"byte_end":202041,"line_start":38,"line_end":38,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":5197},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202249,"byte_end":202257,"line_start":46,"line_end":46,"column_start":12,"column_end":20},"name":"Weighted","qualname":"::bool::Weighted","value":"","parent":null,"children":[],"decl_id":null,"docs":" The return type from `weighted()`.\n","sig":null,"attributes":[{"value":"/ The return type from `weighted()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202119,"byte_end":202157,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202158,"byte_end":202207,"line_start":44,"line_end":44,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":5205},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202577,"byte_end":202590,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"BoolValueTree","qualname":"::bool::BoolValueTree","value":"BoolValueTree {  }","parent":null,"children":[{"krate":0,"index":5206},{"krate":0,"index":5207}],"decl_id":null,"docs":" The `ValueTree` to shrink booleans to false.\n","sig":null,"attributes":[{"value":"/ The `ValueTree` to shrink booleans to false.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202487,"byte_end":202535,"line_start":57,"line_end":57,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":604},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"char","qualname":"::char","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":5228},{"krate":0,"index":5236},{"krate":0,"index":5233},{"krate":0,"index":621},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":5239},{"krate":0,"index":5244},{"krate":0,"index":5242},{"krate":0,"index":5241},{"krate":0,"index":629},{"krate":0,"index":634},{"krate":0,"index":636}],"decl_id":null,"docs":" Strategies for generating `char` values.","sig":null,"attributes":[{"value":"! Strategies for generating `char` values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":204902,"byte_end":204946,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":204947,"byte_end":204950,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! Unlike most strategies in Proptest, character generation is by default","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":204951,"byte_end":205025,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"! biased to particular values known to be difficult to handle in various","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205026,"byte_end":205100,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"! circumstances.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205101,"byte_end":205119,"line_start":14,"line_end":14,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205120,"byte_end":205123,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! The main things of interest are `any()` to generate truly arbitrary","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205124,"byte_end":205195,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"! characters, and `range()` and `ranges()` to select characters from","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205196,"byte_end":205266,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"! inclusive ranges.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205267,"byte_end":205288,"line_start":18,"line_end":18,"column_start":1,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":612},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205745,"byte_end":205766,"line_start":37,"line_end":37,"column_start":11,"column_end":32},"name":"DEFAULT_SPECIAL_CHARS","qualname":"::char::DEFAULT_SPECIAL_CHARS","value":"&[char]","parent":null,"children":[],"decl_id":null,"docs":" A default set of characters to consider as \"special\" during character\n generation.","sig":null,"attributes":[{"value":"/ A default set of characters to consider as \"special\" during character","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205519,"byte_end":205592,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ generation.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205593,"byte_end":205608,"line_start":33,"line_end":33,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205609,"byte_end":205612,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Most of the characters here were chosen specifically because they are","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205613,"byte_end":205686,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ difficult to handle in particular contexts.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":205687,"byte_end":205734,"line_start":36,"line_end":36,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":613},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":206661,"byte_end":206685,"line_start":57,"line_end":57,"column_start":11,"column_end":35},"name":"DEFAULT_PREFERRED_RANGES","qualname":"::char::DEFAULT_PREFERRED_RANGES","value":"&[CharRange]","parent":null,"children":[],"decl_id":null,"docs":" A default sequence of ranges used preferentially when generating random\n characters.\n","sig":null,"attributes":[{"value":"/ A default sequence of ranges used preferentially when generating random","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":206559,"byte_end":206634,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/ characters.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":206635,"byte_end":206650,"line_start":56,"line_end":56,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":614},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":208083,"byte_end":208094,"line_start":93,"line_end":93,"column_start":8,"column_end":19},"name":"select_char","qualname":"::char::select_char","value":"fn (rnd: &mut impl Rng, special: &[char], preferred: &[CharRange], ranges: &[CharRange]) -> char","parent":null,"children":[],"decl_id":null,"docs":" Selects a random character the way `CharStrategy` does.","sig":null,"attributes":[{"value":"/ Selects a random character the way `CharStrategy` does.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":206851,"byte_end":206910,"line_start":68,"line_end":68,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":206911,"byte_end":206914,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ If `special` is non-empty, there is a 50% chance that a character from this","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":206915,"byte_end":206994,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/ array is chosen randomly, and will be returned if that character falls","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":206995,"byte_end":207069,"line_start":71,"line_end":71,"column_start":1,"column_end":75}},{"value":"/ within `ranges`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207070,"byte_end":207090,"line_start":72,"line_end":72,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207091,"byte_end":207094,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ If `preferred` is non-empty, there is a 50% chance that any generation","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207095,"byte_end":207169,"line_start":74,"line_end":74,"column_start":1,"column_end":75}},{"value":"/ which gets past the `special` step picks a random element from this list,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207170,"byte_end":207247,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ then a random character from within that range (both endpoints inclusive).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207248,"byte_end":207326,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ That character will be returned if it falls within `ranges`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207327,"byte_end":207391,"line_start":77,"line_end":77,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207392,"byte_end":207395,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ In all other cases, an element is picked randomly from `ranges` and a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207396,"byte_end":207469,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/ random character within the range (both endpoints inclusive) is chosen and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207470,"byte_end":207548,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ returned.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207549,"byte_end":207562,"line_start":81,"line_end":81,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207563,"byte_end":207566,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Notice that in all cases, `ranges` completely defines the set of characters","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207567,"byte_end":207646,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/ that can possibly be defined.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207647,"byte_end":207680,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207681,"byte_end":207684,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ It is legal for ranges in all cases to contain non-characters.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207685,"byte_end":207751,"line_start":86,"line_end":86,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207752,"byte_end":207755,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Both `preferred` and `ranges` bias selection towards characters in smaller","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207756,"byte_end":207834,"line_start":88,"line_end":88,"column_start":1,"column_end":79}},{"value":"/ ranges. This is deliberate. `preferred` is usually tuned to select","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207835,"byte_end":207905,"line_start":89,"line_end":89,"column_start":1,"column_end":71}},{"value":"/ particular characters anyway. `ranges` is usually derived from some","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207906,"byte_end":207977,"line_start":90,"line_end":90,"column_start":1,"column_end":72}},{"value":"/ external property, and the fact that a range is small often means it is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":207978,"byte_end":208053,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ more interesting.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":208054,"byte_end":208075,"line_start":92,"line_end":92,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":5228},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211235,"byte_end":211247,"line_start":173,"line_end":173,"column_start":12,"column_end":24},"name":"CharStrategy","qualname":"::char::CharStrategy","value":"CharStrategy {  }","parent":null,"children":[{"krate":0,"index":5230},{"krate":0,"index":5231},{"krate":0,"index":5232}],"decl_id":null,"docs":" Strategy for generating `char`s.","sig":null,"attributes":[{"value":"/ Strategy for generating `char`s.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":209739,"byte_end":209775,"line_start":147,"line_end":147,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":209776,"byte_end":209779,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ Character selection is more sophisticated than integer selection. Naïve","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":209780,"byte_end":209856,"line_start":149,"line_end":149,"column_start":1,"column_end":76}},{"value":"/ selection (particularly in the larger context of generating strings) would","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":209857,"byte_end":209935,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/ result in starting inputs like `ꂡ螧轎ቶᢹ糦狥芹ᘆ㶏曊ᒀ踔虙ჲ` and \"simplified\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":209936,"byte_end":210035,"line_start":151,"line_end":151,"column_start":1,"column_end":70}},{"value":"/ inputs consisting mostly of control characters. It also has difficulty","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210036,"byte_end":210110,"line_start":152,"line_end":152,"column_start":1,"column_end":75}},{"value":"/ locating edge cases, since the vast majority of code points (such as the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210111,"byte_end":210187,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/ enormous CJK regions) don't cause problems for anything with even basic","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210188,"byte_end":210263,"line_start":154,"line_end":154,"column_start":1,"column_end":76}},{"value":"/ Unicode support.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210264,"byte_end":210284,"line_start":155,"line_end":155,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210285,"byte_end":210288,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Instead, character selection is always based on explicit ranges, and is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210289,"byte_end":210364,"line_start":157,"line_end":157,"column_start":1,"column_end":76}},{"value":"/ designed to bias to specifically chosen characters and character ranges to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210365,"byte_end":210443,"line_start":158,"line_end":158,"column_start":1,"column_end":79}},{"value":"/ produce inputs that are both more useful and easier for humans to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210444,"byte_end":210513,"line_start":159,"line_end":159,"column_start":1,"column_end":70}},{"value":"/ understand. There are also hard-wired simplification targets based on ASCII","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210514,"byte_end":210593,"line_start":160,"line_end":160,"column_start":1,"column_end":80}},{"value":"/ instead of simply simplifying towards NUL to avoid problematic inputs being","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210594,"byte_end":210673,"line_start":161,"line_end":161,"column_start":1,"column_end":80}},{"value":"/ reduced to a bunch of NUL characters.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210674,"byte_end":210715,"line_start":162,"line_end":162,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210716,"byte_end":210719,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ Shrinking never crosses ranges. If you have a complex range like `[A-Za-z]`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210720,"byte_end":210799,"line_start":164,"line_end":164,"column_start":1,"column_end":80}},{"value":"/ and the starting point `x` is chosen, it will not shrink to the first `A-Z`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210800,"byte_end":210879,"line_start":165,"line_end":165,"column_start":1,"column_end":80}},{"value":"/ group, but rather simply to `a`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210880,"byte_end":210916,"line_start":166,"line_end":166,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210917,"byte_end":210920,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ The usual way to get instances of this class is with the module-level `ANY`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":210921,"byte_end":211000,"line_start":168,"line_end":168,"column_start":1,"column_end":80}},{"value":"/ constant or `range` function. Directly constructing a `CharStrategy` is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211001,"byte_end":211076,"line_start":169,"line_end":169,"column_start":1,"column_end":76}},{"value":"/ only necessary for complex ranges or to override the default biases.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211077,"byte_end":211149,"line_start":170,"line_end":170,"column_start":1,"column_end":73}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211174,"byte_end":211223,"line_start":172,"line_end":172,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211575,"byte_end":211578,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<CharStrategy>::new","value":"fn (special: Cow<'a, [char]>, preferred: Cow<'a, [CharRange]>, ranges: Cow<'a, [CharRange]>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `CharStrategy` with the parameters it will pass to the\n function underlying `select_char()`.","sig":null,"attributes":[{"value":"/ Construct a new `CharStrategy` with the parameters it will pass to the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211390,"byte_end":211464,"line_start":180,"line_end":180,"column_start":5,"column_end":79}},{"value":"/ function underlying `select_char()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211469,"byte_end":211509,"line_start":181,"line_end":181,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211514,"byte_end":211517,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ All arguments as per `select_char()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211522,"byte_end":211563,"line_start":183,"line_end":183,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211903,"byte_end":211915,"line_start":197,"line_end":197,"column_start":12,"column_end":24},"name":"new_borrowed","qualname":"<CharStrategy>::new_borrowed","value":"fn (special: &'a [char], preferred: &'a [CharRange], ranges: &'a [CharRange]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Same as `CharStrategy::new()` but using `Cow::Borrowed` for all parts.\n","sig":null,"attributes":[{"value":"/ Same as `CharStrategy::new()` but using `Cow::Borrowed` for all parts.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211817,"byte_end":211891,"line_start":196,"line_end":196,"column_start":5,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":212359,"byte_end":212362,"line_start":214,"line_end":214,"column_start":8,"column_end":11},"name":"any","qualname":"::char::any","value":"fn () -> CharStrategy<'static>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `CharStrategy` which picks from literally any character, with the\n default biases.\n","sig":null,"attributes":[{"value":"/ Creates a `CharStrategy` which picks from literally any character, with the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":212252,"byte_end":212331,"line_start":212,"line_end":212,"column_start":1,"column_end":80}},{"value":"/ default biases.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":212332,"byte_end":212351,"line_start":213,"line_end":213,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":212709,"byte_end":212714,"line_start":224,"line_end":224,"column_start":8,"column_end":13},"name":"range","qualname":"::char::range","value":"fn (start: char, end: char) -> CharStrategy<'static>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `CharStrategy` which selects characters within the given\n endpoints, inclusive, using the default biases.\n","sig":null,"attributes":[{"value":"/ Creates a `CharStrategy` which selects characters within the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":212579,"byte_end":212649,"line_start":222,"line_end":222,"column_start":1,"column_end":71}},{"value":"/ endpoints, inclusive, using the default biases.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":212650,"byte_end":212701,"line_start":223,"line_end":223,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":628},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":213087,"byte_end":213093,"line_start":234,"line_end":234,"column_start":8,"column_end":14},"name":"ranges","qualname":"::char::ranges","value":"fn (ranges: Cow<[CharRange]>) -> CharStrategy","parent":null,"children":[],"decl_id":null,"docs":" Creates a `CharStrategy` which selects characters within the given ranges,\n all inclusive, using the default biases.\n","sig":null,"attributes":[{"value":"/ Creates a `CharStrategy` which selects characters within the given ranges,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":212956,"byte_end":213034,"line_start":232,"line_end":232,"column_start":1,"column_end":79}},{"value":"/ all inclusive, using the default biases.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":213035,"byte_end":213079,"line_start":233,"line_end":233,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":5239},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":213391,"byte_end":213404,"line_start":244,"line_end":244,"column_start":12,"column_end":25},"name":"CharValueTree","qualname":"::char::CharValueTree","value":"CharValueTree {  }","parent":null,"children":[{"krate":0,"index":5240}],"decl_id":null,"docs":" The `ValueTree` corresponding to `CharStrategy`.\n","sig":null,"attributes":[{"value":"/ The `ValueTree` corresponding to `CharStrategy`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":213297,"byte_end":213349,"line_start":242,"line_end":242,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":641},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collection","qualname":"::collection","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":659},{"krate":0,"index":662},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":5246},{"krate":0,"index":5261},{"krate":0,"index":5257},{"krate":0,"index":5258},{"krate":0,"index":5254},{"krate":0,"index":5255},{"krate":0,"index":5251},{"krate":0,"index":5249},{"krate":0,"index":669},{"krate":0,"index":671},{"krate":0,"index":673},{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":5263},{"krate":0,"index":5270},{"krate":0,"index":5267},{"krate":0,"index":702},{"krate":0,"index":5277},{"krate":0,"index":5282},{"krate":0,"index":5281},{"krate":0,"index":5279},{"krate":0,"index":5273},{"krate":0,"index":5292},{"krate":0,"index":5299},{"krate":0,"index":5296},{"krate":0,"index":5302},{"krate":0,"index":5309},{"krate":0,"index":5306},{"krate":0,"index":5284},{"krate":0,"index":5289},{"krate":0,"index":705},{"krate":0,"index":5319},{"krate":0,"index":5324},{"krate":0,"index":5323},{"krate":0,"index":5321},{"krate":0,"index":5315},{"krate":0,"index":5334},{"krate":0,"index":5341},{"krate":0,"index":5338},{"krate":0,"index":5344},{"krate":0,"index":5351},{"krate":0,"index":5348},{"krate":0,"index":5326},{"krate":0,"index":5331},{"krate":0,"index":708},{"krate":0,"index":5361},{"krate":0,"index":5366},{"krate":0,"index":5365},{"krate":0,"index":5363},{"krate":0,"index":5357},{"krate":0,"index":5376},{"krate":0,"index":5383},{"krate":0,"index":5380},{"krate":0,"index":5386},{"krate":0,"index":5393},{"krate":0,"index":5390},{"krate":0,"index":5368},{"krate":0,"index":5373},{"krate":0,"index":711},{"krate":0,"index":5403},{"krate":0,"index":5408},{"krate":0,"index":5407},{"krate":0,"index":5405},{"krate":0,"index":5399},{"krate":0,"index":5410},{"krate":0,"index":5416},{"krate":0,"index":5414},{"krate":0,"index":5413},{"krate":0,"index":714},{"krate":0,"index":5426},{"krate":0,"index":5433},{"krate":0,"index":5430},{"krate":0,"index":5436},{"krate":0,"index":5443},{"krate":0,"index":5440},{"krate":0,"index":5418},{"krate":0,"index":5423},{"krate":0,"index":717},{"krate":0,"index":5453},{"krate":0,"index":5458},{"krate":0,"index":5457},{"krate":0,"index":5455},{"krate":0,"index":5449},{"krate":0,"index":720},{"krate":0,"index":5468},{"krate":0,"index":5475},{"krate":0,"index":5472},{"krate":0,"index":5478},{"krate":0,"index":5485},{"krate":0,"index":5482},{"krate":0,"index":5460},{"krate":0,"index":5465},{"krate":0,"index":723},{"krate":0,"index":5496},{"krate":0,"index":5501},{"krate":0,"index":5500},{"krate":0,"index":5498},{"krate":0,"index":5491},{"krate":0,"index":726},{"krate":0,"index":5513},{"krate":0,"index":5522},{"krate":0,"index":5518},{"krate":0,"index":5526},{"krate":0,"index":5535},{"krate":0,"index":5531},{"krate":0,"index":5503},{"krate":0,"index":5509},{"krate":0,"index":730},{"krate":0,"index":5547},{"krate":0,"index":5552},{"krate":0,"index":5551},{"krate":0,"index":5549},{"krate":0,"index":5542},{"krate":0,"index":734},{"krate":0,"index":5564},{"krate":0,"index":5573},{"krate":0,"index":5569},{"krate":0,"index":5577},{"krate":0,"index":5586},{"krate":0,"index":5582},{"krate":0,"index":5554},{"krate":0,"index":5560},{"krate":0,"index":738},{"krate":0,"index":5593},{"krate":0,"index":5603},{"krate":0,"index":5602},{"krate":0,"index":5600},{"krate":0,"index":5605},{"krate":0,"index":5615},{"krate":0,"index":5612},{"krate":0,"index":742},{"krate":0,"index":747},{"krate":0,"index":753}],"decl_id":null,"docs":" Strategies for generating `std::collections` of values.\n","sig":null,"attributes":[{"value":"! Strategies for generating `std::collections` of values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":218376,"byte_end":218435,"line_start":10,"line_end":10,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5246},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219434,"byte_end":219443,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"SizeRange","qualname":"::collection::SizeRange","value":"","parent":null,"children":[],"decl_id":null,"docs":" The minimum and maximum range/bounds on the size of a collection.\n The interval must form a subset of `[0, std::usize::MAX)`.","sig":null,"attributes":[{"value":"/ The minimum and maximum range/bounds on the size of a collection.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219075,"byte_end":219144,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ The interval must form a subset of `[0, std::usize::MAX)`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219145,"byte_end":219207,"line_start":35,"line_end":35,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219208,"byte_end":219211,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ A value like `0..=std::usize::MAX` will still be accepted but will silently","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219212,"byte_end":219291,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ truncate the maximum to `std::usize::MAX - 1`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219292,"byte_end":219342,"line_start":38,"line_end":38,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219343,"byte_end":219346,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The `Default` is `0..100`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219347,"byte_end":219377,"line_start":40,"line_end":40,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219538,"byte_end":219548,"line_start":45,"line_end":45,"column_start":8,"column_end":18},"name":"size_range","qualname":"::collection::size_range","value":"fn (from: impl Into<SizeRange>) -> SizeRange","parent":null,"children":[],"decl_id":null,"docs":" Creates a `SizeRange` from some value that is convertible into it.\n","sig":null,"attributes":[{"value":"/ Creates a `SizeRange` from some value that is convertible into it.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219460,"byte_end":219530,"line_start":44,"line_end":44,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219863,"byte_end":219866,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<SizeRange>::new","value":"fn (range: RangeInclusive<usize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `SizeBounds` from a `RangeInclusive<usize>`.\n","sig":null,"attributes":[{"value":"/ Creates a `SizeBounds` from a `RangeInclusive<usize>`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219793,"byte_end":219851,"line_start":57,"line_end":57,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":220238,"byte_end":220242,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"with","qualname":"<SizeRange>::with","value":"fn <X> (self, and: X) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument producing a product\n type expected by some implementations of `A: Arbitrary` in\n `A::Parameters`. This can be more ergonomic to work with and may\n help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument producing a product","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219988,"byte_end":220057,"line_start":64,"line_end":64,"column_start":5,"column_end":74}},{"value":"/ type expected by some implementations of `A: Arbitrary` in","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":220062,"byte_end":220124,"line_start":65,"line_end":65,"column_start":5,"column_end":67}},{"value":"/ `A::Parameters`. This can be more ergonomic to work with and may","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":220129,"byte_end":220197,"line_start":66,"line_end":66,"column_start":5,"column_end":73}},{"value":"/ help type inference.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":220202,"byte_end":220226,"line_start":67,"line_end":67,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":220613,"byte_end":220617,"line_start":76,"line_end":76,"column_start":12,"column_end":16},"name":"lift","qualname":"<SizeRange>::lift","value":"fn <X> (self) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument generated with a\n default value producing a product type expected by some\n implementations of `A: Arbitrary` in `A::Parameters`.\n This can be more ergonomic to work with and may help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument generated with a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":220332,"byte_end":220398,"line_start":72,"line_end":72,"column_start":5,"column_end":71}},{"value":"/ default value producing a product type expected by some","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":220403,"byte_end":220462,"line_start":73,"line_end":73,"column_start":5,"column_end":64}},{"value":"/ implementations of `A: Arbitrary` in `A::Parameters`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":220467,"byte_end":220524,"line_start":74,"line_end":74,"column_start":5,"column_end":62}},{"value":"/ This can be more ergonomic to work with and may help type inference.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":220529,"byte_end":220601,"line_start":75,"line_end":75,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":5263},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":223975,"byte_end":223986,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"VecStrategy","qualname":"::collection::VecStrategy","value":"VecStrategy {  }","parent":null,"children":[{"krate":0,"index":5265},{"krate":0,"index":5266}],"decl_id":null,"docs":" Strategy to create `Vec`s with a length in a certain range.","sig":null,"attributes":[{"value":"/ Strategy to create `Vec`s with a length in a certain range.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":223766,"byte_end":223829,"line_start":194,"line_end":194,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":223830,"byte_end":223833,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ Created by the `vec()` function in the same module.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":223834,"byte_end":223889,"line_start":196,"line_end":196,"column_start":1,"column_end":56}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":223890,"byte_end":223939,"line_start":197,"line_end":197,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":224328,"byte_end":224331,"line_start":209,"line_end":209,"column_start":8,"column_end":11},"name":"vec","qualname":"::collection::vec","value":"fn <T> (element: T, size: impl Into<SizeRange>) -> VecStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `Vec`s containing elements drawn from\n `element` and with a size range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `Vec`s containing elements drawn from","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":224042,"byte_end":224113,"line_start":204,"line_end":204,"column_start":1,"column_end":72}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":224114,"byte_end":224166,"line_start":205,"line_end":205,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":224167,"byte_end":224170,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ To make a `Vec` with a fixed number of elements, each with its own","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":224171,"byte_end":224241,"line_start":207,"line_end":207,"column_start":1,"column_end":71}},{"value":"/ strategy, you can instead make a `Vec` of strategies (boxed if necessary).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":224242,"byte_end":224320,"line_start":208,"line_end":208,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":5292},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":224832,"byte_end":224848,"line_start":229,"line_end":229,"column_start":16,"column_end":32},"name":"VecDequeStrategy","qualname":"::collection::VecDequeStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `VecDeque`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5302},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":225064,"byte_end":225081,"line_start":234,"line_end":234,"column_start":16,"column_end":33},"name":"VecDequeValueTree","qualname":"::collection::VecDequeValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `VecDequeStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":705},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":225331,"byte_end":225340,"line_start":241,"line_end":241,"column_start":8,"column_end":17},"name":"vec_deque","qualname":"::collection::vec_deque","value":"fn <T> (element: T, size: impl Into<SizeRange>) -> VecDequeStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `VecDeque`s containing elements drawn from\n `element` and with a size range given by `size`.\n","sig":null,"attributes":[{"value":"/ Create a strategy to generate `VecDeque`s containing elements drawn from","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":225194,"byte_end":225270,"line_start":239,"line_end":239,"column_start":1,"column_end":77}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":225271,"byte_end":225323,"line_start":240,"line_end":240,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5334},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":225845,"byte_end":225863,"line_start":259,"line_end":259,"column_start":16,"column_end":34},"name":"LinkedListStrategy","qualname":"::collection::LinkedListStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `LinkedList`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5344},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":226080,"byte_end":226099,"line_start":264,"line_end":264,"column_start":16,"column_end":35},"name":"LinkedListValueTree","qualname":"::collection::LinkedListValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `LinkedListStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":226350,"byte_end":226361,"line_start":271,"line_end":271,"column_start":8,"column_end":19},"name":"linked_list","qualname":"::collection::linked_list","value":"fn <T> (element: T, size: impl Into<SizeRange>) -> LinkedListStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `LinkedList`s containing elements drawn from\n `element` and with a size range given by `size`.\n","sig":null,"attributes":[{"value":"/ Create a strategy to generate `LinkedList`s containing elements drawn from","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":226211,"byte_end":226289,"line_start":269,"line_end":269,"column_start":1,"column_end":79}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":226290,"byte_end":226342,"line_start":270,"line_end":270,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5376},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":226864,"byte_end":226882,"line_start":289,"line_end":289,"column_start":16,"column_end":34},"name":"BinaryHeapStrategy","qualname":"::collection::BinaryHeapStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `BinaryHeap`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5386},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":227120,"byte_end":227139,"line_start":294,"line_end":294,"column_start":16,"column_end":35},"name":"BinaryHeapValueTree","qualname":"::collection::BinaryHeapValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `BinaryHeapStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":227411,"byte_end":227422,"line_start":301,"line_end":301,"column_start":8,"column_end":19},"name":"binary_heap","qualname":"::collection::binary_heap","value":"fn <T> (element: T, size: impl Into<SizeRange>) -> BinaryHeapStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `BinaryHeap`s containing elements drawn from\n `element` and with a size range given by `size`.\n","sig":null,"attributes":[{"value":"/ Create a strategy to generate `BinaryHeap`s containing elements drawn from","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":227272,"byte_end":227350,"line_start":299,"line_end":299,"column_start":1,"column_end":79}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":227351,"byte_end":227403,"line_start":300,"line_end":300,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5426},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":228306,"byte_end":228321,"line_start":335,"line_end":335,"column_start":16,"column_end":31},"name":"HashSetStrategy","qualname":"::collection::HashSetStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `HashSet`s with a length in a certain range.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7706,"byte_end":7717,"line_start":58,"line_end":58,"column_start":11,"column_end":22}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5436},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":228585,"byte_end":228601,"line_start":340,"line_end":340,"column_start":16,"column_end":32},"name":"HashSetValueTree","qualname":"::collection::HashSetValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `HashSetStrategy`.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7890,"byte_end":7901,"line_start":64,"line_end":64,"column_start":11,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":229111,"byte_end":229119,"line_start":352,"line_end":352,"column_start":8,"column_end":16},"name":"hash_set","qualname":"::collection::hash_set","value":"fn <T> (element: T, size: impl Into<SizeRange>) -> HashSetStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `HashSet`s containing elements drawn from\n `element` and with a size range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `HashSet`s containing elements drawn from","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":228763,"byte_end":228838,"line_start":345,"line_end":345,"column_start":1,"column_end":76}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":228839,"byte_end":228891,"line_start":346,"line_end":346,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":228892,"byte_end":228895,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the `HashSet`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":228896,"byte_end":228975,"line_start":348,"line_end":348,"column_start":1,"column_end":80}},{"value":"/ has at least the minimum number of elements, in case `element` should","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":228976,"byte_end":229049,"line_start":349,"line_end":349,"column_start":1,"column_end":74}},{"value":"/ produce duplicate values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":229050,"byte_end":229079,"line_start":350,"line_end":350,"column_start":1,"column_end":30}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":229080,"byte_end":229103,"line_start":351,"line_end":351,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5468},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":229997,"byte_end":230013,"line_start":385,"line_end":385,"column_start":16,"column_end":32},"name":"BTreeSetStrategy","qualname":"::collection::BTreeSetStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `BTreeSet`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5478},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":230274,"byte_end":230291,"line_start":390,"line_end":390,"column_start":16,"column_end":33},"name":"BTreeSetValueTree","qualname":"::collection::BTreeSetValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `BTreeSetStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":230775,"byte_end":230784,"line_start":401,"line_end":401,"column_start":8,"column_end":17},"name":"btree_set","qualname":"::collection::btree_set","value":"fn <T> (element: T, size: impl Into<SizeRange>) -> BTreeSetStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `BTreeSet`s containing elements drawn from\n `element` and with a size range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `BTreeSet`s containing elements drawn from","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":230449,"byte_end":230525,"line_start":395,"line_end":395,"column_start":1,"column_end":77}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":230526,"byte_end":230578,"line_start":396,"line_end":396,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":230579,"byte_end":230582,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":230583,"byte_end":230652,"line_start":398,"line_end":398,"column_start":1,"column_end":70}},{"value":"/ `BTreeSet` has at least the minimum number of elements, in case `element`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":230653,"byte_end":230730,"line_start":399,"line_end":399,"column_start":1,"column_end":78}},{"value":"/ should produce duplicate values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":230731,"byte_end":230767,"line_start":400,"line_end":400,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":5513},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":231748,"byte_end":231763,"line_start":438,"line_end":438,"column_start":16,"column_end":31},"name":"HashMapStrategy","qualname":"::collection::HashMapStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `HashMap`s with a length in a certain range.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7706,"byte_end":7717,"line_start":58,"line_end":58,"column_start":11,"column_end":22}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5526},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":232082,"byte_end":232098,"line_start":445,"line_end":445,"column_start":16,"column_end":32},"name":"HashMapValueTree","qualname":"::collection::HashMapValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `HashMapStrategy`.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7890,"byte_end":7901,"line_start":64,"line_end":64,"column_start":11,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":232712,"byte_end":232720,"line_start":460,"line_end":460,"column_start":8,"column_end":16},"name":"hash_map","qualname":"::collection::hash_map","value":"fn <K, V> (key: K, value: V, size: impl Into<SizeRange>) -> HashMapStrategy<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `HashMap`s containing keys and values drawn\n from `key` and `value` respectively, and with a size within the given\n range.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `HashMap`s containing keys and values drawn","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":232334,"byte_end":232411,"line_start":452,"line_end":452,"column_start":1,"column_end":78}},{"value":"/ from `key` and `value` respectively, and with a size within the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":232412,"byte_end":232485,"line_start":453,"line_end":453,"column_start":1,"column_end":74}},{"value":"/ range.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":232486,"byte_end":232496,"line_start":454,"line_end":454,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":232497,"byte_end":232500,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the `HashMap`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":232501,"byte_end":232580,"line_start":456,"line_end":456,"column_start":1,"column_end":80}},{"value":"/ has at least the minimum number of elements, in case `key` should produce","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":232581,"byte_end":232658,"line_start":457,"line_end":457,"column_start":1,"column_end":78}},{"value":"/ duplicate values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":232659,"byte_end":232680,"line_start":458,"line_end":458,"column_start":1,"column_end":22}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":232681,"byte_end":232704,"line_start":459,"line_end":459,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5564},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":233627,"byte_end":233643,"line_start":495,"line_end":495,"column_start":16,"column_end":32},"name":"BTreeMapStrategy","qualname":"::collection::BTreeMapStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `BTreeMap`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5577},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":233959,"byte_end":233976,"line_start":502,"line_end":502,"column_start":16,"column_end":33},"name":"BTreeMapValueTree","qualname":"::collection::BTreeMapValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `BTreeMapStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":738},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":234564,"byte_end":234573,"line_start":516,"line_end":516,"column_start":8,"column_end":17},"name":"btree_map","qualname":"::collection::btree_map","value":"fn <K, V> (key: K, value: V, size: impl Into<SizeRange>) -> BTreeMapStrategy<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `BTreeMap`s containing keys and values drawn\n from `key` and `value` respectively, and with a size within the given\n range.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `BTreeMap`s containing keys and values drawn","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":234208,"byte_end":234286,"line_start":509,"line_end":509,"column_start":1,"column_end":79}},{"value":"/ from `key` and `value` respectively, and with a size within the given","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":234287,"byte_end":234360,"line_start":510,"line_end":510,"column_start":1,"column_end":74}},{"value":"/ range.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":234361,"byte_end":234371,"line_start":511,"line_end":511,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":234372,"byte_end":234375,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":234376,"byte_end":234445,"line_start":513,"line_end":513,"column_start":1,"column_end":70}},{"value":"/ `BTreeMap` has at least the minimum number of elements, in case `key`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":234446,"byte_end":234519,"line_start":514,"line_end":514,"column_start":1,"column_end":74}},{"value":"/ should produce duplicate values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":234520,"byte_end":234556,"line_start":515,"line_end":515,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":5605},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":235123,"byte_end":235135,"line_start":540,"line_end":540,"column_start":12,"column_end":24},"name":"VecValueTree","qualname":"::collection::VecValueTree","value":"VecValueTree {  }","parent":null,"children":[{"krate":0,"index":5607},{"krate":0,"index":5608},{"krate":0,"index":5609},{"krate":0,"index":5610},{"krate":0,"index":5611}],"decl_id":null,"docs":" `ValueTree` corresponding to `VecStrategy`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` corresponding to `VecStrategy`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":235040,"byte_end":235087,"line_start":538,"line_end":538,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":761},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":5618},{"krate":0,"index":5677},{"krate":0,"index":5736},{"krate":0,"index":5795},{"krate":0,"index":5854},{"krate":0,"index":5913},{"krate":0,"index":5972},{"krate":0,"index":6028},{"krate":0,"index":6084},{"krate":0,"index":6140},{"krate":0,"index":6196},{"krate":0,"index":6252},{"krate":0,"index":6308},{"krate":0,"index":6330},{"krate":0,"index":6326},{"krate":0,"index":6327},{"krate":0,"index":6323},{"krate":0,"index":6324},{"krate":0,"index":6321},{"krate":0,"index":6315},{"krate":0,"index":6313},{"krate":0,"index":6310},{"krate":0,"index":6331},{"krate":0,"index":6344},{"krate":0,"index":6346},{"krate":0,"index":6348},{"krate":0,"index":6350},{"krate":0,"index":6352},{"krate":0,"index":6367},{"krate":0,"index":6370},{"krate":0,"index":6372},{"krate":0,"index":6375},{"krate":0,"index":6377},{"krate":0,"index":6380},{"krate":0,"index":6382},{"krate":0,"index":6385},{"krate":0,"index":6387},{"krate":0,"index":6390},{"krate":0,"index":6393},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":786},{"krate":0,"index":792},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":6434},{"krate":0,"index":6514}],"decl_id":null,"docs":" Strategies to generate numeric values (as opposed to integers used as bit\n fields).","sig":null,"attributes":[{"value":"! Strategies to generate numeric values (as opposed to integers used as bit","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":242981,"byte_end":243058,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"! fields).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":243059,"byte_end":243071,"line_start":11,"line_end":11,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":243072,"byte_end":243075,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! All strategies in this module shrink by binary searching towards 0.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":243076,"byte_end":243147,"line_start":13,"line_end":13,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":5618},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":252889,"byte_end":252891,"line_start":330,"line_end":330,"column_start":28,"column_end":30},"name":"i8","qualname":"::num::i8","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":5619},{"krate":0,"index":5620},{"krate":0,"index":5621},{"krate":0,"index":5640},{"krate":0,"index":5646},{"krate":0,"index":5645},{"krate":0,"index":5643},{"krate":0,"index":5635},{"krate":0,"index":5636},{"krate":0,"index":5648},{"krate":0,"index":5655},{"krate":0,"index":5654},{"krate":0,"index":5652},{"krate":0,"index":5622},{"krate":0,"index":5630},{"krate":0,"index":5657},{"krate":0,"index":5661},{"krate":0,"index":5665},{"krate":0,"index":5669},{"krate":0,"index":5673}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":247045,"byte_end":247067,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5677},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":252921,"byte_end":252924,"line_start":331,"line_end":331,"column_start":28,"column_end":31},"name":"i16","qualname":"::num::i16","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":5678},{"krate":0,"index":5679},{"krate":0,"index":5680},{"krate":0,"index":5699},{"krate":0,"index":5705},{"krate":0,"index":5704},{"krate":0,"index":5702},{"krate":0,"index":5694},{"krate":0,"index":5695},{"krate":0,"index":5707},{"krate":0,"index":5714},{"krate":0,"index":5713},{"krate":0,"index":5711},{"krate":0,"index":5681},{"krate":0,"index":5689},{"krate":0,"index":5716},{"krate":0,"index":5720},{"krate":0,"index":5724},{"krate":0,"index":5728},{"krate":0,"index":5732}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":247045,"byte_end":247067,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5736},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":252954,"byte_end":252957,"line_start":332,"line_end":332,"column_start":28,"column_end":31},"name":"i32","qualname":"::num::i32","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":5737},{"krate":0,"index":5738},{"krate":0,"index":5739},{"krate":0,"index":5758},{"krate":0,"index":5764},{"krate":0,"index":5763},{"krate":0,"index":5761},{"krate":0,"index":5753},{"krate":0,"index":5754},{"krate":0,"index":5766},{"krate":0,"index":5773},{"krate":0,"index":5772},{"krate":0,"index":5770},{"krate":0,"index":5740},{"krate":0,"index":5748},{"krate":0,"index":5775},{"krate":0,"index":5779},{"krate":0,"index":5783},{"krate":0,"index":5787},{"krate":0,"index":5791}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":247045,"byte_end":247067,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5795},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":252987,"byte_end":252990,"line_start":333,"line_end":333,"column_start":28,"column_end":31},"name":"i64","qualname":"::num::i64","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":5796},{"krate":0,"index":5797},{"krate":0,"index":5798},{"krate":0,"index":5817},{"krate":0,"index":5823},{"krate":0,"index":5822},{"krate":0,"index":5820},{"krate":0,"index":5812},{"krate":0,"index":5813},{"krate":0,"index":5825},{"krate":0,"index":5832},{"krate":0,"index":5831},{"krate":0,"index":5829},{"krate":0,"index":5799},{"krate":0,"index":5807},{"krate":0,"index":5834},{"krate":0,"index":5838},{"krate":0,"index":5842},{"krate":0,"index":5846},{"krate":0,"index":5850}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":247045,"byte_end":247067,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5854},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":253056,"byte_end":253060,"line_start":335,"line_end":335,"column_start":28,"column_end":32},"name":"i128","qualname":"::num::i128","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":5855},{"krate":0,"index":5856},{"krate":0,"index":5857},{"krate":0,"index":5876},{"krate":0,"index":5882},{"krate":0,"index":5881},{"krate":0,"index":5879},{"krate":0,"index":5871},{"krate":0,"index":5872},{"krate":0,"index":5884},{"krate":0,"index":5891},{"krate":0,"index":5890},{"krate":0,"index":5888},{"krate":0,"index":5858},{"krate":0,"index":5866},{"krate":0,"index":5893},{"krate":0,"index":5897},{"krate":0,"index":5901},{"krate":0,"index":5905},{"krate":0,"index":5909}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":247045,"byte_end":247067,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5913},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":253090,"byte_end":253095,"line_start":336,"line_end":336,"column_start":28,"column_end":33},"name":"isize","qualname":"::num::isize","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":5914},{"krate":0,"index":5915},{"krate":0,"index":5916},{"krate":0,"index":5935},{"krate":0,"index":5941},{"krate":0,"index":5940},{"krate":0,"index":5938},{"krate":0,"index":5930},{"krate":0,"index":5931},{"krate":0,"index":5943},{"krate":0,"index":5950},{"krate":0,"index":5949},{"krate":0,"index":5947},{"krate":0,"index":5917},{"krate":0,"index":5925},{"krate":0,"index":5952},{"krate":0,"index":5956},{"krate":0,"index":5960},{"krate":0,"index":5964},{"krate":0,"index":5968}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":247045,"byte_end":247067,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":5972},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":253127,"byte_end":253129,"line_start":337,"line_end":337,"column_start":30,"column_end":32},"name":"u8","qualname":"::num::u8","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":5973},{"krate":0,"index":5974},{"krate":0,"index":5975},{"krate":0,"index":5991},{"krate":0,"index":5997},{"krate":0,"index":5996},{"krate":0,"index":5994},{"krate":0,"index":5986},{"krate":0,"index":5987},{"krate":0,"index":5999},{"krate":0,"index":6006},{"krate":0,"index":6005},{"krate":0,"index":6003},{"krate":0,"index":5976},{"krate":0,"index":5981},{"krate":0,"index":6008},{"krate":0,"index":6012},{"krate":0,"index":6016},{"krate":0,"index":6020},{"krate":0,"index":6024}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":250258,"byte_end":250280,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6028},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":253161,"byte_end":253164,"line_start":338,"line_end":338,"column_start":30,"column_end":33},"name":"u16","qualname":"::num::u16","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6029},{"krate":0,"index":6030},{"krate":0,"index":6031},{"krate":0,"index":6047},{"krate":0,"index":6053},{"krate":0,"index":6052},{"krate":0,"index":6050},{"krate":0,"index":6042},{"krate":0,"index":6043},{"krate":0,"index":6055},{"krate":0,"index":6062},{"krate":0,"index":6061},{"krate":0,"index":6059},{"krate":0,"index":6032},{"krate":0,"index":6037},{"krate":0,"index":6064},{"krate":0,"index":6068},{"krate":0,"index":6072},{"krate":0,"index":6076},{"krate":0,"index":6080}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":250258,"byte_end":250280,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6084},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":253196,"byte_end":253199,"line_start":339,"line_end":339,"column_start":30,"column_end":33},"name":"u32","qualname":"::num::u32","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6085},{"krate":0,"index":6086},{"krate":0,"index":6087},{"krate":0,"index":6103},{"krate":0,"index":6109},{"krate":0,"index":6108},{"krate":0,"index":6106},{"krate":0,"index":6098},{"krate":0,"index":6099},{"krate":0,"index":6111},{"krate":0,"index":6118},{"krate":0,"index":6117},{"krate":0,"index":6115},{"krate":0,"index":6088},{"krate":0,"index":6093},{"krate":0,"index":6120},{"krate":0,"index":6124},{"krate":0,"index":6128},{"krate":0,"index":6132},{"krate":0,"index":6136}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":250258,"byte_end":250280,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6140},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":253231,"byte_end":253234,"line_start":340,"line_end":340,"column_start":30,"column_end":33},"name":"u64","qualname":"::num::u64","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6141},{"krate":0,"index":6142},{"krate":0,"index":6143},{"krate":0,"index":6159},{"krate":0,"index":6165},{"krate":0,"index":6164},{"krate":0,"index":6162},{"krate":0,"index":6154},{"krate":0,"index":6155},{"krate":0,"index":6167},{"krate":0,"index":6174},{"krate":0,"index":6173},{"krate":0,"index":6171},{"krate":0,"index":6144},{"krate":0,"index":6149},{"krate":0,"index":6176},{"krate":0,"index":6180},{"krate":0,"index":6184},{"krate":0,"index":6188},{"krate":0,"index":6192}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":250258,"byte_end":250280,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6196},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":253302,"byte_end":253306,"line_start":342,"line_end":342,"column_start":30,"column_end":34},"name":"u128","qualname":"::num::u128","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6197},{"krate":0,"index":6198},{"krate":0,"index":6199},{"krate":0,"index":6215},{"krate":0,"index":6221},{"krate":0,"index":6220},{"krate":0,"index":6218},{"krate":0,"index":6210},{"krate":0,"index":6211},{"krate":0,"index":6223},{"krate":0,"index":6230},{"krate":0,"index":6229},{"krate":0,"index":6227},{"krate":0,"index":6200},{"krate":0,"index":6205},{"krate":0,"index":6232},{"krate":0,"index":6236},{"krate":0,"index":6240},{"krate":0,"index":6244},{"krate":0,"index":6248}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":250258,"byte_end":250280,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6252},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":253338,"byte_end":253343,"line_start":343,"line_end":343,"column_start":30,"column_end":35},"name":"usize","qualname":"::num::usize","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6253},{"krate":0,"index":6254},{"krate":0,"index":6255},{"krate":0,"index":6271},{"krate":0,"index":6277},{"krate":0,"index":6276},{"krate":0,"index":6274},{"krate":0,"index":6266},{"krate":0,"index":6267},{"krate":0,"index":6279},{"krate":0,"index":6286},{"krate":0,"index":6285},{"krate":0,"index":6283},{"krate":0,"index":6256},{"krate":0,"index":6261},{"krate":0,"index":6288},{"krate":0,"index":6292},{"krate":0,"index":6296},{"krate":0,"index":6300},{"krate":0,"index":6304}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":250258,"byte_end":250280,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":781},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":254638,"byte_end":254642,"line_start":390,"line_end":390,"column_start":10,"column_end":14},"name":"Bits","qualname":"::num::FloatLayout::Bits","value":"type Bits: Copy;","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":6434},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":273182,"byte_end":273185,"line_start":850,"line_end":850,"column_start":19,"column_end":22},"name":"f32","qualname":"::num::f32","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6435},{"krate":0,"index":6436},{"krate":0,"index":6437},{"krate":0,"index":6440},{"krate":0,"index":6441},{"krate":0,"index":6476},{"krate":0,"index":6482},{"krate":0,"index":6481},{"krate":0,"index":6479},{"krate":0,"index":6457},{"krate":0,"index":6460},{"krate":0,"index":6462},{"krate":0,"index":6463},{"krate":0,"index":6464},{"krate":0,"index":6465},{"krate":0,"index":6466},{"krate":0,"index":6467},{"krate":0,"index":6468},{"krate":0,"index":6469},{"krate":0,"index":6470},{"krate":0,"index":6471},{"krate":0,"index":6484},{"krate":0,"index":6492},{"krate":0,"index":6491},{"krate":0,"index":6489},{"krate":0,"index":6442},{"krate":0,"index":6452},{"krate":0,"index":6494},{"krate":0,"index":6498},{"krate":0,"index":6502},{"krate":0,"index":6506},{"krate":0,"index":6510}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":266762,"byte_end":266784,"line_start":668,"line_end":668,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6514},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":273206,"byte_end":273209,"line_start":851,"line_end":851,"column_start":19,"column_end":22},"name":"f64","qualname":"::num::f64","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6515},{"krate":0,"index":6516},{"krate":0,"index":6517},{"krate":0,"index":6520},{"krate":0,"index":6521},{"krate":0,"index":6556},{"krate":0,"index":6562},{"krate":0,"index":6561},{"krate":0,"index":6559},{"krate":0,"index":6537},{"krate":0,"index":6540},{"krate":0,"index":6542},{"krate":0,"index":6543},{"krate":0,"index":6544},{"krate":0,"index":6545},{"krate":0,"index":6546},{"krate":0,"index":6547},{"krate":0,"index":6548},{"krate":0,"index":6549},{"krate":0,"index":6550},{"krate":0,"index":6551},{"krate":0,"index":6564},{"krate":0,"index":6572},{"krate":0,"index":6571},{"krate":0,"index":6569},{"krate":0,"index":6522},{"krate":0,"index":6532},{"krate":0,"index":6574},{"krate":0,"index":6578},{"krate":0,"index":6582},{"krate":0,"index":6586},{"krate":0,"index":6590}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":266762,"byte_end":266784,"line_start":668,"line_end":668,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":800},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strategy","qualname":"::strategy","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":842},{"krate":0,"index":906},{"krate":0,"index":969},{"krate":0,"index":993},{"krate":0,"index":1051},{"krate":0,"index":1093},{"krate":0,"index":1201},{"krate":0,"index":1239},{"krate":0,"index":1268},{"krate":0,"index":1369},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447}],"decl_id":null,"docs":" Defines the core traits used by Proptest.\n","sig":null,"attributes":[{"value":"! Defines the core traits used by Proptest.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291106,"byte_end":291151,"line_start":10,"line_end":10,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":807},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":292185,"byte_end":292191,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Filter","qualname":"::strategy::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812}],"decl_id":null,"docs":" `Strategy` and `ValueTree` filter adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` filter adaptor.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":292038,"byte_end":292084,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":292085,"byte_end":292088,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_filter()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":292089,"byte_end":292123,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":292124,"byte_end":292173,"line_start":18,"line_end":18,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":849},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":296110,"byte_end":296119,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::strategy::filter_map::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854}],"decl_id":null,"docs":" `Strategy` and `ValueTree` filter_map adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` filter_map adaptor.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":295955,"byte_end":296005,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":296006,"byte_end":296009,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_filter_map()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":296010,"byte_end":296048,"line_start":17,"line_end":17,"column_start":1,"column_end":39}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":296049,"byte_end":296098,"line_start":18,"line_end":18,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":874},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":297574,"byte_end":297592,"line_start":74,"line_end":74,"column_start":12,"column_end":30},"name":"FilterMapValueTree","qualname":"::strategy::filter_map::FilterMapValueTree","value":"FilterMapValueTree {  }","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880}],"decl_id":null,"docs":" `ValueTree` corresponding to `FilterMap`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` corresponding to `FilterMap`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":297517,"byte_end":297562,"line_start":73,"line_end":73,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6594},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":301937,"byte_end":301944,"line_start":22,"line_end":22,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::strategy::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":6596}],"decl_id":null,"docs":" Adaptor that flattens a `Strategy` which produces other `Strategy`s into a\n `Strategy` that picks one of those strategies and then picks values from\n it.\n","sig":null,"attributes":[{"value":"/ Adaptor that flattens a `Strategy` which produces other `Strategy`s into a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":301682,"byte_end":301760,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ `Strategy` that picks one of those strategies and then picks values from","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":301761,"byte_end":301837,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ it.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":301838,"byte_end":301845,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":301876,"byte_end":301925,"line_start":21,"line_end":21,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":302047,"byte_end":302050,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Flatten<S>>::new","value":"fn (source: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap `source` to flatten it.\n","sig":null,"attributes":[{"value":"/ Wrap `source` to flatten it.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":302003,"byte_end":302035,"line_start":27,"line_end":27,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":922},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":302498,"byte_end":302514,"line_start":47,"line_end":47,"column_start":12,"column_end":28},"name":"FlattenValueTree","qualname":"::strategy::flatten::FlattenValueTree","value":"FlattenValueTree {  }","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928}],"decl_id":null,"docs":" The `ValueTree` produced by `Flatten`.\n","sig":null,"attributes":[{"value":"/ The `ValueTree` produced by `Flatten`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":302444,"byte_end":302486,"line_start":46,"line_end":46,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":6605},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":307823,"byte_end":307833,"line_start":203,"line_end":203,"column_start":12,"column_end":22},"name":"IndFlatten","qualname":"::strategy::flatten::IndFlatten","value":"","parent":null,"children":[],"decl_id":null,"docs":" Similar to `Flatten`, but does not shrink the input strategy.","sig":null,"attributes":[{"value":"/ Similar to `Flatten`, but does not shrink the input strategy.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":307653,"byte_end":307718,"line_start":199,"line_end":199,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":307719,"byte_end":307722,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_ind_flat_map()` fore more details.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":307723,"byte_end":307781,"line_start":201,"line_end":201,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":949},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":308381,"byte_end":308394,"line_start":222,"line_end":222,"column_start":12,"column_end":25},"name":"IndFlattenMap","qualname":"::strategy::flatten::IndFlattenMap","value":"IndFlattenMap {  }","parent":null,"children":[{"krate":0,"index":952},{"krate":0,"index":953}],"decl_id":null,"docs":" Similar to `Map` plus `Flatten`, but does not shrink the input strategy and\n passes the original input through.","sig":null,"attributes":[{"value":"/ Similar to `Map` plus `Flatten`, but does not shrink the input strategy and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":308188,"byte_end":308267,"line_start":218,"line_end":218,"column_start":1,"column_end":80}},{"value":"/ passes the original input through.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":308268,"byte_end":308306,"line_start":219,"line_end":219,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":308307,"byte_end":308310,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_ind_flat_map2()` for more details.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":308311,"byte_end":308369,"line_start":221,"line_end":221,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":6617},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314178,"byte_end":314182,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"Fuse","qualname":"::strategy::fuse::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":6619},{"krate":0,"index":6620},{"krate":0,"index":6621}],"decl_id":null,"docs":" Adaptor for `Strategy` and `ValueTree` which guards `simplify()` and\n `complicate()` to avoid contract violations.","sig":null,"attributes":[{"value":"/ Adaptor for `Strategy` and `ValueTree` which guards `simplify()` and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":312869,"byte_end":312941,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/ `complicate()` to avoid contract violations.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":312942,"byte_end":312990,"line_start":14,"line_end":14,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":312991,"byte_end":312994,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This can be used as an intermediate when the caller would otherwise need","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":312995,"byte_end":313071,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ its own separate state tracking, or as a workaround for a broken","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313072,"byte_end":313140,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ `ValueTree` implementation.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313141,"byte_end":313172,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313173,"byte_end":313176,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This wrapper specifically has the following effects:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313177,"byte_end":313233,"line_start":20,"line_end":20,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313234,"byte_end":313237,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ - Calling `complicate()` before `simplify()` was ever called does nothing","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313238,"byte_end":313315,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/   and returns `false`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313316,"byte_end":313342,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313343,"byte_end":313346,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - Calling `simplify()` after it has returned `false` and no calls to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313347,"byte_end":313419,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/   `complicate()` returned `true` does nothing and returns `false`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313420,"byte_end":313490,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313491,"byte_end":313494,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Calling `complicate()` after it has returned `false` and no calls to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313495,"byte_end":313569,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/   `simplify()` returned `true` does nothing and returns `false`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313570,"byte_end":313638,"line_start":29,"line_end":29,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313639,"byte_end":313642,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ There is also limited functionality to alter the internal state to assist","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313643,"byte_end":313720,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ in its usage as a state tracker.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313721,"byte_end":313757,"line_start":32,"line_end":32,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313758,"byte_end":313761,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Wrapping a `Strategy` in `Fuse` simply causes its `ValueTree` to also be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313762,"byte_end":313838,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ wrapped in `Fuse`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313839,"byte_end":313861,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313862,"byte_end":313865,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ While this is similar to `std::iter::Fuse`, it is not exposed as a method","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313866,"byte_end":313943,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ on `Strategy` since the vast majority of proptest should never need this","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":313944,"byte_end":314020,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ functionality; it mainly concerns implementors of strategies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314021,"byte_end":314086,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314117,"byte_end":314166,"line_start":41,"line_end":41,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314322,"byte_end":314325,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Fuse<T>>::new","value":"fn (inner: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap the given `T` in `Fuse`.\n","sig":null,"attributes":[{"value":"/ Wrap the given `T` in `Fuse`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314277,"byte_end":314310,"line_start":49,"line_end":49,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315104,"byte_end":315116,"line_start":77,"line_end":77,"column_start":12,"column_end":24},"name":"may_simplify","qualname":"<Fuse<T>>::may_simplify","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether a call to `simplify()` may be productive.","sig":null,"attributes":[{"value":"/ Return whether a call to `simplify()` may be productive.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314726,"byte_end":314786,"line_start":69,"line_end":69,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314791,"byte_end":314794,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Formally, this is true if one of the following holds:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314799,"byte_end":314856,"line_start":71,"line_end":71,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314861,"byte_end":314864,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ - `simplify()` has never been called.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314869,"byte_end":314910,"line_start":73,"line_end":73,"column_start":5,"column_end":46}},{"value":"/ - The most recent call to `simplify()` returned `true`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314915,"byte_end":314974,"line_start":74,"line_end":74,"column_start":5,"column_end":64}},{"value":"/ - `complicate()` has been called more recently than `simplify()` and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314979,"byte_end":315051,"line_start":75,"line_end":75,"column_start":5,"column_end":77}},{"value":"/   the last call returned `true`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315056,"byte_end":315092,"line_start":76,"line_end":76,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315284,"byte_end":315301,"line_start":83,"line_end":83,"column_start":12,"column_end":29},"name":"disallow_simplify","qualname":"<Fuse<T>>::disallow_simplify","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Disallow any further calls to `simplify()` until a call to\n `complicate()` returns `true`.\n","sig":null,"attributes":[{"value":"/ Disallow any further calls to `simplify()` until a call to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315171,"byte_end":315233,"line_start":81,"line_end":81,"column_start":5,"column_end":67}},{"value":"/ `complicate()` returns `true`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315238,"byte_end":315272,"line_start":82,"line_end":82,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315697,"byte_end":315711,"line_start":94,"line_end":94,"column_start":12,"column_end":26},"name":"may_complicate","qualname":"<Fuse<T>>::may_complicate","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether a call to `complicate()` may be productive.","sig":null,"attributes":[{"value":"/ Return whether a call to `complicate()` may be productive.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315361,"byte_end":315423,"line_start":87,"line_end":87,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315428,"byte_end":315431,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Formally, this is true if one of the following holds:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315436,"byte_end":315493,"line_start":89,"line_end":89,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315498,"byte_end":315501,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ - The most recent call to `complicate()` returned `true`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315506,"byte_end":315567,"line_start":91,"line_end":91,"column_start":5,"column_end":66}},{"value":"/ - `simplify()` has been called more recently than `complicate()` and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315572,"byte_end":315644,"line_start":92,"line_end":92,"column_start":5,"column_end":77}},{"value":"/   the last call returned `true`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315649,"byte_end":315685,"line_start":93,"line_end":93,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315881,"byte_end":315900,"line_start":100,"line_end":100,"column_start":12,"column_end":31},"name":"disallow_complicate","qualname":"<Fuse<T>>::disallow_complicate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Disallow any further calls to `complicate()` until a call to\n `simplify()` returns `true`.\n","sig":null,"attributes":[{"value":"/ Disallow any further calls to `complicate()` until a call to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315768,"byte_end":315832,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/ `simplify()` returns `true`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315837,"byte_end":315869,"line_start":99,"line_end":99,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":316034,"byte_end":316040,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Fuse<T>>::freeze","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Prevent any further shrinking operations from occurring.\n","sig":null,"attributes":[{"value":"/ Prevent any further shrinking operations from occurring.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":315962,"byte_end":316022,"line_start":104,"line_end":104,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":6630},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320009,"byte_end":320013,"line_start":34,"line_end":34,"column_start":12,"column_end":16},"name":"Just","qualname":"::strategy::just::Just","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `Strategy` which always produces a single value value and never\n simplifies.\n","sig":null,"attributes":[{"value":"/ A `Strategy` which always produces a single value value and never","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":319832,"byte_end":319901,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/ simplifies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":319902,"byte_end":319917,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":319948,"byte_end":319997,"line_start":33,"line_end":33,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1010},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321182,"byte_end":321190,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"LazyJust","qualname":"::strategy::just::LazyJust","value":"LazyJust {  }","parent":null,"children":[{"krate":0,"index":1013}],"decl_id":null,"docs":" A `Strategy` which always produces a single value value and never\n simplifies. If `T` is `Clone`, you should use `Just` instead.","sig":null,"attributes":[{"value":"/ A `Strategy` which always produces a single value value and never","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320613,"byte_end":320682,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/ simplifies. If `T` is `Clone`, you should use `Just` instead.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320683,"byte_end":320748,"line_start":61,"line_end":61,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320749,"byte_end":320752,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ This is a generalization of `Just` and works by calling","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320753,"byte_end":320812,"line_start":63,"line_end":63,"column_start":1,"column_end":60}},{"value":"/ the provided `Fn () -> T` in `.current()` every time. This is not a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320813,"byte_end":320884,"line_start":64,"line_end":64,"column_start":1,"column_end":72}},{"value":"/ very interesting strategy, but is required in cases where `T` is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320885,"byte_end":320953,"line_start":65,"line_end":65,"column_start":1,"column_end":69}},{"value":"/ not `Clone`. It is also used in `proptest_derive` where we can't","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320954,"byte_end":321022,"line_start":66,"line_end":66,"column_start":1,"column_end":69}},{"value":"/ assume that your type is `Clone`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321023,"byte_end":321060,"line_start":67,"line_end":67,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321061,"byte_end":321064,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ **It is important that the function used be pure.**","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321065,"byte_end":321120,"line_start":69,"line_end":69,"column_start":1,"column_end":56}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321121,"byte_end":321170,"line_start":70,"line_end":70,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1014},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321331,"byte_end":321341,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"name":"LazyJustFn","qualname":"::strategy::just::LazyJustFn","value":"LazyJust<V, fn() -> V>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `LazyJust<T, fn () -> T>`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `LazyJust<T, fn () -> T>`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321277,"byte_end":321321,"line_start":76,"line_end":76,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321591,"byte_end":321594,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<LazyJust<T, F>>::new","value":"fn (function: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `LazyJust` strategy given the function/closure\n that produces the value.","sig":null,"attributes":[{"value":"/ Constructs a `LazyJust` strategy given the function/closure","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321415,"byte_end":321478,"line_start":80,"line_end":80,"column_start":5,"column_end":68}},{"value":"/ that produces the value.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321483,"byte_end":321511,"line_start":81,"line_end":81,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321516,"byte_end":321519,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ **It is important that the function used be pure.**","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321524,"byte_end":321579,"line_start":83,"line_end":83,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1058},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":323796,"byte_end":323809,"line_start":21,"line_end":21,"column_start":12,"column_end":25},"name":"LazyValueTree","qualname":"::strategy::lazy::LazyValueTree","value":"LazyValueTree {  }","parent":null,"children":[{"krate":0,"index":1060}],"decl_id":null,"docs":" Represents a value tree that is initialized on the first call to any\n methods.","sig":null,"attributes":[{"value":"/ Represents a value tree that is initialized on the first call to any","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":323542,"byte_end":323614,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ methods.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":323615,"byte_end":323627,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":323628,"byte_end":323631,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This is used to defer potentially expensive generation to shrinking time. It","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":323632,"byte_end":323712,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ is public only to allow APIs to expose it as an intermediate value.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":323713,"byte_end":323784,"line_start":20,"line_end":20,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1099},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":329214,"byte_end":329217,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"Map","qualname":"::strategy::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":1102},{"krate":0,"index":1103}],"decl_id":null,"docs":" `Strategy` and `ValueTree` map adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` map adaptor.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":329073,"byte_end":329116,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":329117,"byte_end":329120,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_map()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":329121,"byte_end":329152,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":329153,"byte_end":329202,"line_start":24,"line_end":24,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1128},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":330812,"byte_end":330819,"line_start":89,"line_end":89,"column_start":12,"column_end":19},"name":"MapInto","qualname":"::strategy::map::MapInto","value":"MapInto {  }","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1132}],"decl_id":null,"docs":" `Strategy` and `ValueTree` map into adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` map into adaptor.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":330661,"byte_end":330709,"line_start":85,"line_end":85,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":330710,"byte_end":330713,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_map_into()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":330714,"byte_end":330750,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":330751,"byte_end":330800,"line_start":88,"line_end":88,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1158},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":332429,"byte_end":332436,"line_start":158,"line_end":158,"column_start":12,"column_end":19},"name":"Perturb","qualname":"::strategy::map::Perturb","value":"Perturb {  }","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1162}],"decl_id":null,"docs":" `Strategy` perturbation adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` perturbation adaptor.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":332291,"byte_end":332327,"line_start":154,"line_end":154,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":332328,"byte_end":332331,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_perturb()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":332332,"byte_end":332367,"line_start":156,"line_end":156,"column_start":1,"column_end":36}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":332368,"byte_end":332417,"line_start":157,"line_end":157,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1179},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":333479,"byte_end":333495,"line_start":201,"line_end":201,"column_start":12,"column_end":28},"name":"PerturbValueTree","qualname":"::strategy::map::PerturbValueTree","value":"PerturbValueTree {  }","parent":null,"children":[{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184}],"decl_id":null,"docs":" `ValueTree` perturbation adaptor.","sig":null,"attributes":[{"value":"/ `ValueTree` perturbation adaptor.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":333390,"byte_end":333427,"line_start":198,"line_end":198,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":333428,"byte_end":333431,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_perturb()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":333432,"byte_end":333467,"line_start":200,"line_end":200,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1210},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/recursive.rs","byte_start":336579,"byte_end":336588,"line_start":18,"line_end":18,"column_start":12,"column_end":21},"name":"Recursive","qualname":"::strategy::recursive::Recursive","value":"Recursive {  }","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217}],"decl_id":null,"docs":" Return type from `Strategy::prop_recursive()`.\n","sig":null,"attributes":[{"value":"/ Return type from `Strategy::prop_recursive()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/recursive.rs","byte_start":336467,"byte_end":336517,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/recursive.rs","byte_start":336518,"byte_end":336567,"line_start":17,"line_end":17,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6648},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":343824,"byte_end":343831,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"Shuffle","qualname":"::strategy::shuffle::Shuffle","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Strategy` shuffle adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` shuffle adaptor.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":343667,"byte_end":343698,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":343699,"byte_end":343702,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_shuffle()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":343703,"byte_end":343738,"line_start":20,"line_end":20,"column_start":1,"column_end":36}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":343763,"byte_end":343812,"line_start":22,"line_end":22,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":1248},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":344099,"byte_end":344110,"line_start":30,"line_end":30,"column_start":11,"column_end":22},"name":"Shuffleable","qualname":"::strategy::shuffle::Shuffleable","value":"Shuffleable","parent":null,"children":[{"krate":0,"index":1249},{"krate":0,"index":1250}],"decl_id":null,"docs":" A value which can be used with the `prop_shuffle` combinator.","sig":null,"attributes":[{"value":"/ A value which can be used with the `prop_shuffle` combinator.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":343851,"byte_end":343916,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":343917,"byte_end":343920,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This is not a general-purpose trait. Its methods are prefixed with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":343921,"byte_end":343991,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `shuffle_` to avoid the compiler suggesting them or this trait as","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":343992,"byte_end":344061,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ corrections in errors.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":344062,"byte_end":344088,"line_start":29,"line_end":29,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":344166,"byte_end":344177,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"shuffle_len","qualname":"::strategy::shuffle::Shuffleable::shuffle_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":1248},"children":[],"decl_id":null,"docs":" Return the length of this collection.\n","sig":null,"attributes":[{"value":"/ Return the length of this collection.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":344117,"byte_end":344158,"line_start":31,"line_end":31,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":344250,"byte_end":344262,"line_start":34,"line_end":34,"column_start":8,"column_end":20},"name":"shuffle_swap","qualname":"::strategy::shuffle::Shuffleable::shuffle_swap","value":"fn (&mut self, a: usize, b: usize) -> ()","parent":{"krate":0,"index":1248},"children":[],"decl_id":null,"docs":" Swap the elements at the given indices.\n","sig":null,"attributes":[{"value":"/ Swap the elements at the given indices.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":344199,"byte_end":344242,"line_start":33,"line_end":33,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":6835},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":346112,"byte_end":346128,"line_start":113,"line_end":113,"column_start":12,"column_end":28},"name":"ShuffleValueTree","qualname":"::strategy::shuffle::ShuffleValueTree","value":"ShuffleValueTree {  }","parent":null,"children":[{"krate":0,"index":6837},{"krate":0,"index":6838},{"krate":0,"index":6839},{"krate":0,"index":6840}],"decl_id":null,"docs":" `ValueTree` shuffling adaptor.","sig":null,"attributes":[{"value":"/ `ValueTree` shuffling adaptor.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":346002,"byte_end":346036,"line_start":109,"line_end":109,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":346037,"byte_end":346040,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_shuffle()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":346041,"byte_end":346076,"line_start":111,"line_end":111,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1277},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352531,"byte_end":352538,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"NewTree","qualname":"::strategy::traits::NewTree","value":"Result<<S as Strategy>::Tree, Reason>","parent":null,"children":[],"decl_id":null,"docs":" A new [`ValueTree`] from a [`Strategy`] when [`Ok`] or otherwise [`Err`]\n when a new value-tree can not be produced for some reason such as\n in the case of filtering with a predicate which always returns false.\n You should pass in your strategy as the type parameter.","sig":null,"attributes":[{"value":"/ A new [`ValueTree`] from a [`Strategy`] when [`Ok`] or otherwise [`Err`]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":351987,"byte_end":352063,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ when a new value-tree can not be produced for some reason such as","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352064,"byte_end":352133,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/ in the case of filtering with a predicate which always returns false.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352134,"byte_end":352207,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ You should pass in your strategy as the type parameter.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352208,"byte_end":352267,"line_start":23,"line_end":23,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352268,"byte_end":352271,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: trait.Strategy.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352272,"byte_end":352309,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/ [`ValueTree`]: trait.ValueTree.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352310,"byte_end":352349,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/ [`Ok`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#variant.Ok","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352350,"byte_end":352434,"line_start":27,"line_end":27,"column_start":1,"column_end":85}},{"value":"/ [`Err`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#variant.Err","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352435,"byte_end":352521,"line_start":28,"line_end":28,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":1279},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352881,"byte_end":352889,"line_start":37,"line_end":37,"column_start":11,"column_end":19},"name":"Strategy","qualname":"::strategy::traits::Strategy","value":"Strategy: fmt::Debug","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1291},{"krate":0,"index":1294},{"krate":0,"index":1297},{"krate":0,"index":1300},{"krate":0,"index":1303},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314}],"decl_id":null,"docs":" A strategy for producing arbitrary values of a given type.","sig":null,"attributes":[{"value":"/ A strategy for producing arbitrary values of a given type.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352584,"byte_end":352646,"line_start":31,"line_end":31,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352647,"byte_end":352650,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `fmt::Debug` is a hard requirement for all strategies currently due to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352651,"byte_end":352725,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/ `prop_flat_map()`. This constraint will be removed when specialisation","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352726,"byte_end":352800,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ becomes stable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352801,"byte_end":352820,"line_start":35,"line_end":35,"column_start":1,"column_end":20}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352821,"byte_end":352870,"line_start":36,"line_end":36,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1280},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352966,"byte_end":352970,"line_start":39,"line_end":39,"column_start":10,"column_end":14},"name":"Tree","qualname":"::strategy::traits::Strategy::Tree","value":"type Tree: ValueTree<Value = Self::Value>;","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" The value tree generated by this `Strategy`.\n","sig":null,"attributes":[{"value":"/ The value tree generated by this `Strategy`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352908,"byte_end":352956,"line_start":38,"line_end":38,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":1281},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353318,"byte_end":353323,"line_start":46,"line_end":46,"column_start":10,"column_end":15},"name":"Value","qualname":"::strategy::traits::Strategy::Value","value":"type Value: fmt::Debug;","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" The type of value used by functions under test generated by this Strategy.","sig":null,"attributes":[{"value":"/ The type of value used by functions under test generated by this Strategy.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353009,"byte_end":353087,"line_start":41,"line_end":41,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353092,"byte_end":353095,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the same type as the associated type `Value`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353100,"byte_end":353168,"line_start":43,"line_end":43,"column_start":5,"column_end":73}},{"value":"/ in `Self::Tree`. It is provided here to simplify usage particularly","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353173,"byte_end":353244,"line_start":44,"line_end":44,"column_start":5,"column_end":76}},{"value":"/ in conjunction with `-> impl Strategy<Value = MyType>`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353249,"byte_end":353308,"line_start":45,"line_end":45,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354041,"byte_end":354049,"line_start":60,"line_end":60,"column_start":8,"column_end":16},"name":"new_tree","qualname":"::strategy::traits::Strategy::new_tree","value":"fn (&self, runner: &mut TestRunner) -> NewTree<Self>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Generate a new value tree from the given runner.","sig":null,"attributes":[{"value":"/ Generate a new value tree from the given runner.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353342,"byte_end":353394,"line_start":48,"line_end":48,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353399,"byte_end":353402,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ This may fail if there are constraints on the generated value and the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353407,"byte_end":353480,"line_start":50,"line_end":50,"column_start":5,"column_end":78}},{"value":"/ generator is unable to produce anything that satisfies them. Any","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353485,"byte_end":353553,"line_start":51,"line_end":51,"column_start":5,"column_end":73}},{"value":"/ failure is wrapped in `TestError::Abort`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353558,"byte_end":353603,"line_start":52,"line_end":52,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353608,"byte_end":353611,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ This method is generally expected to be deterministic. That is, given a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353616,"byte_end":353691,"line_start":54,"line_end":54,"column_start":5,"column_end":80}},{"value":"/ `TestRunner` with its RNG in a particular state, this should produce an","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353696,"byte_end":353771,"line_start":55,"line_end":55,"column_start":5,"column_end":80}},{"value":"/ identical `ValueTree` every time. Non-deterministic strategies do not","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353776,"byte_end":353849,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ cause problems during normal operation, but they do break failure","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353854,"byte_end":353923,"line_start":57,"line_end":57,"column_start":5,"column_end":74}},{"value":"/ persistence since it is implemented by simply saving the seed used to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":353928,"byte_end":354001,"line_start":58,"line_end":58,"column_start":5,"column_end":78}},{"value":"/ generate the test case.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354006,"byte_end":354033,"line_start":59,"line_end":59,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354744,"byte_end":354752,"line_start":74,"line_end":74,"column_start":8,"column_end":16},"name":"prop_map","qualname":"::strategy::traits::Strategy::prop_map","value":"fn <O, F> (self, fun: F) -> Map<Self, F>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Returns a strategy which produces values transformed by the function\n `fun`.","sig":null,"attributes":[{"value":"/ Returns a strategy which produces values transformed by the function","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354105,"byte_end":354177,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"/ `fun`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354182,"byte_end":354192,"line_start":63,"line_end":63,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354197,"byte_end":354200,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ There is no need (or possibility, for that matter) to define how the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354205,"byte_end":354277,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/ output is to be shrunken. Shrinking continues to take place in terms of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354282,"byte_end":354357,"line_start":66,"line_end":66,"column_start":5,"column_end":80}},{"value":"/ the source value.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354362,"byte_end":354383,"line_start":67,"line_end":67,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354388,"byte_end":354391,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ `fun` should be a deterministic function. That is, for a given input","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354396,"byte_end":354468,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ value, it should produce an equivalent output value on every call.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354473,"byte_end":354543,"line_start":70,"line_end":70,"column_start":5,"column_end":75}},{"value":"/ Proptest assumes that it can call the function as many times as needed","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354548,"byte_end":354622,"line_start":71,"line_end":71,"column_start":5,"column_end":79}},{"value":"/ to generate as many identical values as needed. For this reason, `F` is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354627,"byte_end":354702,"line_start":72,"line_end":72,"column_start":5,"column_end":80}},{"value":"/ `Fn` rather than `FnMut`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354707,"byte_end":354736,"line_start":73,"line_end":73,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355434,"byte_end":355447,"line_start":96,"line_end":96,"column_start":8,"column_end":21},"name":"prop_map_into","qualname":"::strategy::traits::Strategy::prop_map_into","value":"fn <O> (self) -> MapInto<Self, O>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Returns a strategy which produces values of type `O` by transforming\n `Self` with `Into<O>`.","sig":null,"attributes":[{"value":"/ Returns a strategy which produces values of type `O` by transforming","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":354976,"byte_end":355048,"line_start":87,"line_end":87,"column_start":5,"column_end":77}},{"value":"/ `Self` with `Into<O>`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355053,"byte_end":355079,"line_start":88,"line_end":88,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355084,"byte_end":355087,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You should always prefer this operation instead of `prop_map` when","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355092,"byte_end":355162,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/ you can as it is both clearer and also currently more efficient.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355167,"byte_end":355235,"line_start":91,"line_end":91,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355240,"byte_end":355243,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ There is no need (or possibility, for that matter) to define how the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355248,"byte_end":355320,"line_start":93,"line_end":93,"column_start":5,"column_end":77}},{"value":"/ output is to be shrunken. Shrinking continues to take place in terms of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355325,"byte_end":355400,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/ the source value.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355405,"byte_end":355426,"line_start":95,"line_end":95,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356963,"byte_end":356975,"line_start":137,"line_end":137,"column_start":8,"column_end":20},"name":"prop_perturb","qualname":"::strategy::traits::Strategy::prop_perturb","value":"fn <O, F> (self, fun: F) -> Perturb<Self, F>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Returns a strategy which produces values transformed by the function\n `fun`, which is additionally given a random number generator.","sig":null,"attributes":[{"value":"/ Returns a strategy which produces values transformed by the function","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355594,"byte_end":355666,"line_start":104,"line_end":104,"column_start":5,"column_end":77}},{"value":"/ `fun`, which is additionally given a random number generator.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355671,"byte_end":355736,"line_start":105,"line_end":105,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355741,"byte_end":355744,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This is exactly like `prop_map()` except for the addition of the second","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355749,"byte_end":355824,"line_start":107,"line_end":107,"column_start":5,"column_end":80}},{"value":"/ argument to the function. This allows introducing chaotic variations to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355829,"byte_end":355904,"line_start":108,"line_end":108,"column_start":5,"column_end":80}},{"value":"/ generated values that are not easily expressed otherwise while allowing","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355909,"byte_end":355984,"line_start":109,"line_end":109,"column_start":5,"column_end":80}},{"value":"/ shrinking to proceed reasonably.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":355989,"byte_end":356025,"line_start":110,"line_end":110,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356030,"byte_end":356033,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ During shrinking, `fun` is always called with an identical random","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356038,"byte_end":356107,"line_start":112,"line_end":112,"column_start":5,"column_end":74}},{"value":"/ number generator, so if it is a pure function it will always perform","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356112,"byte_end":356184,"line_start":113,"line_end":113,"column_start":5,"column_end":77}},{"value":"/ the same perturbation.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356189,"byte_end":356215,"line_start":114,"line_end":114,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356220,"byte_end":356223,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356228,"byte_end":356242,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356247,"byte_end":356250,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356255,"byte_end":356262,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ // The prelude also gets us the `Rng` trait.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356267,"byte_end":356315,"line_start":119,"line_end":119,"column_start":5,"column_end":53}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356320,"byte_end":356349,"line_start":120,"line_end":120,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356354,"byte_end":356357,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ proptest! {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356362,"byte_end":356377,"line_start":122,"line_end":122,"column_start":5,"column_end":20}},{"value":"/   #[test]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356382,"byte_end":356395,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/   fn test_something(a in (0i32..10).prop_perturb(","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356400,"byte_end":356453,"line_start":124,"line_end":124,"column_start":5,"column_end":58}},{"value":"/       // Perturb the integer `a` (range 0..10) to a pair of that","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356458,"byte_end":356526,"line_start":125,"line_end":125,"column_start":5,"column_end":73}},{"value":"/       // integer and another that's ± 10 of it.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356531,"byte_end":356583,"line_start":126,"line_end":126,"column_start":5,"column_end":56}},{"value":"/       // Note that this particular case would be better implemented as","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356588,"byte_end":356662,"line_start":127,"line_end":127,"column_start":5,"column_end":79}},{"value":"/       // `(0i32..10, -10i32..10).prop_map(|(a, b)| (a, a + b))`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356667,"byte_end":356734,"line_start":128,"line_end":128,"column_start":5,"column_end":72}},{"value":"/       // but is shown here for simplicity.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356739,"byte_end":356785,"line_start":129,"line_end":129,"column_start":5,"column_end":51}},{"value":"/       |centre, rng| (centre, centre + rng.gen_range(-10, 10))))","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356790,"byte_end":356857,"line_start":130,"line_end":130,"column_start":5,"column_end":72}},{"value":"/   {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356862,"byte_end":356869,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"/       // Test stuff","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356874,"byte_end":356897,"line_start":132,"line_end":132,"column_start":5,"column_end":28}},{"value":"/   }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356902,"byte_end":356909,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356914,"byte_end":356919,"line_start":134,"line_end":134,"column_start":5,"column_end":10}},{"value":"/ # fn main() { }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356924,"byte_end":356943,"line_start":135,"line_end":135,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":356948,"byte_end":356955,"line_start":136,"line_end":136,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361286,"byte_end":361299,"line_start":238,"line_end":238,"column_start":8,"column_end":21},"name":"prop_flat_map","qualname":"::strategy::traits::Strategy::prop_flat_map","value":"fn <S, F> (self, fun: F) -> Flatten<Map<Self, F>>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Maps values produced by this strategy into new strategies and picks\n values from those strategies.","sig":null,"attributes":[{"value":"/ Maps values produced by this strategy into new strategies and picks","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357216,"byte_end":357287,"line_start":150,"line_end":150,"column_start":5,"column_end":76}},{"value":"/ values from those strategies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357292,"byte_end":357325,"line_start":151,"line_end":151,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357330,"byte_end":357333,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ `fun` is used to transform the values produced by this strategy into","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357338,"byte_end":357410,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ other strategies. Values are then chosen from the derived strategies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357415,"byte_end":357488,"line_start":154,"line_end":154,"column_start":5,"column_end":78}},{"value":"/ Shrinking proceeds by shrinking individual values as well as shrinking","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357493,"byte_end":357567,"line_start":155,"line_end":155,"column_start":5,"column_end":79}},{"value":"/ the input used to generate the internal strategies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357572,"byte_end":357627,"line_start":156,"line_end":156,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357632,"byte_end":357635,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ## Shrinking","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357640,"byte_end":357656,"line_start":158,"line_end":158,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357661,"byte_end":357664,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ In the case of test failure, shrinking will not only shrink the output","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357669,"byte_end":357743,"line_start":160,"line_end":160,"column_start":5,"column_end":79}},{"value":"/ from the combinator itself, but also the input, i.e., the strategy used","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357748,"byte_end":357823,"line_start":161,"line_end":161,"column_start":5,"column_end":80}},{"value":"/ to generate the output itself. Doing this requires searching the new","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357828,"byte_end":357900,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/ derived strategy for a new failing input. The combinator will generate","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357905,"byte_end":357979,"line_start":163,"line_end":163,"column_start":5,"column_end":79}},{"value":"/ up to `Config::cases` values for this search.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":357984,"byte_end":358033,"line_start":164,"line_end":164,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358038,"byte_end":358041,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ As a result, nested `prop_flat_map`/`Flatten` combinators risk","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358046,"byte_end":358112,"line_start":166,"line_end":166,"column_start":5,"column_end":71}},{"value":"/ exponential run time on this search for new failing values. To ensure","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358117,"byte_end":358190,"line_start":167,"line_end":167,"column_start":5,"column_end":78}},{"value":"/ that test failures occur within a reasonable amount of time, all of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358195,"byte_end":358266,"line_start":168,"line_end":168,"column_start":5,"column_end":76}},{"value":"/ these combinators share a single \"flat map regen\" counter, and will","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358271,"byte_end":358342,"line_start":169,"line_end":169,"column_start":5,"column_end":76}},{"value":"/ stop generating new values if it exceeds `Config::max_flat_map_regens`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358347,"byte_end":358422,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358427,"byte_end":358430,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358435,"byte_end":358449,"line_start":172,"line_end":172,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358454,"byte_end":358457,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Generate two integers, where the second is always less than the first,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358462,"byte_end":358536,"line_start":174,"line_end":174,"column_start":5,"column_end":79}},{"value":"/ without using filtering:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358541,"byte_end":358569,"line_start":175,"line_end":175,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358574,"byte_end":358577,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358582,"byte_end":358589,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358594,"byte_end":358623,"line_start":178,"line_end":178,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358628,"byte_end":358631,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ proptest! {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358636,"byte_end":358651,"line_start":180,"line_end":180,"column_start":5,"column_end":20}},{"value":"/   # /*","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358656,"byte_end":358666,"line_start":181,"line_end":181,"column_start":5,"column_end":15}},{"value":"/   #[test]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358671,"byte_end":358684,"line_start":182,"line_end":182,"column_start":5,"column_end":18}},{"value":"/   # */","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358689,"byte_end":358699,"line_start":183,"line_end":183,"column_start":5,"column_end":15}},{"value":"/   fn test_two(","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358704,"byte_end":358722,"line_start":184,"line_end":184,"column_start":5,"column_end":23}},{"value":"/     // Pick integers in the 1..65536 range, and derive a strategy","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358727,"byte_end":358796,"line_start":185,"line_end":185,"column_start":5,"column_end":74}},{"value":"/     // which emits a tuple of that integer and another one which is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358801,"byte_end":358872,"line_start":186,"line_end":186,"column_start":5,"column_end":76}},{"value":"/     // some value less than it.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358877,"byte_end":358912,"line_start":187,"line_end":187,"column_start":5,"column_end":40}},{"value":"/     (a, b) in (1..65536).prop_flat_map(|a| (Just(a), 0..a))","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358917,"byte_end":358980,"line_start":188,"line_end":188,"column_start":5,"column_end":68}},{"value":"/   ) {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358985,"byte_end":358994,"line_start":189,"line_end":189,"column_start":5,"column_end":14}},{"value":"/     prop_assert!(b < a);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":358999,"byte_end":359027,"line_start":190,"line_end":190,"column_start":5,"column_end":33}},{"value":"/   }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359032,"byte_end":359039,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359044,"byte_end":359049,"line_start":192,"line_end":192,"column_start":5,"column_end":10}},{"value":"/ #","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359054,"byte_end":359059,"line_start":193,"line_end":193,"column_start":5,"column_end":10}},{"value":"/ # fn main() { test_two(); }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359064,"byte_end":359095,"line_start":194,"line_end":194,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359100,"byte_end":359107,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359112,"byte_end":359115,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ## Choosing the right flat-map","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359120,"byte_end":359154,"line_start":197,"line_end":197,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359159,"byte_end":359162,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ `Strategy` has three \"flat-map\" combinators. They look very similar at","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359167,"byte_end":359241,"line_start":199,"line_end":199,"column_start":5,"column_end":79}},{"value":"/ first, and can be used to produce superficially identical test results.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359246,"byte_end":359321,"line_start":200,"line_end":200,"column_start":5,"column_end":80}},{"value":"/ For example, the following three expressions all produce inputs which","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359326,"byte_end":359399,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"/ are 2-tuples `(a,b)` where the `b` component is less than `a`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359404,"byte_end":359470,"line_start":202,"line_end":202,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359475,"byte_end":359478,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359483,"byte_end":359496,"line_start":204,"line_end":204,"column_start":5,"column_end":18}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359501,"byte_end":359534,"line_start":205,"line_end":205,"column_start":5,"column_end":38}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359539,"byte_end":359568,"line_start":206,"line_end":206,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359573,"byte_end":359576,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ let flat_map = (1..10).prop_flat_map(|a| (Just(a), 0..a));","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359581,"byte_end":359643,"line_start":208,"line_end":208,"column_start":5,"column_end":67}},{"value":"/ let ind_flat_map = (1..10).prop_ind_flat_map(|a| (Just(a), 0..a));","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359648,"byte_end":359718,"line_start":209,"line_end":209,"column_start":5,"column_end":75}},{"value":"/ let ind_flat_map2 = (1..10).prop_ind_flat_map2(|a| 0..a);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359723,"byte_end":359784,"line_start":210,"line_end":210,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359789,"byte_end":359796,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359801,"byte_end":359804,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The three do differ however in terms of how they shrink.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359809,"byte_end":359869,"line_start":213,"line_end":213,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359874,"byte_end":359877,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ For `flat_map`, both `a` and `b` will shrink, and the invariant that","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359882,"byte_end":359954,"line_start":215,"line_end":215,"column_start":5,"column_end":77}},{"value":"/ `b < a` is maintained. This is a \"dependent\" or \"higher-order\" strategy","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":359959,"byte_end":360034,"line_start":216,"line_end":216,"column_start":5,"column_end":80}},{"value":"/ in that it remembers that the strategy for choosing `b` is dependent on","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360039,"byte_end":360114,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/ the value chosen for `a`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360119,"byte_end":360148,"line_start":218,"line_end":218,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360153,"byte_end":360156,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ For `ind_flat_map`, the invariant `b < a` is maintained, but only","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360161,"byte_end":360230,"line_start":220,"line_end":220,"column_start":5,"column_end":74}},{"value":"/ because `a` does not shrink. This is due to the fact that the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360235,"byte_end":360300,"line_start":221,"line_end":221,"column_start":5,"column_end":70}},{"value":"/ dependency between the strategies is not tracked; `a` is simply seen as","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360305,"byte_end":360380,"line_start":222,"line_end":222,"column_start":5,"column_end":80}},{"value":"/ a constant.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360385,"byte_end":360400,"line_start":223,"line_end":223,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360405,"byte_end":360408,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Finally, for `ind_flat_map2`, the invariant `b < a` is _not_","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360413,"byte_end":360477,"line_start":225,"line_end":225,"column_start":5,"column_end":69}},{"value":"/ maintained, because `a` can shrink independently of `b`, again because","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360482,"byte_end":360556,"line_start":226,"line_end":226,"column_start":5,"column_end":79}},{"value":"/ the dependency between the two variables is not tracked, but in this","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360561,"byte_end":360633,"line_start":227,"line_end":227,"column_start":5,"column_end":77}},{"value":"/ case the derivation of `a` is still exposed to the shrinking system.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360638,"byte_end":360710,"line_start":228,"line_end":228,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360715,"byte_end":360718,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ The use-cases for the independent flat-map variants is pretty narrow.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360723,"byte_end":360796,"line_start":230,"line_end":230,"column_start":5,"column_end":78}},{"value":"/ For the majority of cases where invariants need to be maintained and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360801,"byte_end":360873,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ you want all components to shrink, `prop_flat_map` is the way to go.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360878,"byte_end":360950,"line_start":232,"line_end":232,"column_start":5,"column_end":77}},{"value":"/ `prop_ind_flat_map` makes the most sense when the input to the map","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":360955,"byte_end":361025,"line_start":233,"line_end":233,"column_start":5,"column_end":75}},{"value":"/ function is not exposed in the output and shrinking across strategies","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361030,"byte_end":361103,"line_start":234,"line_end":234,"column_start":5,"column_end":78}},{"value":"/ is not expected to be useful. `prop_ind_flat_map2` is useful for using","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361108,"byte_end":361182,"line_start":235,"line_end":235,"column_start":5,"column_end":79}},{"value":"/ related values as starting points while not constraining them to that","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361187,"byte_end":361260,"line_start":236,"line_end":236,"column_start":5,"column_end":78}},{"value":"/ relation.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361265,"byte_end":361278,"line_start":237,"line_end":237,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":362174,"byte_end":362191,"line_start":264,"line_end":264,"column_start":8,"column_end":25},"name":"prop_ind_flat_map","qualname":"::strategy::traits::Strategy::prop_ind_flat_map","value":"fn <S, F> (self, fun: F) -> IndFlatten<Map<Self, F>>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Maps values produced by this strategy into new strategies and picks\n values from those strategies while considering the new strategies to be\n independent.","sig":null,"attributes":[{"value":"/ Maps values produced by this strategy into new strategies and picks","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361544,"byte_end":361615,"line_start":251,"line_end":251,"column_start":5,"column_end":76}},{"value":"/ values from those strategies while considering the new strategies to be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361620,"byte_end":361695,"line_start":252,"line_end":252,"column_start":5,"column_end":80}},{"value":"/ independent.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361700,"byte_end":361716,"line_start":253,"line_end":253,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361721,"byte_end":361724,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This is very similar to `prop_flat_map()`, but shrinking will *not*","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361729,"byte_end":361800,"line_start":255,"line_end":255,"column_start":5,"column_end":76}},{"value":"/ attempt to shrink the input that produces the derived strategies. This","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361805,"byte_end":361879,"line_start":256,"line_end":256,"column_start":5,"column_end":79}},{"value":"/ is appropriate for when the derived strategies already fully shrink in","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361884,"byte_end":361958,"line_start":257,"line_end":257,"column_start":5,"column_end":79}},{"value":"/ the desired way.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361963,"byte_end":361983,"line_start":258,"line_end":258,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361988,"byte_end":361991,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ In most cases, you want `prop_flat_map()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":361996,"byte_end":362042,"line_start":260,"line_end":260,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":362047,"byte_end":362050,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ See `prop_flat_map()` for a more detailed explanation on how the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":362055,"byte_end":362123,"line_start":262,"line_end":262,"column_start":5,"column_end":73}},{"value":"/ three flat-map combinators differ.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":362128,"byte_end":362166,"line_start":263,"line_end":263,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":362726,"byte_end":362744,"line_start":282,"line_end":282,"column_start":8,"column_end":26},"name":"prop_ind_flat_map2","qualname":"::strategy::traits::Strategy::prop_ind_flat_map2","value":"fn <S, F> (self, fun: F) -> IndFlattenMap<Self, F>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input\n generated from `self` in slot 0 and the derived strategy in slot 1.","sig":null,"attributes":[{"value":"/ Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":362437,"byte_end":362511,"line_start":277,"line_end":277,"column_start":5,"column_end":79}},{"value":"/ generated from `self` in slot 0 and the derived strategy in slot 1.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":362516,"byte_end":362587,"line_start":278,"line_end":278,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":362592,"byte_end":362595,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ See `prop_flat_map()` for a more detailed explanation on how the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":362600,"byte_end":362668,"line_start":280,"line_end":280,"column_start":5,"column_end":73}},{"value":"/ three flat-map combinators differ differ.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":362673,"byte_end":362718,"line_start":281,"line_end":281,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364117,"byte_end":364128,"line_start":315,"line_end":315,"column_start":8,"column_end":19},"name":"prop_filter","qualname":"::strategy::traits::Strategy::prop_filter","value":"fn <R, F> (self, whence: R, fun: F) -> Filter<Self, F>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Returns a strategy which only produces values accepted by `fun`.","sig":null,"attributes":[{"value":"/ Returns a strategy which only produces values accepted by `fun`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":362986,"byte_end":363054,"line_start":295,"line_end":295,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363059,"byte_end":363062,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ This results in a very naïve form of rejection sampling and should only","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363067,"byte_end":363143,"line_start":297,"line_end":297,"column_start":5,"column_end":80}},{"value":"/ be used if (a) relatively few values will actually be rejected; (b) it","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363148,"byte_end":363222,"line_start":298,"line_end":298,"column_start":5,"column_end":79}},{"value":"/ isn't easy to express what you want by using another strategy and/or","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363227,"byte_end":363299,"line_start":299,"line_end":299,"column_start":5,"column_end":77}},{"value":"/ `map()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363304,"byte_end":363316,"line_start":300,"line_end":300,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363321,"byte_end":363324,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ There are a lot of downsides to this form of filtering. It slows","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363329,"byte_end":363397,"line_start":302,"line_end":302,"column_start":5,"column_end":73}},{"value":"/ testing down, since values must be generated but then discarded.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363402,"byte_end":363470,"line_start":303,"line_end":303,"column_start":5,"column_end":73}},{"value":"/ Proptest only allows a limited number of rejects this way (across the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363475,"byte_end":363548,"line_start":304,"line_end":304,"column_start":5,"column_end":78}},{"value":"/ entire `TestRunner`). Rejection can interfere with shrinking;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363553,"byte_end":363618,"line_start":305,"line_end":305,"column_start":5,"column_end":70}},{"value":"/ particularly, complex filters may largely or entirely prevent shrinking","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363623,"byte_end":363698,"line_start":306,"line_end":306,"column_start":5,"column_end":80}},{"value":"/ from substantially altering the original value.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363703,"byte_end":363754,"line_start":307,"line_end":307,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363759,"byte_end":363762,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Local rejection sampling is still preferable to rejecting the entire","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363767,"byte_end":363839,"line_start":309,"line_end":309,"column_start":5,"column_end":77}},{"value":"/ input to a test (via `TestCaseError::Reject`), however, and the default","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363844,"byte_end":363919,"line_start":310,"line_end":310,"column_start":5,"column_end":80}},{"value":"/ number of local rejections allowed is much higher than the number of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":363924,"byte_end":363996,"line_start":311,"line_end":311,"column_start":5,"column_end":77}},{"value":"/ whole-input rejections.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364001,"byte_end":364028,"line_start":312,"line_end":312,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364033,"byte_end":364036,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ `whence` is used to record where and why the rejection occurred.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364041,"byte_end":364109,"line_start":314,"line_end":314,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365646,"byte_end":365661,"line_start":349,"line_end":349,"column_start":8,"column_end":23},"name":"prop_filter_map","qualname":"::strategy::traits::Strategy::prop_filter_map","value":"fn <F, O> (self, whence: impl Into<Reason>, fun: F) -> FilterMap<Self, F>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Returns a strategy which only produces transformed values where `fun`\n returns `Some(value)` and rejects those where `fun` returns `None`.","sig":null,"attributes":[{"value":"/ Returns a strategy which only produces transformed values where `fun`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364344,"byte_end":364417,"line_start":326,"line_end":326,"column_start":5,"column_end":78}},{"value":"/ returns `Some(value)` and rejects those where `fun` returns `None`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364422,"byte_end":364493,"line_start":327,"line_end":327,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364498,"byte_end":364501,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ Using this method is preferable to using `.prop_map(..).prop_filter(..)`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364506,"byte_end":364583,"line_start":329,"line_end":329,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364588,"byte_end":364591,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ This results in a very naïve form of rejection sampling and should only","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364596,"byte_end":364672,"line_start":331,"line_end":331,"column_start":5,"column_end":80}},{"value":"/ be used if (a) relatively few values will actually be rejected; (b) it","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364677,"byte_end":364751,"line_start":332,"line_end":332,"column_start":5,"column_end":79}},{"value":"/ isn't easy to express what you want by using another strategy and/or","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364756,"byte_end":364828,"line_start":333,"line_end":333,"column_start":5,"column_end":77}},{"value":"/ `map()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364833,"byte_end":364845,"line_start":334,"line_end":334,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364850,"byte_end":364853,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ There are a lot of downsides to this form of filtering. It slows","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364858,"byte_end":364926,"line_start":336,"line_end":336,"column_start":5,"column_end":73}},{"value":"/ testing down, since values must be generated but then discarded.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":364931,"byte_end":364999,"line_start":337,"line_end":337,"column_start":5,"column_end":73}},{"value":"/ Proptest only allows a limited number of rejects this way (across the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365004,"byte_end":365077,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"/ entire `TestRunner`). Rejection can interfere with shrinking;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365082,"byte_end":365147,"line_start":339,"line_end":339,"column_start":5,"column_end":70}},{"value":"/ particularly, complex filters may largely or entirely prevent shrinking","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365152,"byte_end":365227,"line_start":340,"line_end":340,"column_start":5,"column_end":80}},{"value":"/ from substantially altering the original value.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365232,"byte_end":365283,"line_start":341,"line_end":341,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365288,"byte_end":365291,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Local rejection sampling is still preferable to rejecting the entire","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365296,"byte_end":365368,"line_start":343,"line_end":343,"column_start":5,"column_end":77}},{"value":"/ input to a test (via `TestCaseError::Reject`), however, and the default","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365373,"byte_end":365448,"line_start":344,"line_end":344,"column_start":5,"column_end":80}},{"value":"/ number of local rejections allowed is much higher than the number of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365453,"byte_end":365525,"line_start":345,"line_end":345,"column_start":5,"column_end":77}},{"value":"/ whole-input rejections.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365530,"byte_end":365557,"line_start":346,"line_end":346,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365562,"byte_end":365565,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ `whence` is used to record where and why the rejection occurred.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365570,"byte_end":365638,"line_start":348,"line_end":348,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366689,"byte_end":366699,"line_start":374,"line_end":374,"column_start":8,"column_end":18},"name":"prop_union","qualname":"::strategy::traits::Strategy::prop_union","value":"fn (self, other: Self) -> Union<Self>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Returns a strategy which picks uniformly from `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns a strategy which picks uniformly from `self` and `other`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365901,"byte_end":365970,"line_start":360,"line_end":360,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365975,"byte_end":365978,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ When shrinking, if a value from `other` was originally chosen but that","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":365983,"byte_end":366057,"line_start":362,"line_end":362,"column_start":5,"column_end":79}},{"value":"/ value can be shrunken no further, it switches to a value from `self`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366062,"byte_end":366134,"line_start":363,"line_end":363,"column_start":5,"column_end":77}},{"value":"/ and starts shrinking that.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366139,"byte_end":366169,"line_start":364,"line_end":364,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366174,"byte_end":366177,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Be aware that chaining `prop_union` calls will result in a very","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366182,"byte_end":366249,"line_start":366,"line_end":366,"column_start":5,"column_end":72}},{"value":"/ right-skewed distribution. If this is not what you want, you can call","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366254,"byte_end":366327,"line_start":367,"line_end":367,"column_start":5,"column_end":78}},{"value":"/ the `.or()` method on the `Union` to add more values to the same union,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366332,"byte_end":366407,"line_start":368,"line_end":368,"column_start":5,"column_end":80}},{"value":"/ or directly call `Union::new()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366412,"byte_end":366448,"line_start":369,"line_end":369,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366453,"byte_end":366456,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ Both `self` and `other` must be of the same type. To combine","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366461,"byte_end":366525,"line_start":371,"line_end":371,"column_start":5,"column_end":69}},{"value":"/ heterogeneous strategies, call the `boxed()` method on both `self` and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366530,"byte_end":366604,"line_start":372,"line_end":372,"column_start":5,"column_end":79}},{"value":"/ `other` to erase the type differences before calling `prop_union()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366609,"byte_end":366681,"line_start":373,"line_end":373,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369568,"byte_end":369582,"line_start":448,"line_end":448,"column_start":8,"column_end":22},"name":"prop_recursive","qualname":"::strategy::traits::Strategy::prop_recursive","value":"fn <R, F> (self, depth: u32, desired_size: u32, expected_branch_size: u32, recurse: F) -> Recursive<Self::Value, F>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Generate a recursive structure with `self` items as leaves.","sig":null,"attributes":[{"value":"/ Generate a recursive structure with `self` items as leaves.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366820,"byte_end":366883,"line_start":381,"line_end":381,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366888,"byte_end":366891,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ `recurse` is applied to various strategies that produce the same type","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366896,"byte_end":366969,"line_start":383,"line_end":383,"column_start":5,"column_end":78}},{"value":"/ as `self` with nesting depth _n_ to create a strategy that produces the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":366974,"byte_end":367049,"line_start":384,"line_end":384,"column_start":5,"column_end":80}},{"value":"/ same type with nesting depth _n+1_. Generated structures will have a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367054,"byte_end":367126,"line_start":385,"line_end":385,"column_start":5,"column_end":77}},{"value":"/ depth between 0 and `depth` and will usually have up to `desired_size`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367131,"byte_end":367205,"line_start":386,"line_end":386,"column_start":5,"column_end":79}},{"value":"/ total elements, though they may have more. `expected_branch_size` gives","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367210,"byte_end":367285,"line_start":387,"line_end":387,"column_start":5,"column_end":80}},{"value":"/ the expected maximum size for any collection which may contain","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367290,"byte_end":367356,"line_start":388,"line_end":388,"column_start":5,"column_end":71}},{"value":"/ recursive elements and is used to control branch probability to achieve","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367361,"byte_end":367436,"line_start":389,"line_end":389,"column_start":5,"column_end":80}},{"value":"/ the desired size. Passing a too small value can result in trees vastly","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367441,"byte_end":367515,"line_start":390,"line_end":390,"column_start":5,"column_end":79}},{"value":"/ larger than desired.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367520,"byte_end":367544,"line_start":391,"line_end":391,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367549,"byte_end":367552,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ Note that `depth` only counts branches; i.e., `depth = 0` is a single","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367557,"byte_end":367630,"line_start":393,"line_end":393,"column_start":5,"column_end":78}},{"value":"/ leaf, and `depth = 1` is a leaf or a branch containing only leaves.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367635,"byte_end":367706,"line_start":394,"line_end":394,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367711,"byte_end":367714,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ In practise, generated values usually have a lower depth than `depth`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367719,"byte_end":367792,"line_start":396,"line_end":396,"column_start":5,"column_end":78}},{"value":"/ (but `depth` is a hard limit) and almost always under","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367797,"byte_end":367854,"line_start":397,"line_end":397,"column_start":5,"column_end":62}},{"value":"/ `expected_branch_size` (though it is not a hard limit) since the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367859,"byte_end":367927,"line_start":398,"line_end":398,"column_start":5,"column_end":73}},{"value":"/ underlying code underestimates probabilities.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367932,"byte_end":367981,"line_start":399,"line_end":399,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367986,"byte_end":367989,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ Shrinking shrinks both the inner values and attempts switching from","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":367994,"byte_end":368065,"line_start":401,"line_end":401,"column_start":5,"column_end":76}},{"value":"/ recursive to non-recursive cases.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368070,"byte_end":368107,"line_start":402,"line_end":402,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368112,"byte_end":368115,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368120,"byte_end":368134,"line_start":404,"line_end":404,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368139,"byte_end":368142,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368147,"byte_end":368165,"line_start":406,"line_end":406,"column_start":5,"column_end":23}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368170,"byte_end":368203,"line_start":407,"line_end":407,"column_start":5,"column_end":38}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368208,"byte_end":368242,"line_start":408,"line_end":408,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368247,"byte_end":368250,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368255,"byte_end":368284,"line_start":410,"line_end":410,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368289,"byte_end":368292,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ /// Define our own JSON AST type","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368297,"byte_end":368333,"line_start":412,"line_end":412,"column_start":5,"column_end":41}},{"value":"/ #[derive(Debug, Clone)]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368338,"byte_end":368365,"line_start":413,"line_end":413,"column_start":5,"column_end":32}},{"value":"/ enum JsonNode {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368370,"byte_end":368389,"line_start":414,"line_end":414,"column_start":5,"column_end":24}},{"value":"/   Null,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368394,"byte_end":368405,"line_start":415,"line_end":415,"column_start":5,"column_end":16}},{"value":"/   Bool(bool),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368410,"byte_end":368427,"line_start":416,"line_end":416,"column_start":5,"column_end":22}},{"value":"/   Number(f64),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368432,"byte_end":368450,"line_start":417,"line_end":417,"column_start":5,"column_end":23}},{"value":"/   String(String),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368455,"byte_end":368476,"line_start":418,"line_end":418,"column_start":5,"column_end":26}},{"value":"/   Array(Vec<JsonNode>),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368481,"byte_end":368508,"line_start":419,"line_end":419,"column_start":5,"column_end":32}},{"value":"/   Map(HashMap<String, JsonNode>),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368513,"byte_end":368550,"line_start":420,"line_end":420,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368555,"byte_end":368560,"line_start":421,"line_end":421,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368565,"byte_end":368568,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368573,"byte_end":368590,"line_start":423,"line_end":423,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368595,"byte_end":368600,"line_start":424,"line_end":424,"column_start":5,"column_end":10}},{"value":"/ // Define a strategy for generating leaf nodes of the AST","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368605,"byte_end":368666,"line_start":425,"line_end":425,"column_start":5,"column_end":66}},{"value":"/ let json_leaf = prop_oneof![","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368671,"byte_end":368703,"line_start":426,"line_end":426,"column_start":5,"column_end":37}},{"value":"/   Just(JsonNode::Null),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368708,"byte_end":368735,"line_start":427,"line_end":427,"column_start":5,"column_end":32}},{"value":"/   prop::bool::ANY.prop_map(JsonNode::Bool),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368740,"byte_end":368787,"line_start":428,"line_end":428,"column_start":5,"column_end":52}},{"value":"/   prop::num::f64::ANY.prop_map(JsonNode::Number),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368792,"byte_end":368845,"line_start":429,"line_end":429,"column_start":5,"column_end":58}},{"value":"/   \".*\".prop_map(JsonNode::String),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368850,"byte_end":368888,"line_start":430,"line_end":430,"column_start":5,"column_end":43}},{"value":"/ ];","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368893,"byte_end":368899,"line_start":431,"line_end":431,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368904,"byte_end":368907,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ // Now define a strategy for a whole tree","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368912,"byte_end":368957,"line_start":433,"line_end":433,"column_start":5,"column_end":50}},{"value":"/ let json_tree = json_leaf.prop_recursive(","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":368962,"byte_end":369007,"line_start":434,"line_end":434,"column_start":5,"column_end":50}},{"value":"/   4, // No more than 4 branch levels deep","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369012,"byte_end":369057,"line_start":435,"line_end":435,"column_start":5,"column_end":50}},{"value":"/   64, // Target around 64 total elements","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369062,"byte_end":369106,"line_start":436,"line_end":436,"column_start":5,"column_end":49}},{"value":"/   16, // Each collection is up to 16 elements long","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369111,"byte_end":369165,"line_start":437,"line_end":437,"column_start":5,"column_end":59}},{"value":"/   |element| prop_oneof![","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369170,"byte_end":369198,"line_start":438,"line_end":438,"column_start":5,"column_end":33}},{"value":"/     // NB `element` is an `Arc` and we'll need to reference it twice,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369203,"byte_end":369276,"line_start":439,"line_end":439,"column_start":5,"column_end":78}},{"value":"/     // so we clone it the first time.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369281,"byte_end":369322,"line_start":440,"line_end":440,"column_start":5,"column_end":46}},{"value":"/     prop::collection::vec(element.clone(), 0..16)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369327,"byte_end":369380,"line_start":441,"line_end":441,"column_start":5,"column_end":58}},{"value":"/       .prop_map(JsonNode::Array),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369385,"byte_end":369422,"line_start":442,"line_end":442,"column_start":5,"column_end":42}},{"value":"/     prop::collection::hash_map(\".*\", element, 0..16)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369427,"byte_end":369483,"line_start":443,"line_end":443,"column_start":5,"column_end":61}},{"value":"/       .prop_map(JsonNode::Map)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369488,"byte_end":369522,"line_start":444,"line_end":444,"column_start":5,"column_end":39}},{"value":"/   ]);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369527,"byte_end":369536,"line_start":445,"line_end":445,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369541,"byte_end":369548,"line_start":446,"line_end":446,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369553,"byte_end":369560,"line_start":447,"line_end":447,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371196,"byte_end":371208,"line_start":500,"line_end":500,"column_start":8,"column_end":20},"name":"prop_shuffle","qualname":"::strategy::traits::Strategy::prop_shuffle","value":"fn (self) -> Shuffle<Self>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Shuffle the contents of the values produced by this strategy.","sig":null,"attributes":[{"value":"/ Shuffle the contents of the values produced by this strategy.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":369981,"byte_end":370046,"line_start":464,"line_end":464,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370051,"byte_end":370054,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ That is, this modifies a strategy producing a `Vec`, slice, etc, to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370059,"byte_end":370130,"line_start":466,"line_end":466,"column_start":5,"column_end":76}},{"value":"/ shuffle the contents of that `Vec`/slice/etc.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370135,"byte_end":370184,"line_start":467,"line_end":467,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370189,"byte_end":370192,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Initially, the value is fully shuffled. During shrinking, the input","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370197,"byte_end":370268,"line_start":469,"line_end":469,"column_start":5,"column_end":76}},{"value":"/ value will initially be unchanged while the result will gradually be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370273,"byte_end":370345,"line_start":470,"line_end":470,"column_start":5,"column_end":77}},{"value":"/ restored to its original order. Once de-shuffling either completes or","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370350,"byte_end":370423,"line_start":471,"line_end":471,"column_start":5,"column_end":78}},{"value":"/ is cancelled by calls to `complicate()` pinning it to a particular","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370428,"byte_end":370498,"line_start":472,"line_end":472,"column_start":5,"column_end":75}},{"value":"/ permutation, the inner value will be simplified.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370503,"byte_end":370555,"line_start":473,"line_end":473,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370560,"byte_end":370563,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370568,"byte_end":370582,"line_start":475,"line_end":475,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370587,"byte_end":370590,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370595,"byte_end":370602,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370607,"byte_end":370636,"line_start":478,"line_end":478,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370641,"byte_end":370644,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ static VALUES: &'static [u32] = &[0, 1, 2, 3, 4];","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370649,"byte_end":370702,"line_start":480,"line_end":480,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370707,"byte_end":370710,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ fn is_permutation(orig: &[u32], mut actual: Vec<u32>) -> bool {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370715,"byte_end":370782,"line_start":482,"line_end":482,"column_start":5,"column_end":72}},{"value":"/   actual.sort();","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370787,"byte_end":370807,"line_start":483,"line_end":483,"column_start":5,"column_end":25}},{"value":"/   orig == &actual[..]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370812,"byte_end":370837,"line_start":484,"line_end":484,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370842,"byte_end":370847,"line_start":485,"line_end":485,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370852,"byte_end":370855,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ proptest! {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370860,"byte_end":370875,"line_start":487,"line_end":487,"column_start":5,"column_end":20}},{"value":"/   # /*","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370880,"byte_end":370890,"line_start":488,"line_end":488,"column_start":5,"column_end":15}},{"value":"/   #[test]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370895,"byte_end":370908,"line_start":489,"line_end":489,"column_start":5,"column_end":18}},{"value":"/   # */","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370913,"byte_end":370923,"line_start":490,"line_end":490,"column_start":5,"column_end":15}},{"value":"/   fn test_is_permutation(","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370928,"byte_end":370957,"line_start":491,"line_end":491,"column_start":5,"column_end":34}},{"value":"/       ref perm in Just(VALUES.to_owned()).prop_shuffle()","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":370962,"byte_end":371022,"line_start":492,"line_end":492,"column_start":5,"column_end":65}},{"value":"/   ) {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371027,"byte_end":371036,"line_start":493,"line_end":493,"column_start":5,"column_end":14}},{"value":"/       assert!(is_permutation(VALUES, perm.clone()));","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371041,"byte_end":371097,"line_start":494,"line_end":494,"column_start":5,"column_end":61}},{"value":"/   }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371102,"byte_end":371109,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371114,"byte_end":371119,"line_start":496,"line_end":496,"column_start":5,"column_end":10}},{"value":"/ #","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371124,"byte_end":371129,"line_start":497,"line_end":497,"column_start":5,"column_end":10}},{"value":"/ # fn main() { test_is_permutation(); }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371134,"byte_end":371176,"line_start":498,"line_end":498,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371181,"byte_end":371188,"line_start":499,"line_end":499,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371700,"byte_end":371705,"line_start":516,"line_end":516,"column_start":8,"column_end":13},"name":"boxed","qualname":"::strategy::traits::Strategy::boxed","value":"fn (self) -> BoxedStrategy<Self::Value>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Erases the type of this `Strategy` so it can be passed around as a\n simple trait object.","sig":null,"attributes":[{"value":"/ Erases the type of this `Strategy` so it can be passed around as a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371336,"byte_end":371406,"line_start":508,"line_end":508,"column_start":5,"column_end":75}},{"value":"/ simple trait object.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371411,"byte_end":371435,"line_start":509,"line_end":509,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371440,"byte_end":371443,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ See also `sboxed()` if this `Strategy` is `Send` and `Sync` and you","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371448,"byte_end":371519,"line_start":511,"line_end":511,"column_start":5,"column_end":76}},{"value":"/ want to preserve that information.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371524,"byte_end":371562,"line_start":512,"line_end":512,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371567,"byte_end":371570,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371575,"byte_end":371645,"line_start":514,"line_end":514,"column_start":5,"column_end":75}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371650,"byte_end":371692,"line_start":515,"line_end":515,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372207,"byte_end":372213,"line_start":531,"line_end":531,"column_start":8,"column_end":14},"name":"sboxed","qualname":"::strategy::traits::Strategy::sboxed","value":"fn (self) -> SBoxedStrategy<Self::Value>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Erases the type of this `Strategy` so it can be passed around as a\n simple trait object.","sig":null,"attributes":[{"value":"/ Erases the type of this `Strategy` so it can be passed around as a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371860,"byte_end":371930,"line_start":523,"line_end":523,"column_start":5,"column_end":75}},{"value":"/ simple trait object.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371935,"byte_end":371959,"line_start":524,"line_end":524,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371964,"byte_end":371967,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ Unlike `boxed()`, this conversion retains the `Send` and `Sync` traits","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":371972,"byte_end":372046,"line_start":526,"line_end":526,"column_start":5,"column_end":79}},{"value":"/ on the output.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372051,"byte_end":372069,"line_start":527,"line_end":527,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372074,"byte_end":372077,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372082,"byte_end":372152,"line_start":529,"line_end":529,"column_start":5,"column_end":75}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372157,"byte_end":372199,"line_start":530,"line_end":530,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372976,"byte_end":372985,"line_start":547,"line_end":547,"column_start":8,"column_end":17},"name":"no_shrink","qualname":"::strategy::traits::Strategy::no_shrink","value":"fn (self) -> NoShrink<Self>","parent":{"krate":0,"index":1279},"children":[],"decl_id":null,"docs":" Wraps this strategy to prevent values from being subject to shrinking.","sig":null,"attributes":[{"value":"/ Wraps this strategy to prevent values from being subject to shrinking.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372384,"byte_end":372458,"line_start":538,"line_end":538,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372463,"byte_end":372466,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ Suppressing shrinking is useful when testing things like linear","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372471,"byte_end":372538,"line_start":540,"line_end":540,"column_start":5,"column_end":72}},{"value":"/ approximation functions. Ordinarily, proptest will tend to shrink the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372543,"byte_end":372616,"line_start":541,"line_end":541,"column_start":5,"column_end":78}},{"value":"/ input to the function until the result is just barely outside the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372621,"byte_end":372690,"line_start":542,"line_end":542,"column_start":5,"column_end":74}},{"value":"/ acceptable range whereas the original input may have produced a result","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372695,"byte_end":372769,"line_start":543,"line_end":543,"column_start":5,"column_end":79}},{"value":"/ far outside of it. Since this makes it harder to see what the actual","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372774,"byte_end":372846,"line_start":544,"line_end":544,"column_start":5,"column_end":77}},{"value":"/ problem is, making the input `NoShrink` allows learning about inputs","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372851,"byte_end":372923,"line_start":545,"line_end":545,"column_start":5,"column_end":77}},{"value":"/ that produce more incorrect results.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":372928,"byte_end":372968,"line_start":546,"line_end":546,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":1315},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374539,"byte_end":374548,"line_start":580,"line_end":580,"column_start":11,"column_end":20},"name":"ValueTree","qualname":"::strategy::traits::ValueTree","value":"ValueTree","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319}],"decl_id":null,"docs":" A generated value and its associated shrinker.","sig":null,"attributes":[{"value":"/ A generated value and its associated shrinker.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373079,"byte_end":373129,"line_start":555,"line_end":555,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373130,"byte_end":373133,"line_start":556,"line_end":556,"column_start":1,"column_end":4}},{"value":"/ Conceptually, a `ValueTree` represents a spectrum between a \"minimally","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373134,"byte_end":373208,"line_start":557,"line_end":557,"column_start":1,"column_end":75}},{"value":"/ complex\" value and a starting, randomly-chosen value. For values such as","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373209,"byte_end":373285,"line_start":558,"line_end":558,"column_start":1,"column_end":77}},{"value":"/ numbers, this can be thought of as a simple binary search, and this is how","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373286,"byte_end":373364,"line_start":559,"line_end":559,"column_start":1,"column_end":79}},{"value":"/ the `ValueTree` state machine is defined.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373365,"byte_end":373410,"line_start":560,"line_end":560,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373411,"byte_end":373414,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ The `ValueTree` state machine notionally has three fields: low, current,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373415,"byte_end":373491,"line_start":562,"line_end":562,"column_start":1,"column_end":77}},{"value":"/ and high. Initially, low is the \"minimally complex\" value for the type, and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373492,"byte_end":373571,"line_start":563,"line_end":563,"column_start":1,"column_end":80}},{"value":"/ high and current are both the initially chosen value. It can be queried for","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373572,"byte_end":373651,"line_start":564,"line_end":564,"column_start":1,"column_end":80}},{"value":"/ its current state. When shrinking, the controlling code tries simplifying","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373652,"byte_end":373729,"line_start":565,"line_end":565,"column_start":1,"column_end":78}},{"value":"/ the value one step. If the test failure still happens with the simplified","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373730,"byte_end":373807,"line_start":566,"line_end":566,"column_start":1,"column_end":78}},{"value":"/ value, further simplification occurs. Otherwise, the code steps back up","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373808,"byte_end":373883,"line_start":567,"line_end":567,"column_start":1,"column_end":76}},{"value":"/ towards the prior complexity.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373884,"byte_end":373917,"line_start":568,"line_end":568,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373918,"byte_end":373921,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ The main invariants here are that the \"high\" value always corresponds to a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":373922,"byte_end":374000,"line_start":570,"line_end":570,"column_start":1,"column_end":79}},{"value":"/ failing test case, and that repeated calls to `complicate()` will return","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374001,"byte_end":374077,"line_start":571,"line_end":571,"column_start":1,"column_end":77}},{"value":"/ `false` only once the \"current\" value has returned to what it was before","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374078,"byte_end":374154,"line_start":572,"line_end":572,"column_start":1,"column_end":77}},{"value":"/ the last call to `simplify()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374155,"byte_end":374189,"line_start":573,"line_end":573,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374190,"byte_end":374193,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ While it would be possible for default do-nothing implementations of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374194,"byte_end":374266,"line_start":575,"line_end":575,"column_start":1,"column_end":73}},{"value":"/ `simplify()` and `complicate()` to be provided, this was not done","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374267,"byte_end":374336,"line_start":576,"line_end":576,"column_start":1,"column_end":70}},{"value":"/ deliberately since the majority of strategies will want to define their own","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374337,"byte_end":374416,"line_start":577,"line_end":577,"column_start":1,"column_end":80}},{"value":"/ shrinking anyway, and the minority that do not must call it out explicitly","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374417,"byte_end":374495,"line_start":578,"line_end":578,"column_start":1,"column_end":79}},{"value":"/ by their own implementation.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374496,"byte_end":374528,"line_start":579,"line_end":579,"column_start":1,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":1316},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374620,"byte_end":374625,"line_start":582,"line_end":582,"column_start":10,"column_end":15},"name":"Value","qualname":"::strategy::traits::ValueTree::Value","value":"type Value: fmt::Debug;","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":" The type of the value produced by this `ValueTree`.\n","sig":null,"attributes":[{"value":"/ The type of the value produced by this `ValueTree`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374555,"byte_end":374610,"line_start":581,"line_end":581,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374682,"byte_end":374689,"line_start":585,"line_end":585,"column_start":8,"column_end":15},"name":"current","qualname":"::strategy::traits::ValueTree::current","value":"fn (&self) -> Self::Value","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":" Returns the current value.\n","sig":null,"attributes":[{"value":"/ Returns the current value.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374644,"byte_end":374674,"line_start":584,"line_end":584,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375347,"byte_end":375355,"line_start":597,"line_end":597,"column_start":8,"column_end":16},"name":"simplify","qualname":"::strategy::traits::ValueTree::simplify","value":"fn (&mut self) -> bool","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":" Attempts to simplify the current value. Notionally, this sets the\n \"high\" value to the current value, and the current value to a \"halfway\n point\" between high and low, rounding towards low.","sig":null,"attributes":[{"value":"/ Attempts to simplify the current value. Notionally, this sets the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374717,"byte_end":374786,"line_start":586,"line_end":586,"column_start":5,"column_end":74}},{"value":"/ \"high\" value to the current value, and the current value to a \"halfway","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374791,"byte_end":374865,"line_start":587,"line_end":587,"column_start":5,"column_end":79}},{"value":"/ point\" between high and low, rounding towards low.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374870,"byte_end":374924,"line_start":588,"line_end":588,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374929,"byte_end":374932,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ Returns whether any state changed as a result of this call. This does","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":374937,"byte_end":375010,"line_start":590,"line_end":590,"column_start":5,"column_end":78}},{"value":"/ not necessarily imply that the value of `current()` has changed, since","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375015,"byte_end":375089,"line_start":591,"line_end":591,"column_start":5,"column_end":79}},{"value":"/ in the most general case, it is not possible for an implementation to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375094,"byte_end":375167,"line_start":592,"line_end":592,"column_start":5,"column_end":78}},{"value":"/ determine this.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375172,"byte_end":375191,"line_start":593,"line_end":593,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375196,"byte_end":375199,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ This call needs to correctly handle being called even immediately after","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375204,"byte_end":375279,"line_start":595,"line_end":595,"column_start":5,"column_end":80}},{"value":"/ it had been called previously and returned `false`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375284,"byte_end":375339,"line_start":596,"line_end":596,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376653,"byte_end":376663,"line_start":620,"line_end":620,"column_start":8,"column_end":18},"name":"complicate","qualname":"::strategy::traits::ValueTree::complicate","value":"fn (&mut self) -> bool","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":" Attempts to partially undo the last simplification. Notionally, this\n sets the \"low\" value to one plus the current value, and the current\n value to a \"halfway point\" between high and the new low, rounding\n towards low.","sig":null,"attributes":[{"value":"/ Attempts to partially undo the last simplification. Notionally, this","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375380,"byte_end":375452,"line_start":598,"line_end":598,"column_start":5,"column_end":77}},{"value":"/ sets the \"low\" value to one plus the current value, and the current","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375457,"byte_end":375528,"line_start":599,"line_end":599,"column_start":5,"column_end":76}},{"value":"/ value to a \"halfway point\" between high and the new low, rounding","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375533,"byte_end":375602,"line_start":600,"line_end":600,"column_start":5,"column_end":74}},{"value":"/ towards low.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375607,"byte_end":375623,"line_start":601,"line_end":601,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375628,"byte_end":375631,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Returns whether any state changed as a result of this call. This does","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375636,"byte_end":375709,"line_start":603,"line_end":603,"column_start":5,"column_end":78}},{"value":"/ not necessarily imply that the value of `current()` has changed, since","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375714,"byte_end":375788,"line_start":604,"line_end":604,"column_start":5,"column_end":79}},{"value":"/ in the most general case, it is not possible for an implementation to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375793,"byte_end":375866,"line_start":605,"line_end":605,"column_start":5,"column_end":78}},{"value":"/ determine this.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375871,"byte_end":375890,"line_start":606,"line_end":606,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375895,"byte_end":375898,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ It is usually expected that, immediately after a call to `simplify()`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375903,"byte_end":375976,"line_start":608,"line_end":608,"column_start":5,"column_end":78}},{"value":"/ which returns true, this call will itself return true. However, this is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":375981,"byte_end":376056,"line_start":609,"line_end":609,"column_start":5,"column_end":80}},{"value":"/ not always the case; in some strategies, particularly those that use","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376061,"byte_end":376133,"line_start":610,"line_end":610,"column_start":5,"column_end":77}},{"value":"/ some form of rejection sampling, the act of trying to simplify may","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376138,"byte_end":376208,"line_start":611,"line_end":611,"column_start":5,"column_end":75}},{"value":"/ change the state such that `simplify()` returns true, yet ultimately","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376213,"byte_end":376285,"line_start":612,"line_end":612,"column_start":5,"column_end":77}},{"value":"/ left the resulting value unchanged, in which case there is nothing left","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376290,"byte_end":376365,"line_start":613,"line_end":613,"column_start":5,"column_end":80}},{"value":"/ to complicate.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376370,"byte_end":376388,"line_start":614,"line_end":614,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376393,"byte_end":376396,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ This call does not need to gracefully handle being called before","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376401,"byte_end":376469,"line_start":616,"line_end":616,"column_start":5,"column_end":73}},{"value":"/ `simplify()` was ever called, but does need to correctly handle being","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376474,"byte_end":376547,"line_start":617,"line_end":617,"column_start":5,"column_end":78}},{"value":"/ called even immediately after it had been called previously and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376552,"byte_end":376619,"line_start":618,"line_end":618,"column_start":5,"column_end":72}},{"value":"/ returned `false`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376624,"byte_end":376645,"line_start":619,"line_end":619,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":6847},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":377092,"byte_end":377100,"line_start":633,"line_end":633,"column_start":12,"column_end":20},"name":"NoShrink","qualname":"::strategy::traits::NoShrink","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wraps a `Strategy` or `ValueTree` to suppress shrinking of generated\n values.","sig":null,"attributes":[{"value":"/ Wraps a `Strategy` or `ValueTree` to suppress shrinking of generated","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376862,"byte_end":376934,"line_start":627,"line_end":627,"column_start":1,"column_end":73}},{"value":"/ values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376935,"byte_end":376946,"line_start":628,"line_end":628,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376947,"byte_end":376950,"line_start":629,"line_end":629,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::no_shrink()` for more details.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":376951,"byte_end":377000,"line_start":630,"line_end":630,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":377031,"byte_end":377080,"line_start":632,"line_end":632,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6886},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":378904,"byte_end":378917,"line_start":703,"line_end":703,"column_start":12,"column_end":25},"name":"BoxedStrategy","qualname":"::strategy::traits::BoxedStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" A boxed `Strategy` trait object as produced by `Strategy::boxed()`.","sig":null,"attributes":[{"value":"/ A boxed `Strategy` trait object as produced by `Strategy::boxed()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":378636,"byte_end":378707,"line_start":697,"line_end":697,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":378708,"byte_end":378711,"line_start":698,"line_end":698,"column_start":1,"column_end":4}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":378712,"byte_end":378782,"line_start":699,"line_end":699,"column_start":1,"column_end":71}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":378783,"byte_end":378825,"line_start":700,"line_end":700,"column_start":1,"column_end":43}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":378843,"byte_end":378892,"line_start":702,"line_end":702,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6893},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379278,"byte_end":379292,"line_start":712,"line_end":712,"column_start":12,"column_end":26},"name":"SBoxedStrategy","qualname":"::strategy::traits::SBoxedStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" A boxed `Strategy` trait object which is also `Sync` and\n `Send`, as produced by `Strategy::sboxed()`.","sig":null,"attributes":[{"value":"/ A boxed `Strategy` trait object which is also `Sync` and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":378972,"byte_end":379032,"line_start":705,"line_end":705,"column_start":1,"column_end":61}},{"value":"/ `Send`, as produced by `Strategy::sboxed()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379033,"byte_end":379081,"line_start":706,"line_end":706,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379082,"byte_end":379085,"line_start":707,"line_end":707,"column_start":1,"column_end":4}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379086,"byte_end":379156,"line_start":708,"line_end":708,"column_start":1,"column_end":71}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379157,"byte_end":379199,"line_start":709,"line_end":709,"column_start":1,"column_end":43}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379217,"byte_end":379266,"line_start":711,"line_end":711,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6907},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381118,"byte_end":381144,"line_start":791,"line_end":791,"column_start":12,"column_end":38},"name":"CheckStrategySanityOptions","qualname":"::strategy::traits::CheckStrategySanityOptions","value":"CheckStrategySanityOptions { strict_complicate_after_simplify, error_on_local_rejects, _non_exhaustive }","parent":null,"children":[{"krate":0,"index":6908},{"krate":0,"index":6909},{"krate":0,"index":6910}],"decl_id":null,"docs":" Options passed to `check_strategy_sanity()`.\n","sig":null,"attributes":[{"value":"/ Options passed to `check_strategy_sanity()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381028,"byte_end":381076,"line_start":789,"line_end":789,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":6908},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381448,"byte_end":381480,"line_start":797,"line_end":797,"column_start":9,"column_end":41},"name":"strict_complicate_after_simplify","qualname":"::strategy::traits::CheckStrategySanityOptions::strict_complicate_after_simplify","value":"bool","parent":{"krate":0,"index":6907},"children":[],"decl_id":null,"docs":" If true (the default), require that `complicate()` return `true` at\n least once after any call to `simplify()` which itself returns once.","sig":null,"attributes":[{"value":"/ If true (the default), require that `complicate()` return `true` at","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381151,"byte_end":381222,"line_start":792,"line_end":792,"column_start":5,"column_end":76}},{"value":"/ least once after any call to `simplify()` which itself returns once.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381227,"byte_end":381299,"line_start":793,"line_end":793,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381304,"byte_end":381307,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ This property is not required by contract, but many strategies are","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381312,"byte_end":381382,"line_start":795,"line_end":795,"column_start":5,"column_end":75}},{"value":"/ designed in a way that this is expected to hold.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381387,"byte_end":381439,"line_start":796,"line_end":796,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":6909},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381653,"byte_end":381675,"line_start":801,"line_end":801,"column_start":9,"column_end":31},"name":"error_on_local_rejects","qualname":"::strategy::traits::CheckStrategySanityOptions::error_on_local_rejects","value":"bool","parent":{"krate":0,"index":6907},"children":[],"decl_id":null,"docs":" If true, cause local rejects to return an error instead of retrying.\n Defaults to false. Useful for testing behaviors around error handling.\n","sig":null,"attributes":[{"value":"/ If true, cause local rejects to return an error instead of retrying.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381493,"byte_end":381565,"line_start":799,"line_end":799,"column_start":5,"column_end":77}},{"value":"/ Defaults to false. Useful for testing behaviors around error handling.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381570,"byte_end":381644,"line_start":800,"line_end":800,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":6910},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381780,"byte_end":381795,"line_start":806,"line_end":806,"column_start":9,"column_end":24},"name":"_non_exhaustive","qualname":"::strategy::traits::CheckStrategySanityOptions::_non_exhaustive","value":"()","parent":{"krate":0,"index":6907},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381730,"byte_end":381752,"line_start":804,"line_end":804,"column_start":5,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":1366},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382761,"byte_end":382782,"line_start":833,"line_end":833,"column_start":8,"column_end":29},"name":"check_strategy_sanity","qualname":"::strategy::traits::check_strategy_sanity","value":"fn <S> (strategy: S, options: Option<CheckStrategySanityOptions>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Run some tests on the given `Strategy` to ensure that it upholds the\n simplify/complicate contracts.","sig":null,"attributes":[{"value":"/ Run some tests on the given `Strategy` to ensure that it upholds the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382061,"byte_end":382133,"line_start":819,"line_end":819,"column_start":1,"column_end":73}},{"value":"/ simplify/complicate contracts.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382134,"byte_end":382168,"line_start":820,"line_end":820,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382169,"byte_end":382172,"line_start":821,"line_end":821,"column_start":1,"column_end":4}},{"value":"/ This is used to internally test proptest, but is made generally available","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382173,"byte_end":382250,"line_start":822,"line_end":822,"column_start":1,"column_end":78}},{"value":"/ for external implementations to use as well.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382251,"byte_end":382299,"line_start":823,"line_end":823,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382300,"byte_end":382303,"line_start":824,"line_end":824,"column_start":1,"column_end":4}},{"value":"/ `options` can be passed to configure the test; if `None`, the defaults are","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382304,"byte_end":382382,"line_start":825,"line_end":825,"column_start":1,"column_end":79}},{"value":"/ used. Note that the defaults check for certain properties which are **not**","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382383,"byte_end":382462,"line_start":826,"line_end":826,"column_start":1,"column_end":80}},{"value":"/ actually required by the `Strategy` and `ValueTree` contracts; if you think","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382463,"byte_end":382542,"line_start":827,"line_end":827,"column_start":1,"column_end":80}},{"value":"/ your code is right but it fails the test, consider whether a non-default","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382543,"byte_end":382619,"line_start":828,"line_end":828,"column_start":1,"column_end":77}},{"value":"/ configuration is necessary.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382620,"byte_end":382651,"line_start":829,"line_end":829,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382652,"byte_end":382655,"line_start":830,"line_end":830,"column_start":1,"column_end":4}},{"value":"/ This can work with fallible strategies, but limits how many times it will","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382656,"byte_end":382733,"line_start":831,"line_end":831,"column_start":1,"column_end":78}},{"value":"/ retry failures.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":382734,"byte_end":382753,"line_start":832,"line_end":832,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":1383},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391125,"byte_end":391126,"line_start":23,"line_end":23,"column_start":10,"column_end":11},"name":"W","qualname":"::strategy::unions::W","value":"(u32, T)","parent":null,"children":[],"decl_id":null,"docs":" A **relative** `weight` of a particular `Strategy` corresponding to `T`\n coupled with `T` itself. The weight is currently given in `u32`.\n","sig":null,"attributes":[{"value":"/ A **relative** `weight` of a particular `Strategy` corresponding to `T`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":390971,"byte_end":391046,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ coupled with `T` itself. The weight is currently given in `u32`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391047,"byte_end":391115,"line_start":22,"line_end":22,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1385},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391295,"byte_end":391297,"line_start":27,"line_end":27,"column_start":10,"column_end":12},"name":"WA","qualname":"::strategy::unions::WA","value":"(u32, Arc<T>)","parent":null,"children":[],"decl_id":null,"docs":" A **relative** `weight` of a particular `Strategy` corresponding to `T`\n coupled with `Arc<T>`. The weight is currently given in `u32`.\n","sig":null,"attributes":[{"value":"/ A **relative** `weight` of a particular `Strategy` corresponding to `T`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391143,"byte_end":391218,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ coupled with `Arc<T>`. The weight is currently given in `u32`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391219,"byte_end":391285,"line_start":26,"line_end":26,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":6916},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391513,"byte_end":391518,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"name":"Union","qualname":"::strategy::unions::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":6918}],"decl_id":null,"docs":" A `Strategy` which picks from one of several delegate `Stragegy`s.","sig":null,"attributes":[{"value":"/ A `Strategy` which picks from one of several delegate `Stragegy`s.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391319,"byte_end":391389,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391390,"byte_end":391393,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_union()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391394,"byte_end":391427,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391452,"byte_end":391501,"line_start":33,"line_end":33,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392072,"byte_end":392075,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<Union<T>>::new","value":"fn (options: impl IntoIterator<Item = T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which selects uniformly from the given delegate\n strategies.","sig":null,"attributes":[{"value":"/ Create a strategy which selects uniformly from the given delegate","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391717,"byte_end":391786,"line_start":41,"line_end":41,"column_start":5,"column_end":74}},{"value":"/ strategies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391791,"byte_end":391806,"line_start":42,"line_end":42,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391811,"byte_end":391814,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ When shrinking, after maximal simplification of the chosen element, the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391819,"byte_end":391894,"line_start":44,"line_end":44,"column_start":5,"column_end":80}},{"value":"/ strategy will move to earlier options and continue simplification with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391899,"byte_end":391973,"line_start":45,"line_end":45,"column_start":5,"column_end":79}},{"value":"/ those.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391978,"byte_end":391988,"line_start":46,"line_end":46,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391993,"byte_end":391996,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392001,"byte_end":392014,"line_start":48,"line_end":48,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392019,"byte_end":392022,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ Panics if `options` is empty.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392027,"byte_end":392060,"line_start":50,"line_end":50,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":393112,"byte_end":393124,"line_start":81,"line_end":81,"column_start":12,"column_end":24},"name":"new_weighted","qualname":"<Union<T>>::new_weighted","value":"fn (options: Vec<W<T>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which selects from the given delegate strategies.","sig":null,"attributes":[{"value":"/ Create a strategy which selects from the given delegate strategies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392609,"byte_end":392680,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392685,"byte_end":392688,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Each strategy is assigned a non-zero weight which determines how","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392693,"byte_end":392761,"line_start":71,"line_end":71,"column_start":5,"column_end":73}},{"value":"/ frequently that strategy is chosen. For example, a strategy with a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392766,"byte_end":392836,"line_start":72,"line_end":72,"column_start":5,"column_end":75}},{"value":"/ weight of 2 will be chosen twice as frequently as one with a weight of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392841,"byte_end":392915,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ 1\\.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392920,"byte_end":392927,"line_start":74,"line_end":74,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392932,"byte_end":392935,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392940,"byte_end":392953,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392958,"byte_end":392961,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Panics if `options` is empty or any element has a weight of 0.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":392966,"byte_end":393032,"line_start":78,"line_end":78,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":393037,"byte_end":393040,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Panics if the sum of the weights overflows a `u32`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":393045,"byte_end":393100,"line_start":80,"line_end":80,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":393704,"byte_end":393706,"line_start":98,"line_end":98,"column_start":12,"column_end":14},"name":"or","qualname":"<Union<T>>::or","value":"fn (mut self, other: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Add `other` as an additional alternate strategy with weight 1.\n","sig":null,"attributes":[{"value":"/ Add `other` as an additional alternate strategy with weight 1.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":393626,"byte_end":393692,"line_start":97,"line_end":97,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":1412},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":395591,"byte_end":395605,"line_start":166,"line_end":166,"column_start":12,"column_end":26},"name":"UnionValueTree","qualname":"::strategy::unions::UnionValueTree","value":"UnionValueTree {  }","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417}],"decl_id":null,"docs":" `ValueTree corresponding to `Union`.\n","sig":null,"attributes":[{"value":"/ `ValueTree corresponding to `Union`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":395539,"byte_end":395579,"line_start":165,"line_end":165,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":6943},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401300,"byte_end":401310,"line_start":340,"line_end":340,"column_start":12,"column_end":22},"name":"TupleUnion","qualname":"::strategy::unions::TupleUnion","value":"","parent":null,"children":[],"decl_id":null,"docs":" Similar to `Union`, but internally uses a tuple to hold the strategies.","sig":null,"attributes":[{"value":"/ Similar to `Union`, but internally uses a tuple to hold the strategies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":400813,"byte_end":400888,"line_start":330,"line_end":330,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":400889,"byte_end":400892,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ This allows better performance than vanilla `Union` since one does not need","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":400893,"byte_end":400972,"line_start":332,"line_end":332,"column_start":1,"column_end":80}},{"value":"/ to resort to boxing and dynamic dispatch to handle heterogeneous","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":400973,"byte_end":401041,"line_start":333,"line_end":333,"column_start":1,"column_end":69}},{"value":"/ strategies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401042,"byte_end":401057,"line_start":334,"line_end":334,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401058,"byte_end":401061,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ The difference between this and `TupleUnion` is that with this, value trees","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401062,"byte_end":401141,"line_start":336,"line_end":336,"column_start":1,"column_end":80}},{"value":"/ for variants that aren't picked at first are generated lazily.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401142,"byte_end":401208,"line_start":337,"line_end":337,"column_start":1,"column_end":67}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401209,"byte_end":401258,"line_start":338,"line_end":338,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401887,"byte_end":401890,"line_start":353,"line_end":353,"column_start":12,"column_end":15},"name":"new","qualname":"<TupleUnion<T>>::new","value":"fn (tuple: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap `tuple` in a `TupleUnion`.","sig":null,"attributes":[{"value":"/ Wrap `tuple` in a `TupleUnion`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401347,"byte_end":401382,"line_start":343,"line_end":343,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401387,"byte_end":401390,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ The struct definition allows any `T` for `tuple`, but to be useful, it","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401395,"byte_end":401469,"line_start":345,"line_end":345,"column_start":5,"column_end":79}},{"value":"/ must be a 2- to 10-tuple of `(u32, Arc<impl Strategy>)` pairs where all","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401474,"byte_end":401549,"line_start":346,"line_end":346,"column_start":5,"column_end":80}},{"value":"/ strategies ultimately produce the same value. Each `u32` indicates the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401554,"byte_end":401628,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ relative weight of its corresponding strategy.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401633,"byte_end":401683,"line_start":348,"line_end":348,"column_start":5,"column_end":55}},{"value":"/ You may use `WA<S>` as an alias for `(u32, Arc<S>)`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401688,"byte_end":401744,"line_start":349,"line_end":349,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401749,"byte_end":401752,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ Using this constructor directly is discouraged; prefer to use","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401757,"byte_end":401822,"line_start":351,"line_end":351,"column_start":5,"column_end":70}},{"value":"/ `prop_oneof!` since it is generally clearer.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401827,"byte_end":401875,"line_start":352,"line_end":352,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":7045},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":404018,"byte_end":404037,"line_start":411,"line_end":411,"column_start":12,"column_end":31},"name":"TupleUnionValueTree","qualname":"::strategy::unions::TupleUnionValueTree","value":"TupleUnionValueTree {  }","parent":null,"children":[{"krate":0,"index":7047},{"krate":0,"index":7048},{"krate":0,"index":7049},{"krate":0,"index":7050}],"decl_id":null,"docs":" `ValueTree` type produced by `TupleUnion`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` type produced by `TupleUnion`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":403930,"byte_end":403976,"line_start":409,"line_end":409,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1434},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405547,"byte_end":405562,"line_start":455,"line_end":455,"column_start":8,"column_end":23},"name":"float_to_weight","qualname":"::strategy::unions::float_to_weight","value":"fn (f: f64) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Convert a floating-point weight in the range (0.0,1.0) to a pair of weights\n that can be used with `Union` and similar.","sig":null,"attributes":[{"value":"/ Convert a floating-point weight in the range (0.0,1.0) to a pair of weights","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":404913,"byte_end":404992,"line_start":441,"line_end":441,"column_start":1,"column_end":80}},{"value":"/ that can be used with `Union` and similar.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":404993,"byte_end":405039,"line_start":442,"line_end":442,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405040,"byte_end":405043,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ The first return value is the weight corresponding to `f`; the second","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405044,"byte_end":405117,"line_start":444,"line_end":444,"column_start":1,"column_end":74}},{"value":"/ return value is the weight corresponding to `1.0 - f`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405118,"byte_end":405176,"line_start":445,"line_end":445,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405177,"byte_end":405180,"line_start":446,"line_end":446,"column_start":1,"column_end":4}},{"value":"/ This call does not make any guarantees as to what range of weights it may","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405181,"byte_end":405258,"line_start":447,"line_end":447,"column_start":1,"column_end":78}},{"value":"/ produce, except that adding the two return values will never overflow a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405259,"byte_end":405334,"line_start":448,"line_end":448,"column_start":1,"column_end":76}},{"value":"/ `u32`. As such, it is generally not meaningful to combine any other weights","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405335,"byte_end":405414,"line_start":449,"line_end":449,"column_start":1,"column_end":80}},{"value":"/ with the two returned.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405415,"byte_end":405441,"line_start":450,"line_end":450,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405442,"byte_end":405445,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405446,"byte_end":405459,"line_start":452,"line_end":452,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405460,"byte_end":405463,"line_start":453,"line_end":453,"column_start":1,"column_end":4}},{"value":"/ Panics if `f` is not a real number between 0.0 and 1.0, both exclusive.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":405464,"byte_end":405539,"line_start":454,"line_end":454,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":1447},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"statics","qualname":"::strategy::statics","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","parent":null,"children":[{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":7320},{"krate":0,"index":7326},{"krate":0,"index":1454},{"krate":0,"index":1458},{"krate":0,"index":1462},{"krate":0,"index":1468},{"krate":0,"index":1472},{"krate":0,"index":1479},{"krate":0,"index":7330},{"krate":0,"index":7335},{"krate":0,"index":1483},{"krate":0,"index":1487},{"krate":0,"index":1491},{"krate":0,"index":1498},{"krate":0,"index":1505},{"krate":0,"index":1510}],"decl_id":null,"docs":" Modified versions of the normal strategy combinators which take specialised\n traits instead of normal functions.","sig":null,"attributes":[{"value":"! Modified versions of the normal strategy combinators which take specialised","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":413758,"byte_end":413837,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"! traits instead of normal functions.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":413838,"byte_end":413877,"line_start":11,"line_end":11,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":413878,"byte_end":413881,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! This entire module is strictly a workaround until","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":413882,"byte_end":413935,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"! <https://github.com/rust-lang/rfcs/pull/1522> and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":413936,"byte_end":413989,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"! <https://github.com/rust-lang/rfcs/pull/2071> are available in stable. It","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":413990,"byte_end":414067,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"! allows naming types built on the combinators without resorting to dynamic","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414068,"byte_end":414145,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"! dispatch or causing `Arc` to allocate space for a function pointer.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414146,"byte_end":414217,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414218,"byte_end":414221,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! External code is discouraged from using this module directly. It is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414222,"byte_end":414293,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"! deliberately not exposed in a convenient way (i.e., via the `Strategy`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414294,"byte_end":414368,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"! trait itself), but is nonetheless exposed since external trait implementors","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414369,"byte_end":414448,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"! may face the same issues.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414449,"byte_end":414478,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414479,"byte_end":414482,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! **This module is subject to removal at some point after the language","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414483,"byte_end":414555,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"! features linked above become stable.**","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414556,"byte_end":414598,"line_start":25,"line_end":25,"column_start":1,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":1451},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414907,"byte_end":414915,"line_start":37,"line_end":37,"column_start":11,"column_end":19},"name":"FilterFn","qualname":"::strategy::statics::FilterFn","value":"FilterFn<T>","parent":null,"children":[{"krate":0,"index":1453}],"decl_id":null,"docs":" Essentially `Fn (&T) -> bool`.\n","sig":null,"attributes":[{"value":"/ Essentially `Fn (&T) -> bool`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414862,"byte_end":414896,"line_start":36,"line_end":36,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414972,"byte_end":414977,"line_start":39,"line_end":39,"column_start":8,"column_end":13},"name":"apply","qualname":"::strategy::statics::FilterFn::apply","value":"fn (&self, t: &T) -> bool","parent":{"krate":0,"index":1451},"children":[],"decl_id":null,"docs":" Test whether `t` passes the filter.\n","sig":null,"attributes":[{"value":"/ Test whether `t` passes the filter.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":414925,"byte_end":414964,"line_start":38,"line_end":38,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":7320},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":415124,"byte_end":415130,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"Filter","qualname":"::strategy::statics::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":7323},{"krate":0,"index":7324},{"krate":0,"index":7325}],"decl_id":null,"docs":" Static version of `strategy::Filter`.\n","sig":null,"attributes":[{"value":"/ Static version of `strategy::Filter`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":415004,"byte_end":415045,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":415063,"byte_end":415112,"line_start":44,"line_end":44,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":415359,"byte_end":415362,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<Filter<S, F>>::new","value":"fn (source: S, whence: Reason, filter: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adapt strategy `source` to reject values which do not pass `filter`,\n using `whence` as the reported reason/location.\n","sig":null,"attributes":[{"value":"/ Adapt strategy `source` to reject values which do not pass `filter`,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":415219,"byte_end":415291,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ using `whence` as the reported reason/location.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":415296,"byte_end":415347,"line_start":53,"line_end":53,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":1479},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":417692,"byte_end":417697,"line_start":139,"line_end":139,"column_start":11,"column_end":16},"name":"MapFn","qualname":"::strategy::statics::MapFn","value":"MapFn<T>","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482}],"decl_id":null,"docs":" Essentially `Fn (T) -> Output`.\n","sig":null,"attributes":[{"value":"/ Essentially `Fn (T) -> Output`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":417646,"byte_end":417681,"line_start":138,"line_end":138,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1481},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":417739,"byte_end":417745,"line_start":141,"line_end":141,"column_start":10,"column_end":16},"name":"Output","qualname":"::strategy::statics::MapFn::Output","value":"type Output: fmt::Debug;","parent":{"krate":0,"index":1479},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":417707,"byte_end":417729,"line_start":140,"line_end":140,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":417796,"byte_end":417801,"line_start":144,"line_end":144,"column_start":8,"column_end":13},"name":"apply","qualname":"::strategy::statics::MapFn::apply","value":"fn (&self, t: T) -> Self::Output","parent":{"krate":0,"index":1479},"children":[],"decl_id":null,"docs":" Map `T` to `Output`.\n","sig":null,"attributes":[{"value":"/ Map `T` to `Output`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":417764,"byte_end":417788,"line_start":143,"line_end":143,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":7330},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":417952,"byte_end":417955,"line_start":150,"line_end":150,"column_start":12,"column_end":15},"name":"Map","qualname":"::strategy::statics::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":7333},{"krate":0,"index":7334}],"decl_id":null,"docs":" Static version of `strategy::Map`.\n","sig":null,"attributes":[{"value":"/ Static version of `strategy::Map`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":417835,"byte_end":417873,"line_start":147,"line_end":147,"column_start":1,"column_end":39}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":417891,"byte_end":417940,"line_start":149,"line_end":149,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":418101,"byte_end":418104,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<Map<S, F>>::new","value":"fn (source: S, fun: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adapt strategy `source` by applying `fun` to values it produces.\n","sig":null,"attributes":[{"value":"/ Adapt strategy `source` by applying `fun` to values it produces.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":418021,"byte_end":418089,"line_start":156,"line_end":156,"column_start":5,"column_end":73}}]},{"kind":"Mod","id":{"krate":0,"index":1513},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"test_runner","qualname":"::test_runner","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","parent":null,"children":[{"krate":0,"index":1514},{"krate":0,"index":1552},{"krate":0,"index":1573},{"krate":0,"index":1693},{"krate":0,"index":1709},{"krate":0,"index":1745},{"krate":0,"index":1811},{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1912}],"decl_id":null,"docs":" State and functions for running proptest tests.","sig":null,"attributes":[{"value":"! State and functions for running proptest tests.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":421098,"byte_end":421149,"line_start":10,"line_end":10,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":421150,"byte_end":421153,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! You do not normally need to access things in this module directly except","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":421154,"byte_end":421230,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"! when implementing new low-level strategies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/mod.rs","byte_start":421231,"byte_end":421278,"line_start":13,"line_end":13,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":7350},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427063,"byte_end":427069,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"Config","qualname":"::test_runner::config::Config","value":"Config { cases, max_local_rejects, max_global_rejects, max_flat_map_regens, failure_persistence, source_file, test_name, max_shrink_time, max_shrink_iters, result_cache, verbose, rng_algorithm, _non_exhaustive }","parent":null,"children":[{"krate":0,"index":7351},{"krate":0,"index":7352},{"krate":0,"index":7353},{"krate":0,"index":7354},{"krate":0,"index":7355},{"krate":0,"index":7356},{"krate":0,"index":7357},{"krate":0,"index":7358},{"krate":0,"index":7359},{"krate":0,"index":7360},{"krate":0,"index":7361},{"krate":0,"index":7362},{"krate":0,"index":7363}],"decl_id":null,"docs":" Configuration for how a proptest test should be run.\n","sig":null,"attributes":[{"value":"/ Configuration for how a proptest test should be run.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":426960,"byte_end":427016,"line_start":176,"line_end":176,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":7351},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427388,"byte_end":427393,"line_start":186,"line_end":186,"column_start":9,"column_end":14},"name":"cases","qualname":"::test_runner::config::Config::cases","value":"u32","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" The number of successful test cases that must execute for the test as a\n whole to pass.","sig":null,"attributes":[{"value":"/ The number of successful test cases that must execute for the test as a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427076,"byte_end":427151,"line_start":179,"line_end":179,"column_start":5,"column_end":80}},{"value":"/ whole to pass.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427156,"byte_end":427174,"line_start":180,"line_end":180,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427179,"byte_end":427182,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This does not include implicitly-replayed persisted failing cases.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427187,"byte_end":427257,"line_start":182,"line_end":182,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427262,"byte_end":427265,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ The default is 256, which can be overridden by setting the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427270,"byte_end":427332,"line_start":184,"line_end":184,"column_start":5,"column_end":67}},{"value":"/ `PROPTEST_CASES` environment variable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427337,"byte_end":427379,"line_start":185,"line_end":185,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":7352},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427657,"byte_end":427674,"line_start":193,"line_end":193,"column_start":9,"column_end":26},"name":"max_local_rejects","qualname":"::test_runner::config::Config::max_local_rejects","value":"u32","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" The maximum number of individual inputs that may be rejected before the\n test as a whole aborts.","sig":null,"attributes":[{"value":"/ The maximum number of individual inputs that may be rejected before the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427405,"byte_end":427480,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/ test as a whole aborts.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427485,"byte_end":427512,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427517,"byte_end":427520,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ The default is 65536, which can be overridden by setting the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427525,"byte_end":427589,"line_start":191,"line_end":191,"column_start":5,"column_end":69}},{"value":"/ `PROPTEST_MAX_LOCAL_REJECTS` environment variable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427594,"byte_end":427648,"line_start":192,"line_end":192,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":7353},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427936,"byte_end":427954,"line_start":200,"line_end":200,"column_start":9,"column_end":27},"name":"max_global_rejects","qualname":"::test_runner::config::Config::max_global_rejects","value":"u32","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" The maximum number of combined inputs that may be rejected before the\n test as a whole aborts.","sig":null,"attributes":[{"value":"/ The maximum number of combined inputs that may be rejected before the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427686,"byte_end":427759,"line_start":195,"line_end":195,"column_start":5,"column_end":78}},{"value":"/ test as a whole aborts.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427764,"byte_end":427791,"line_start":196,"line_end":196,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427796,"byte_end":427799,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ The default is 1024, which can be overridden by setting the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427804,"byte_end":427867,"line_start":198,"line_end":198,"column_start":5,"column_end":68}},{"value":"/ `PROPTEST_MAX_GLOBAL_REJECTS` environment variable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427872,"byte_end":427927,"line_start":199,"line_end":199,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":7354},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428323,"byte_end":428342,"line_start":208,"line_end":208,"column_start":9,"column_end":28},"name":"max_flat_map_regens","qualname":"::test_runner::config::Config::max_flat_map_regens","value":"u32","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" The maximum number of times all `Flatten` combinators will attempt to\n regenerate values. This puts a limit on the worst-case exponential\n explosion that can happen with nested `Flatten`s.","sig":null,"attributes":[{"value":"/ The maximum number of times all `Flatten` combinators will attempt to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":427966,"byte_end":428039,"line_start":202,"line_end":202,"column_start":5,"column_end":78}},{"value":"/ regenerate values. This puts a limit on the worst-case exponential","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428044,"byte_end":428114,"line_start":203,"line_end":203,"column_start":5,"column_end":75}},{"value":"/ explosion that can happen with nested `Flatten`s.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428119,"byte_end":428172,"line_start":204,"line_end":204,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428177,"byte_end":428180,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ The default is 1_000_000, which can be overridden by setting the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428185,"byte_end":428253,"line_start":206,"line_end":206,"column_start":5,"column_end":73}},{"value":"/ `PROPTEST_MAX_FLAT_MAP_REGENS` environment variable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428258,"byte_end":428314,"line_start":207,"line_end":207,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":7355},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428992,"byte_end":429011,"line_start":221,"line_end":221,"column_start":9,"column_end":28},"name":"failure_persistence","qualname":"::test_runner::config::Config::failure_persistence","value":"core::option::Option<std::boxed::Box<(dyn test_runner::failure_persistence::FailurePersistence + 'static)>>","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" Indicates whether and how to persist failed test results.","sig":null,"attributes":[{"value":"/ Indicates whether and how to persist failed test results.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428354,"byte_end":428415,"line_start":210,"line_end":210,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428420,"byte_end":428423,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ When compiling with \"std\" feature (i.e. the standard library is available), the default","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428428,"byte_end":428519,"line_start":212,"line_end":212,"column_start":5,"column_end":96}},{"value":"/ is `Some(Box::new(FileFailurePersistence::SourceParallel(\"proptest-regressions\")))`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428524,"byte_end":428612,"line_start":213,"line_end":213,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428617,"byte_end":428620,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Without the standard library, the default is `None`, and no persistence occurs.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428625,"byte_end":428708,"line_start":215,"line_end":215,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428713,"byte_end":428716,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ See the docs of [`FileFailurePersistence`](enum.FileFailurePersistence.html)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428721,"byte_end":428801,"line_start":217,"line_end":217,"column_start":5,"column_end":85}},{"value":"/ and [`MapFailurePersistence`](struct.MapFailurePersistence.html) for more information.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428806,"byte_end":428896,"line_start":218,"line_end":218,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428901,"byte_end":428904,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The default cannot currently be overridden by an environment variable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":428909,"byte_end":428983,"line_start":220,"line_end":220,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":7356},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429451,"byte_end":429462,"line_start":231,"line_end":231,"column_start":9,"column_end":20},"name":"source_file","qualname":"::test_runner::config::Config::source_file","value":"core::option::Option<&'static str>","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" File location of the current test, relevant for persistence\n and debugging.","sig":null,"attributes":[{"value":"/ File location of the current test, relevant for persistence","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429055,"byte_end":429118,"line_start":223,"line_end":223,"column_start":5,"column_end":68}},{"value":"/ and debugging.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429123,"byte_end":429141,"line_start":224,"line_end":224,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429146,"byte_end":429149,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Note the use of `&str` rather than `Path` to be compatible with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429154,"byte_end":429221,"line_start":226,"line_end":226,"column_start":5,"column_end":72}},{"value":"/ `#![no_std]` use cases where `Path` is unavailable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429226,"byte_end":429281,"line_start":227,"line_end":227,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429286,"byte_end":429289,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ See the docs of [`FileFailurePersistence`](enum.FileFailurePersistence.html)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429294,"byte_end":429374,"line_start":229,"line_end":229,"column_start":5,"column_end":85}},{"value":"/ for more information on how it may be used for persistence.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429379,"byte_end":429442,"line_start":230,"line_end":230,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":7357},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429859,"byte_end":429868,"line_start":241,"line_end":241,"column_start":9,"column_end":18},"name":"test_name","qualname":"::test_runner::config::Config::test_name","value":"core::option::Option<&'static str>","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" The fully-qualified name of the test being run, as would be passed to\n the test executable to run just that test.","sig":null,"attributes":[{"value":"/ The fully-qualified name of the test being run, as would be passed to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429491,"byte_end":429564,"line_start":233,"line_end":233,"column_start":5,"column_end":78}},{"value":"/ the test executable to run just that test.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429569,"byte_end":429615,"line_start":234,"line_end":234,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429620,"byte_end":429623,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ This must be set if `fork` is `true`. Otherwise, it is unused. It is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429628,"byte_end":429700,"line_start":236,"line_end":236,"column_start":5,"column_end":77}},{"value":"/ automatically set by `proptest!`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429705,"byte_end":429742,"line_start":237,"line_end":237,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429747,"byte_end":429750,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This must include the crate name at the beginning, as produced by","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429755,"byte_end":429824,"line_start":239,"line_end":239,"column_start":5,"column_end":74}},{"value":"/ `module_path!()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":429829,"byte_end":429850,"line_start":240,"line_end":240,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":7358},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431906,"byte_end":431921,"line_start":289,"line_end":289,"column_start":9,"column_end":24},"name":"max_shrink_time","qualname":"::test_runner::config::Config::max_shrink_time","value":"u32","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" If non-zero, give up the shrinking process after this many milliseconds\n have elapsed since the start of the shrinking process.","sig":null,"attributes":[{"value":"/ If non-zero, give up the shrinking process after this many milliseconds","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431377,"byte_end":431452,"line_start":278,"line_end":278,"column_start":5,"column_end":80}},{"value":"/ have elapsed since the start of the shrinking process.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431457,"byte_end":431515,"line_start":279,"line_end":279,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431520,"byte_end":431523,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This will not cause currently running test cases to be interrupted.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431528,"byte_end":431599,"line_start":281,"line_end":281,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431604,"byte_end":431607,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This configuration is only available when the `std` feature is enabled","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431612,"byte_end":431686,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ (which it is by default).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431691,"byte_end":431720,"line_start":284,"line_end":284,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431725,"byte_end":431728,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ The default is `0` (i.e., no limit), which can be overridden by setting","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431733,"byte_end":431808,"line_start":286,"line_end":286,"column_start":5,"column_end":80}},{"value":"/ the `PROPTEST_MAX_SHRINK_TIME` environment variable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431813,"byte_end":431869,"line_start":287,"line_end":287,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431874,"byte_end":431897,"line_start":288,"line_end":288,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":7359},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432523,"byte_end":432539,"line_start":304,"line_end":304,"column_start":9,"column_end":25},"name":"max_shrink_iters","qualname":"::test_runner::config::Config::max_shrink_iters","value":"u32","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" Give up on shrinking if more than this number of iterations of the test\n code are run.","sig":null,"attributes":[{"value":"/ Give up on shrinking if more than this number of iterations of the test","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":431933,"byte_end":432008,"line_start":291,"line_end":291,"column_start":5,"column_end":80}},{"value":"/ code are run.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432013,"byte_end":432030,"line_start":292,"line_end":292,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432035,"byte_end":432038,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Setting this to `std::u32::MAX` causes the actual limit to be four","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432043,"byte_end":432113,"line_start":294,"line_end":294,"column_start":5,"column_end":75}},{"value":"/ times the number of test cases.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432118,"byte_end":432153,"line_start":295,"line_end":295,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432158,"byte_end":432161,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Setting this value to `0` disables shrinking altogether.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432166,"byte_end":432226,"line_start":297,"line_end":297,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432231,"byte_end":432234,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Note that the type of this field will change in a future version of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432239,"byte_end":432310,"line_start":299,"line_end":299,"column_start":5,"column_end":76}},{"value":"/ proptest to better accommodate its special values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432315,"byte_end":432369,"line_start":300,"line_end":300,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432374,"byte_end":432377,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ The default is `std::u32::MAX`, which can be overridden by setting the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432382,"byte_end":432456,"line_start":302,"line_end":302,"column_start":5,"column_end":79}},{"value":"/ `PROPTEST_MAX_SHRINK_ITERS` environment variable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432461,"byte_end":432514,"line_start":303,"line_end":303,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":7360},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433363,"byte_end":433375,"line_start":322,"line_end":322,"column_start":9,"column_end":21},"name":"result_cache","qualname":"::test_runner::config::Config::result_cache","value":"fn() -> std::boxed::Box<(dyn test_runner::result_cache::ResultCache + 'static)>","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" A function to create new result caches.","sig":null,"attributes":[{"value":"/ A function to create new result caches.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432551,"byte_end":432594,"line_start":306,"line_end":306,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432599,"byte_end":432602,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ The default is to do no caching. The easiest way to enable caching is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432607,"byte_end":432680,"line_start":308,"line_end":308,"column_start":5,"column_end":78}},{"value":"/ to set this field to `basic_result_cache` (though that is currently","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432685,"byte_end":432756,"line_start":309,"line_end":309,"column_start":5,"column_end":76}},{"value":"/ only available with the `std` feature).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432761,"byte_end":432804,"line_start":310,"line_end":310,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432809,"byte_end":432812,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ This is useful for strategies which have a tendency to produce","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432817,"byte_end":432883,"line_start":312,"line_end":312,"column_start":5,"column_end":71}},{"value":"/ duplicate values, or for tests where shrinking can take a very long","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432888,"byte_end":432959,"line_start":313,"line_end":313,"column_start":5,"column_end":76}},{"value":"/ time due to exploring the same output multiple times.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":432964,"byte_end":433021,"line_start":314,"line_end":314,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433026,"byte_end":433029,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ When caching is enabled, generated values themselves are not stored, so","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433034,"byte_end":433109,"line_start":316,"line_end":316,"column_start":5,"column_end":80}},{"value":"/ this does not pose a risk of memory exhaustion for large test inputs","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433114,"byte_end":433186,"line_start":317,"line_end":317,"column_start":5,"column_end":77}},{"value":"/ unless using extraordinarily large test case counts.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433191,"byte_end":433247,"line_start":318,"line_end":318,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433252,"byte_end":433255,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Caching incurs its own overhead, and may very well make your test run","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433260,"byte_end":433333,"line_start":320,"line_end":320,"column_start":5,"column_end":78}},{"value":"/ more slowly.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433338,"byte_end":433354,"line_start":321,"line_end":321,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":7361},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434095,"byte_end":434102,"line_start":340,"line_end":340,"column_start":9,"column_end":16},"name":"verbose","qualname":"::test_runner::config::Config::verbose","value":"u32","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" Set to non-zero values to cause proptest to emit human-targeted\n messages to stderr as it runs.","sig":null,"attributes":[{"value":"/ Set to non-zero values to cause proptest to emit human-targeted","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433412,"byte_end":433479,"line_start":324,"line_end":324,"column_start":5,"column_end":72}},{"value":"/ messages to stderr as it runs.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433484,"byte_end":433518,"line_start":325,"line_end":325,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433523,"byte_end":433526,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Greater values cause greater amounts of logs to be emitted. The exact","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433531,"byte_end":433604,"line_start":327,"line_end":327,"column_start":5,"column_end":78}},{"value":"/ meaning of certain levels other than 0 is subject to change.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433609,"byte_end":433673,"line_start":328,"line_end":328,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433678,"byte_end":433681,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ - 0: No extra output.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433686,"byte_end":433711,"line_start":330,"line_end":330,"column_start":5,"column_end":30}},{"value":"/ - 1: Log test failure messages.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433716,"byte_end":433751,"line_start":331,"line_end":331,"column_start":5,"column_end":40}},{"value":"/ - 2: Trace low-level details.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433756,"byte_end":433789,"line_start":332,"line_end":332,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433794,"byte_end":433797,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ This is only available with the `std` feature (enabled by default)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433802,"byte_end":433872,"line_start":334,"line_end":334,"column_start":5,"column_end":75}},{"value":"/ since on nostd proptest has no way to produce output.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433877,"byte_end":433934,"line_start":335,"line_end":335,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433939,"byte_end":433942,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ The default is `0`, which can be overridden by setting the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":433947,"byte_end":434009,"line_start":337,"line_end":337,"column_start":5,"column_end":67}},{"value":"/ `PROPTEST_VERBOSE` environment variable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434014,"byte_end":434058,"line_start":338,"line_end":338,"column_start":5,"column_end":49}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434063,"byte_end":434086,"line_start":339,"line_end":339,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":7362},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434457,"byte_end":434470,"line_start":349,"line_end":349,"column_start":9,"column_end":22},"name":"rng_algorithm","qualname":"::test_runner::config::Config::rng_algorithm","value":"test_runner::rng::RngAlgorithm","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" The RNG algorithm to use when not using a user-provided RNG.","sig":null,"attributes":[{"value":"/ The RNG algorithm to use when not using a user-provided RNG.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434114,"byte_end":434178,"line_start":342,"line_end":342,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434183,"byte_end":434186,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ The default is `RngAlgorithm::default()`, which can be overridden by","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434191,"byte_end":434263,"line_start":344,"line_end":344,"column_start":5,"column_end":77}},{"value":"/ setting the `PROPTEST_RNG_ALGORITHM` environment variable to one of the following:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434268,"byte_end":434354,"line_start":345,"line_end":345,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434359,"byte_end":434362,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ - `xs` — `RngAlgorithm::XorShift`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434367,"byte_end":434406,"line_start":347,"line_end":347,"column_start":5,"column_end":42}},{"value":"/ - `cc` — `RngAlgorithm::ChaCha`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434411,"byte_end":434448,"line_start":348,"line_end":348,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":7363},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434567,"byte_end":434582,"line_start":353,"line_end":353,"column_start":9,"column_end":24},"name":"_non_exhaustive","qualname":"::test_runner::config::Config::_non_exhaustive","value":"()","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435060,"byte_end":435070,"line_start":370,"line_end":370,"column_start":12,"column_end":22},"name":"with_cases","qualname":"<Config>::with_cases","value":"fn (cases: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `Config` only differing from the `default()` in the\n number of test cases required to pass the test successfully.","sig":null,"attributes":[{"value":"/ Constructs a `Config` only differing from the `default()` in the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434609,"byte_end":434677,"line_start":357,"line_end":357,"column_start":5,"column_end":73}},{"value":"/ number of test cases required to pass the test successfully.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434682,"byte_end":434746,"line_start":358,"line_end":358,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434751,"byte_end":434754,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ This is simply a more concise alternative to using field-record update","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434759,"byte_end":434833,"line_start":360,"line_end":360,"column_start":5,"column_end":79}},{"value":"/ syntax:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434838,"byte_end":434849,"line_start":361,"line_end":361,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434854,"byte_end":434857,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434862,"byte_end":434869,"line_start":363,"line_end":363,"column_start":5,"column_end":12}},{"value":"/ # use proptest::test_runner::Config;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434874,"byte_end":434914,"line_start":364,"line_end":364,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434919,"byte_end":434934,"line_start":365,"line_end":365,"column_start":5,"column_end":20}},{"value":"/     Config::with_cases(42),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434939,"byte_end":434970,"line_start":366,"line_end":366,"column_start":5,"column_end":36}},{"value":"/     Config { cases: 42, .. Config::default() }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434975,"byte_end":435025,"line_start":367,"line_end":367,"column_start":5,"column_end":55}},{"value":"/ );","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435030,"byte_end":435036,"line_start":368,"line_end":368,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435041,"byte_end":435048,"line_start":369,"line_end":369,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435655,"byte_end":435671,"line_start":390,"line_end":390,"column_start":12,"column_end":28},"name":"with_source_file","qualname":"<Config>::with_source_file","value":"fn (source_file: &'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `Config` only differing from the `default()` in the\n source_file of the present test.","sig":null,"attributes":[{"value":"/ Constructs a `Config` only differing from the `default()` in the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435180,"byte_end":435248,"line_start":377,"line_end":377,"column_start":5,"column_end":73}},{"value":"/ source_file of the present test.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435253,"byte_end":435289,"line_start":378,"line_end":378,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435294,"byte_end":435297,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ This is simply a more concise alternative to using field-record update","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435302,"byte_end":435376,"line_start":380,"line_end":380,"column_start":5,"column_end":79}},{"value":"/ syntax:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435381,"byte_end":435392,"line_start":381,"line_end":381,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435397,"byte_end":435400,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435405,"byte_end":435412,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"/ # use proptest::test_runner::Config;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435417,"byte_end":435457,"line_start":384,"line_end":384,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435462,"byte_end":435477,"line_start":385,"line_end":385,"column_start":5,"column_end":20}},{"value":"/     Config::with_source_file(\"computer/question\"),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435482,"byte_end":435536,"line_start":386,"line_end":386,"column_start":5,"column_end":59}},{"value":"/     Config { source_file: Some(\"computer/question\"), .. Config::default() }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435541,"byte_end":435620,"line_start":387,"line_end":387,"column_start":5,"column_end":84}},{"value":"/ );","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435625,"byte_end":435631,"line_start":388,"line_end":388,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435636,"byte_end":435643,"line_start":389,"line_end":389,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436514,"byte_end":436536,"line_start":416,"line_end":416,"column_start":12,"column_end":34},"name":"clone_with_source_file","qualname":"<Config>::clone_with_source_file","value":"fn (&self, source_file: &'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `Config` only differing from the provided Config instance, `self`,\n in the source_file of the present test.","sig":null,"attributes":[{"value":"/ Constructs a `Config` only differing from the provided Config instance, `self`,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435821,"byte_end":435904,"line_start":397,"line_end":397,"column_start":5,"column_end":88}},{"value":"/ in the source_file of the present test.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435909,"byte_end":435952,"line_start":398,"line_end":398,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435957,"byte_end":435960,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This is simply a more concise alternative to using field-record update","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":435965,"byte_end":436039,"line_start":400,"line_end":400,"column_start":5,"column_end":79}},{"value":"/ syntax:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436044,"byte_end":436055,"line_start":401,"line_end":401,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436060,"byte_end":436063,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436068,"byte_end":436075,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"/ # use proptest::test_runner::Config;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436080,"byte_end":436120,"line_start":404,"line_end":404,"column_start":5,"column_end":45}},{"value":"/ let a = Config::with_source_file(\"computer/question\");","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436125,"byte_end":436183,"line_start":405,"line_end":405,"column_start":5,"column_end":63}},{"value":"/ let b = a.clone_with_source_file(\"answer/42\");","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436188,"byte_end":436238,"line_start":406,"line_end":406,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436243,"byte_end":436258,"line_start":407,"line_end":407,"column_start":5,"column_end":20}},{"value":"/     a,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436263,"byte_end":436273,"line_start":408,"line_end":408,"column_start":5,"column_end":15}},{"value":"/     Config { source_file: Some(\"computer/question\"), .. Config::default() }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436278,"byte_end":436357,"line_start":409,"line_end":409,"column_start":5,"column_end":84}},{"value":"/ );","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436362,"byte_end":436368,"line_start":410,"line_end":410,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436373,"byte_end":436388,"line_start":411,"line_end":411,"column_start":5,"column_end":20}},{"value":"/     b,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436393,"byte_end":436403,"line_start":412,"line_end":412,"column_start":5,"column_end":15}},{"value":"/     Config { source_file: Some(\"answer/42\"), .. Config::default() }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436408,"byte_end":436479,"line_start":413,"line_end":413,"column_start":5,"column_end":76}},{"value":"/ );","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436484,"byte_end":436490,"line_start":414,"line_end":414,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436495,"byte_end":436502,"line_start":415,"line_end":415,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1545},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436882,"byte_end":436886,"line_start":426,"line_end":426,"column_start":12,"column_end":16},"name":"fork","qualname":"<Config>::fork","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether this configuration implies forking.","sig":null,"attributes":[{"value":"/ Return whether this configuration implies forking.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436694,"byte_end":436748,"line_start":422,"line_end":422,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436753,"byte_end":436756,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ This method exists even if the \"fork\" feature is disabled, in which","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436761,"byte_end":436832,"line_start":424,"line_end":424,"column_start":5,"column_end":76}},{"value":"/ case it simply returns false.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":436837,"byte_end":436870,"line_start":425,"line_end":425,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1547},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":437588,"byte_end":437595,"line_start":454,"line_end":454,"column_start":12,"column_end":19},"name":"timeout","qualname":"<Config>::timeout","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the configured timeout.","sig":null,"attributes":[{"value":"/ Returns the configured timeout.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":437383,"byte_end":437418,"line_start":449,"line_end":449,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":437423,"byte_end":437426,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ This method exists even if the \"timeout\" feature is disabled, in which","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":437431,"byte_end":437505,"line_start":451,"line_end":451,"column_start":5,"column_end":79}},{"value":"/ case it simply returns 0.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":437510,"byte_end":437539,"line_start":452,"line_end":452,"column_start":5,"column_end":34}},{"value":"cfg(not(feature = \"timeout\"))","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":437544,"byte_end":437576,"line_start":453,"line_end":453,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1548},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":437777,"byte_end":437793,"line_start":461,"line_end":461,"column_start":12,"column_end":28},"name":"max_shrink_iters","qualname":"<Config>::max_shrink_iters","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the configured limit on shrinking iterations.","sig":null,"attributes":[{"value":"/ Returns the configured limit on shrinking iterations.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":437633,"byte_end":437690,"line_start":458,"line_end":458,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":437695,"byte_end":437698,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ This takes into account the special \"automatic\" behaviour.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":437703,"byte_end":437765,"line_start":460,"line_end":460,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1549},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":438134,"byte_end":438150,"line_start":473,"line_end":473,"column_start":12,"column_end":28},"name":"__sugar_to_owned","qualname":"<Config>::__sugar_to_owned","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":438081,"byte_end":438103,"line_start":471,"line_end":471,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7373},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439530,"byte_end":439536,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"Reject","qualname":"::test_runner::errors::TestCaseError::Reject","value":"TestCaseError::Reject(Reason)","parent":{"krate":0,"index":7372},"children":[],"decl_id":null,"docs":" The input was not valid for the test case. This does not count as a\n test failure (nor a success); rather, it simply signals to generate\n a new input and try again.\n","sig":null,"attributes":[{"value":"/ The input was not valid for the test case. This does not count as a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439343,"byte_end":439414,"line_start":28,"line_end":28,"column_start":5,"column_end":76}},{"value":"/ test failure (nor a success); rather, it simply signals to generate","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439419,"byte_end":439490,"line_start":29,"line_end":29,"column_start":5,"column_end":76}},{"value":"/ a new input and try again.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439495,"byte_end":439525,"line_start":30,"line_end":30,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7376},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439595,"byte_end":439599,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Fail","qualname":"::test_runner::errors::TestCaseError::Fail","value":"TestCaseError::Fail(Reason)","parent":{"krate":0,"index":7372},"children":[],"decl_id":null,"docs":" The code under test failed the test.\n","sig":null,"attributes":[{"value":"/ The code under test failed the test.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439550,"byte_end":439590,"line_start":32,"line_end":32,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":7372},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439323,"byte_end":439336,"line_start":27,"line_end":27,"column_start":10,"column_end":23},"name":"TestCaseError","qualname":"::test_runner::errors::TestCaseError","value":"TestCaseError::{Reject, Fail}","parent":null,"children":[{"krate":0,"index":7373},{"krate":0,"index":7376}],"decl_id":null,"docs":" Errors which can be returned from test cases to indicate non-successful\n completion.","sig":null,"attributes":[{"value":"/ Errors which can be returned from test cases to indicate non-successful","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":438909,"byte_end":438984,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ completion.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":438985,"byte_end":439000,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439001,"byte_end":439004,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Note that in spite of the name, `TestCaseError` is currently *not* an","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439005,"byte_end":439078,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ instance of `Error`, since otherwise `impl<E : Error> From<E>` could not be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439079,"byte_end":439158,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ provided.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439159,"byte_end":439172,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439173,"byte_end":439176,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Any `Error` can be converted to a `TestCaseError`, which places","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439177,"byte_end":439244,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ `Error::display()` into the `Fail` case.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439245,"byte_end":439289,"line_start":25,"line_end":25,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1556},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439674,"byte_end":439688,"line_start":37,"line_end":37,"column_start":10,"column_end":24},"name":"TestCaseResult","qualname":"::test_runner::errors::TestCaseResult","value":"Result<(), TestCaseError>","parent":null,"children":[],"decl_id":null,"docs":" Convenience for the type returned by test cases.\n","sig":null,"attributes":[{"value":"/ Convenience for the type returned by test cases.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439612,"byte_end":439664,"line_start":36,"line_end":36,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440111,"byte_end":440117,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"reject","qualname":"<TestCaseError>::reject","value":"fn (reason: impl Into<Reason>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rejects the generated test input as invalid for this test case. This\n does not count as a test failure (nor a success); rather, it simply\n signals to generate a new input and try again.","sig":null,"attributes":[{"value":"/ Rejects the generated test input as invalid for this test case. This","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439744,"byte_end":439816,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ does not count as a test failure (nor a success); rather, it simply","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439821,"byte_end":439892,"line_start":41,"line_end":41,"column_start":5,"column_end":76}},{"value":"/ signals to generate a new input and try again.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439897,"byte_end":439947,"line_start":42,"line_end":42,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439952,"byte_end":439955,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ The string gives the location and context of the rejection, and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439960,"byte_end":440027,"line_start":44,"line_end":44,"column_start":5,"column_end":72}},{"value":"/ should be suitable for formatting like `Foo did X at {whence}`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440032,"byte_end":440099,"line_start":45,"line_end":45,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440376,"byte_end":440380,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"fail","qualname":"<TestCaseError>::fail","value":"fn (reason: impl Into<Reason>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The code under test failed the test.","sig":null,"attributes":[{"value":"/ The code under test failed the test.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440211,"byte_end":440251,"line_start":50,"line_end":50,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440256,"byte_end":440259,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ The string should indicate the location of the failure, but may","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440264,"byte_end":440331,"line_start":52,"line_end":52,"column_start":5,"column_end":72}},{"value":"/ generally be any string.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440336,"byte_end":440364,"line_start":53,"line_end":53,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7385},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441226,"byte_end":441231,"line_start":82,"line_end":82,"column_start":5,"column_end":10},"name":"Abort","qualname":"::test_runner::errors::TestError::Abort","value":"TestError::Abort(Reason)","parent":{"krate":0,"index":7383},"children":[],"decl_id":null,"docs":" The test was aborted for the given reason, for example, due to too many\n inputs having been rejected.\n","sig":null,"attributes":[{"value":"/ The test was aborted for the given reason, for example, due to too many","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441109,"byte_end":441184,"line_start":80,"line_end":80,"column_start":5,"column_end":80}},{"value":"/ inputs having been rejected.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441189,"byte_end":441221,"line_start":81,"line_end":81,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7388},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441416,"byte_end":441420,"line_start":86,"line_end":86,"column_start":5,"column_end":9},"name":"Fail","qualname":"::test_runner::errors::TestError::Fail","value":"TestError::Fail(Reason, T)","parent":{"krate":0,"index":7383},"children":[],"decl_id":null,"docs":" A failing test case was found. The string indicates where and/or why\n the test failed. The `T` is the minimal input found to reproduce the\n failure.\n","sig":null,"attributes":[{"value":"/ A failing test case was found. The string indicates where and/or why","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441245,"byte_end":441317,"line_start":83,"line_end":83,"column_start":5,"column_end":77}},{"value":"/ the test failed. The `T` is the minimal input found to reproduce the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441322,"byte_end":441394,"line_start":84,"line_end":84,"column_start":5,"column_end":77}},{"value":"/ failure.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441399,"byte_end":441411,"line_start":85,"line_end":85,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":7383},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441090,"byte_end":441099,"line_start":79,"line_end":79,"column_start":10,"column_end":19},"name":"TestError","qualname":"::test_runner::errors::TestError","value":"TestError::{Abort, Fail}","parent":null,"children":[{"krate":0,"index":7385},{"krate":0,"index":7388}],"decl_id":null,"docs":" A failure state from running test cases for a single test.\n","sig":null,"attributes":[{"value":"/ A failure state from running test cases for a single test.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440979,"byte_end":441041,"line_start":77,"line_end":77,"column_start":1,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7410},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448556,"byte_end":448559,"line_start":41,"line_end":41,"column_start":5,"column_end":8},"name":"Off","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::Off","value":"FileFailurePersistence::Off","parent":{"krate":0,"index":7409},"children":[],"decl_id":null,"docs":" Completely disables persistence of failing test cases.","sig":null,"attributes":[{"value":"/ Completely disables persistence of failing test cases.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448302,"byte_end":448360,"line_start":36,"line_end":36,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448365,"byte_end":448368,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This is semantically equivalent to `Direct(\"/dev/null\")` on Unix and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448373,"byte_end":448445,"line_start":38,"line_end":38,"column_start":5,"column_end":77}},{"value":"/ `Direct(\"NUL\")` on Windows (though it is internally handled by simply","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448450,"byte_end":448523,"line_start":39,"line_end":39,"column_start":5,"column_end":78}},{"value":"/ not doing any I/O).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448528,"byte_end":448551,"line_start":40,"line_end":40,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7412},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449602,"byte_end":449616,"line_start":60,"line_end":60,"column_start":5,"column_end":19},"name":"SourceParallel","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::SourceParallel","value":"FileFailurePersistence::SourceParallel(&'static str)","parent":{"krate":0,"index":7409},"children":[],"decl_id":null,"docs":" The path given to `TestRunner::set_source_file()` is parsed. The path\n is traversed up the directory tree until a directory containing a file\n named `lib.rs` or `main.rs` is found. A sibling to that directory with\n the name given by the string in this configuration is created, and a\n file with the same name and path relative to the source directory, but\n with the extension changed to `.txt`, is used.","sig":null,"attributes":[{"value":"/ The path given to `TestRunner::set_source_file()` is parsed. The path","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448565,"byte_end":448638,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ is traversed up the directory tree until a directory containing a file","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448643,"byte_end":448717,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/ named `lib.rs` or `main.rs` is found. A sibling to that directory with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448722,"byte_end":448796,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/ the name given by the string in this configuration is created, and a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448801,"byte_end":448873,"line_start":45,"line_end":45,"column_start":5,"column_end":77}},{"value":"/ file with the same name and path relative to the source directory, but","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448878,"byte_end":448952,"line_start":46,"line_end":46,"column_start":5,"column_end":79}},{"value":"/ with the extension changed to `.txt`, is used.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448957,"byte_end":449007,"line_start":47,"line_end":47,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449012,"byte_end":449015,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ For example, given a source path of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449020,"byte_end":449059,"line_start":49,"line_end":49,"column_start":5,"column_end":44}},{"value":"/ `/home/jsmith/code/project/src/foo/bar.rs` and a configuration of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449064,"byte_end":449133,"line_start":50,"line_end":50,"column_start":5,"column_end":74}},{"value":"/ `SourceParallel(\"proptest-regressions\")` (the default), assuming the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449138,"byte_end":449210,"line_start":51,"line_end":51,"column_start":5,"column_end":77}},{"value":"/ `src` directory has a `lib.rs` or `main.rs`, the resulting file would","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449215,"byte_end":449288,"line_start":52,"line_end":52,"column_start":5,"column_end":78}},{"value":"/ be `/home/jsmith/code/project/proptest-regressions/foo/bar.txt`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449293,"byte_end":449361,"line_start":53,"line_end":53,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449366,"byte_end":449369,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ If no `lib.rs` or `main.rs` can be found, a warning is printed and this","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449374,"byte_end":449449,"line_start":55,"line_end":55,"column_start":5,"column_end":80}},{"value":"/ behaves like `WithSource`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449454,"byte_end":449484,"line_start":56,"line_end":56,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449489,"byte_end":449492,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ If no source file has been configured, a warning is printed and this","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449497,"byte_end":449569,"line_start":58,"line_end":58,"column_start":5,"column_end":77}},{"value":"/ behaves like `Off`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449574,"byte_end":449597,"line_start":59,"line_end":59,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7415},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":450080,"byte_end":450090,"line_start":69,"line_end":69,"column_start":5,"column_end":15},"name":"WithSource","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::WithSource","value":"FileFailurePersistence::WithSource(&'static str)","parent":{"krate":0,"index":7409},"children":[],"decl_id":null,"docs":" The path given to `TestRunner::set_source_file()` is parsed. The\n extension of the path is changed to the string given in this\n configuration, and that filename is used.","sig":null,"attributes":[{"value":"/ The path given to `TestRunner::set_source_file()` is parsed. The","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449636,"byte_end":449704,"line_start":61,"line_end":61,"column_start":5,"column_end":73}},{"value":"/ extension of the path is changed to the string given in this","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449709,"byte_end":449773,"line_start":62,"line_end":62,"column_start":5,"column_end":69}},{"value":"/ configuration, and that filename is used.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449778,"byte_end":449823,"line_start":63,"line_end":63,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449828,"byte_end":449831,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ For example, given a source path of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449836,"byte_end":449875,"line_start":65,"line_end":65,"column_start":5,"column_end":44}},{"value":"/ `/home/jsmith/code/project/src/foo/bar.rs` and a configuration of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449880,"byte_end":449949,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ `WithSource(\"regressions\")`, the resulting path would be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":449954,"byte_end":450014,"line_start":67,"line_end":67,"column_start":5,"column_end":65}},{"value":"/ `/home/jsmith/code/project/src/foo/bar.regressions`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":450019,"byte_end":450075,"line_start":68,"line_end":68,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7418},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":450222,"byte_end":450228,"line_start":72,"line_end":72,"column_start":5,"column_end":11},"name":"Direct","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::Direct","value":"FileFailurePersistence::Direct(&'static str)","parent":{"krate":0,"index":7409},"children":[],"decl_id":null,"docs":" The string given in this option is directly used as a file path without\n any further processing.\n","sig":null,"attributes":[{"value":"/ The string given in this option is directly used as a file path without","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":450110,"byte_end":450185,"line_start":70,"line_end":70,"column_start":5,"column_end":80}},{"value":"/ any further processing.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":450190,"byte_end":450217,"line_start":71,"line_end":71,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7421},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":450294,"byte_end":450308,"line_start":75,"line_end":75,"column_start":5,"column_end":19},"name":"_NonExhaustive","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::_NonExhaustive","value":"FileFailurePersistence::_NonExhaustive","parent":{"krate":0,"index":7409},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":450267,"byte_end":450289,"line_start":74,"line_end":74,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":7409},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448273,"byte_end":448295,"line_start":35,"line_end":35,"column_start":10,"column_end":32},"name":"FileFailurePersistence","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence","value":"FileFailurePersistence::{Off, SourceParallel, WithSource, Direct, _NonExhaustive}","parent":null,"children":[{"krate":0,"index":7410},{"krate":0,"index":7412},{"krate":0,"index":7415},{"krate":0,"index":7418},{"krate":0,"index":7421}],"decl_id":null,"docs":" Describes how failing test cases are persisted.","sig":null,"attributes":[{"value":"/ Describes how failing test cases are persisted.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":447865,"byte_end":447916,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":447917,"byte_end":447920,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Note that file names in this enum are `&str` rather than `&Path` since","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":447921,"byte_end":447995,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ constant functions are not yet in Rust stable as of 2017-12-16.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":447996,"byte_end":448063,"line_start":30,"line_end":30,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448064,"byte_end":448067,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ In all cases, if a derived path references a directory which does not yet","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448068,"byte_end":448145,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ exist, proptest will attempt to create all necessary parent directories.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":448146,"byte_end":448222,"line_start":33,"line_end":33,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7445},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/map.rs","byte_start":466598,"byte_end":466619,"line_start":21,"line_end":21,"column_start":12,"column_end":33},"name":"MapFailurePersistence","qualname":"::test_runner::failure_persistence::map::MapFailurePersistence","value":"MapFailurePersistence { map }","parent":null,"children":[{"krate":0,"index":7446}],"decl_id":null,"docs":" Failure persistence option that loads and saves seeds in memory\n on the heap. This may be useful when accumulating test failures\n across multiple `TestRunner` instances for external reporting\n or batched persistence.\n","sig":null,"attributes":[{"value":"/ Failure persistence option that loads and saves seeds in memory","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/map.rs","byte_start":466313,"byte_end":466380,"line_start":16,"line_end":16,"column_start":1,"column_end":68}},{"value":"/ on the heap. This may be useful when accumulating test failures","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/map.rs","byte_start":466381,"byte_end":466448,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ across multiple `TestRunner` instances for external reporting","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/map.rs","byte_start":466449,"byte_end":466514,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/ or batched persistence.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/map.rs","byte_start":466515,"byte_end":466542,"line_start":19,"line_end":19,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":7446},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/map.rs","byte_start":466673,"byte_end":466676,"line_start":23,"line_end":23,"column_start":9,"column_end":12},"name":"map","qualname":"::test_runner::failure_persistence::map::MapFailurePersistence::map","value":"std::collections::BTreeMap<&'static str, std::collections::BTreeSet<test_runner::failure_persistence::PersistedSeed>>","parent":{"krate":0,"index":7445},"children":[],"decl_id":null,"docs":" Backing map, keyed by source_file.\n","sig":null,"attributes":[{"value":"/ Backing map, keyed by source_file.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/map.rs","byte_start":466626,"byte_end":466664,"line_start":22,"line_end":22,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":7466},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443059,"byte_end":443072,"line_start":33,"line_end":33,"column_start":12,"column_end":25},"name":"PersistedSeed","qualname":"::test_runner::failure_persistence::PersistedSeed","value":"","parent":null,"children":[],"decl_id":null,"docs":" Opaque struct representing a seed which can be persisted.","sig":null,"attributes":[{"value":"/ Opaque struct representing a seed which can be persisted.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":442808,"byte_end":442869,"line_start":28,"line_end":28,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":442870,"byte_end":442873,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The `Display` and `FromStr` implementations go to and from the format","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":442874,"byte_end":442947,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ Proptest uses for its persistence file.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":442948,"byte_end":442991,"line_start":31,"line_end":31,"column_start":1,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":1676},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443754,"byte_end":443772,"line_start":55,"line_end":55,"column_start":11,"column_end":29},"name":"FailurePersistence","qualname":"::test_runner::failure_persistence::FailurePersistence","value":"FailurePersistence: Send + Sync + fmt::Debug","parent":null,"children":[{"krate":0,"index":1677},{"krate":0,"index":1679},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686}],"decl_id":null,"docs":" Provides external persistence for historical test failures by storing seeds.","sig":null,"attributes":[{"value":"/ Provides external persistence for historical test failures by storing seeds.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443414,"byte_end":443494,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443495,"byte_end":443498,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ **Note**: Implementing `load_persisted_failures` and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443499,"byte_end":443555,"line_start":51,"line_end":51,"column_start":1,"column_end":57}},{"value":"/ `save_persisted_failures` is **deprecated** and these methods will be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443556,"byte_end":443629,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ removed in proptest 0.10.0. Instead, implement `load_persisted_failures2`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443630,"byte_end":443707,"line_start":53,"line_end":53,"column_start":1,"column_end":78}},{"value":"/ and `save_persisted_failures2`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443708,"byte_end":443743,"line_start":54,"line_end":54,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1677},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444236,"byte_end":444260,"line_start":64,"line_end":64,"column_start":8,"column_end":32},"name":"load_persisted_failures2","qualname":"::test_runner::failure_persistence::FailurePersistence::load_persisted_failures2","value":"fn (&self, source_file: Option<&'static str>) -> Vec<PersistedSeed>","parent":{"krate":0,"index":1676},"children":[],"decl_id":null,"docs":" Supply seeds associated with the given `source_file` that may be used\n by a `TestRunner`'s random number generator in order to consistently\n recreate a previously-failing `Strategy`-provided value.","sig":null,"attributes":[{"value":"/ Supply seeds associated with the given `source_file` that may be used","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443805,"byte_end":443878,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ by a `TestRunner`'s random number generator in order to consistently","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443883,"byte_end":443955,"line_start":57,"line_end":57,"column_start":5,"column_end":77}},{"value":"/ recreate a previously-failing `Strategy`-provided value.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443960,"byte_end":444020,"line_start":58,"line_end":58,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444025,"byte_end":444028,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ The default implementation is **for backwards compatibility**. It","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444033,"byte_end":444102,"line_start":60,"line_end":60,"column_start":5,"column_end":74}},{"value":"/ delegates to `load_persisted_failures` and converts the results into","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444107,"byte_end":444179,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ XorShift seeds.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444184,"byte_end":444203,"line_start":62,"line_end":62,"column_start":5,"column_end":24}},{"value":"allow(deprecated)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444208,"byte_end":444228,"line_start":63,"line_end":63,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1679},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444768,"byte_end":444791,"line_start":80,"line_end":80,"column_start":8,"column_end":31},"name":"load_persisted_failures","qualname":"::test_runner::failure_persistence::FailurePersistence::load_persisted_failures","value":"fn (&self, source_file: Option<&'static str>) -> Vec<[u8; 16]>","parent":{"krate":0,"index":1676},"children":[],"decl_id":null,"docs":" Use `load_persisted_failures2` instead.","sig":null,"attributes":[{"value":"/ Use `load_persisted_failures2` instead.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444520,"byte_end":444563,"line_start":74,"line_end":74,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444568,"byte_end":444571,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ This function inadvertently exposes the implementation of seeds prior","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444576,"byte_end":444649,"line_start":76,"line_end":76,"column_start":5,"column_end":78}},{"value":"/ to Proptest 0.9.1 and only works with XorShift seeds.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444654,"byte_end":444711,"line_start":77,"line_end":77,"column_start":5,"column_end":62}},{"value":"deprecated","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444716,"byte_end":444729,"line_start":78,"line_end":78,"column_start":5,"column_end":18}},{"value":"allow(unused_variables)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444734,"byte_end":444760,"line_start":79,"line_end":79,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445218,"byte_end":445241,"line_start":92,"line_end":92,"column_start":8,"column_end":31},"name":"save_persisted_failure2","qualname":"::test_runner::failure_persistence::FailurePersistence::save_persisted_failure2","value":"fn (&mut self, source_file: Option<&'static str>, seed: PersistedSeed, shrunken_value: &dyn fmt::Debug) -> ()","parent":{"krate":0,"index":1676},"children":[],"decl_id":null,"docs":" Store a new failure-generating seed associated with the given `source_file`.","sig":null,"attributes":[{"value":"/ Store a new failure-generating seed associated with the given `source_file`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":444947,"byte_end":445027,"line_start":87,"line_end":87,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445032,"byte_end":445035,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ The default implementation is **for backwards compatibility**. It","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445040,"byte_end":445109,"line_start":89,"line_end":89,"column_start":5,"column_end":74}},{"value":"/ delegates to `save_persisted_failure` if `seed` is a XorShift seed.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445114,"byte_end":445185,"line_start":90,"line_end":90,"column_start":5,"column_end":76}},{"value":"allow(deprecated)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445190,"byte_end":445210,"line_start":91,"line_end":91,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445827,"byte_end":445849,"line_start":112,"line_end":112,"column_start":8,"column_end":30},"name":"save_persisted_failure","qualname":"::test_runner::failure_persistence::FailurePersistence::save_persisted_failure","value":"fn (&mut self, source_file: Option<&'static str>, seed: [u8; 16], shrunken_value: &dyn fmt::Debug) -> ()","parent":{"krate":0,"index":1676},"children":[],"decl_id":null,"docs":" Use `save_persisted_failures2` instead.","sig":null,"attributes":[{"value":"/ Use `save_persisted_failures2` instead.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445579,"byte_end":445622,"line_start":106,"line_end":106,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445627,"byte_end":445630,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This function inadvertently exposes the implementation of seeds prior","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445635,"byte_end":445708,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ to Proptest 0.9.1 and only works with XorShift seeds.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445713,"byte_end":445770,"line_start":109,"line_end":109,"column_start":5,"column_end":62}},{"value":"deprecated","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445775,"byte_end":445788,"line_start":110,"line_end":110,"column_start":5,"column_end":18}},{"value":"allow(unused_variables)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":445793,"byte_end":445819,"line_start":111,"line_end":111,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":446132,"byte_end":446141,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"box_clone","qualname":"::test_runner::failure_persistence::FailurePersistence::box_clone","value":"fn (&self) -> Box<dyn FailurePersistence>","parent":{"krate":0,"index":1676},"children":[],"decl_id":null,"docs":" Delegate method for producing a trait object usable with `Clone`\n","sig":null,"attributes":[{"value":"/ Delegate method for producing a trait object usable with `Clone`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":446056,"byte_end":446124,"line_start":121,"line_end":121,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1685},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":446269,"byte_end":446271,"line_start":125,"line_end":125,"column_start":8,"column_end":10},"name":"eq","qualname":"::test_runner::failure_persistence::FailurePersistence::eq","value":"fn (&self, other: &dyn FailurePersistence) -> bool","parent":{"krate":0,"index":1676},"children":[],"decl_id":null,"docs":" Equality testing delegate required due to constraints of trait objects.\n","sig":null,"attributes":[{"value":"/ Equality testing delegate required due to constraints of trait objects.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":446186,"byte_end":446261,"line_start":124,"line_end":124,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":446382,"byte_end":446388,"line_start":128,"line_end":128,"column_start":8,"column_end":14},"name":"as_any","qualname":"::test_runner::failure_persistence::FailurePersistence::as_any","value":"fn (&self) -> &dyn Any","parent":{"krate":0,"index":1676},"children":[],"decl_id":null,"docs":" Assistant method for trait object comparison.\n","sig":null,"attributes":[{"value":"/ Assistant method for trait object comparison.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":446325,"byte_end":446374,"line_start":127,"line_end":127,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":7488},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471726,"byte_end":471732,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"name":"Reason","qualname":"::test_runner::reason::Reason","value":"","parent":null,"children":[],"decl_id":null,"docs":" The reason for why something, such as a generated value, was rejected.","sig":null,"attributes":[{"value":"/ The reason for why something, such as a generated value, was rejected.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471373,"byte_end":471447,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471448,"byte_end":471451,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Currently this is merely a wrapper around a message, but more properties","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471452,"byte_end":471528,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ may be added in the future.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471529,"byte_end":471560,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471561,"byte_end":471564,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is constructed via `.into()` on a `String`, `&'static str`, or","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471565,"byte_end":471636,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/ `Box<str>`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471637,"byte_end":471652,"line_start":18,"line_end":18,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471952,"byte_end":471959,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"message","qualname":"<Reason>::message","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return the message for this `Reason`.","sig":null,"attributes":[{"value":"/ Return the message for this `Reason`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471772,"byte_end":471813,"line_start":23,"line_end":23,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471818,"byte_end":471821,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ The message is intended for human consumption, and is not guaranteed to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471826,"byte_end":471901,"line_start":25,"line_end":25,"column_start":5,"column_end":80}},{"value":"/ have any format in particular.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471906,"byte_end":471940,"line_start":26,"line_end":26,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":7513},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473306,"byte_end":473320,"line_start":24,"line_end":24,"column_start":12,"column_end":26},"name":"ResultCacheKey","qualname":"::test_runner::result_cache::ResultCacheKey","value":"ResultCacheKey {  }","parent":null,"children":[{"krate":0,"index":7515}],"decl_id":null,"docs":" A key used for the result cache.","sig":null,"attributes":[{"value":"/ A key used for the result cache.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":472982,"byte_end":473018,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473019,"byte_end":473022,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The capabilities of this structure are currently quite limited; all one can","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473023,"byte_end":473102,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ do with safe code is get the `&dyn Debug` of the test input value. This may","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473103,"byte_end":473182,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ improve in the future, particularly at such a time that specialisation","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473183,"byte_end":473257,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ becomes stable.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473258,"byte_end":473277,"line_start":22,"line_end":22,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1717},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473547,"byte_end":473558,"line_start":34,"line_end":34,"column_start":12,"column_end":23},"name":"value_debug","qualname":"<ResultCacheKey>::value_debug","value":"fn (&self) -> &dyn fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" Return the test input value as an `&dyn Debug`.\n","sig":null,"attributes":[{"value":"/ Return the test input value as an `&dyn Debug`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473484,"byte_end":473535,"line_start":33,"line_end":33,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":1718},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473678,"byte_end":473689,"line_start":40,"line_end":40,"column_start":11,"column_end":22},"name":"ResultCache","qualname":"::test_runner::result_cache::ResultCache","value":"ResultCache","parent":null,"children":[{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721}],"decl_id":null,"docs":" An object which can cache the outcomes of tests.\n","sig":null,"attributes":[{"value":"/ An object which can cache the outcomes of tests.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473615,"byte_end":473667,"line_start":39,"line_end":39,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1719},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473969,"byte_end":473972,"line_start":46,"line_end":46,"column_start":8,"column_end":11},"name":"key","qualname":"::test_runner::result_cache::ResultCache::key","value":"fn (&self, key: &ResultCacheKey) -> u64","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" Convert the given cache key into a `u64` representing that value. The\n u64 is used as the key below.","sig":null,"attributes":[{"value":"/ Convert the given cache key into a `u64` representing that value. The","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473696,"byte_end":473769,"line_start":41,"line_end":41,"column_start":5,"column_end":78}},{"value":"/ u64 is used as the key below.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473774,"byte_end":473807,"line_start":42,"line_end":42,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473812,"byte_end":473815,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ This is a separate step so that ownership of the key value can be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473820,"byte_end":473889,"line_start":44,"line_end":44,"column_start":5,"column_end":74}},{"value":"/ handed off to user code without needing to be able to clone it.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473894,"byte_end":473961,"line_start":45,"line_end":45,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474242,"byte_end":474245,"line_start":51,"line_end":51,"column_start":8,"column_end":11},"name":"put","qualname":"::test_runner::result_cache::ResultCache::put","value":"fn (&mut self, key: u64, result: &TestCaseResult) -> ()","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" Save `result` as the outcome associated with the test input in `key`.","sig":null,"attributes":[{"value":"/ Save `result` as the outcome associated with the test input in `key`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474014,"byte_end":474087,"line_start":47,"line_end":47,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474092,"byte_end":474095,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ `result` is passed as a reference so that the decision to clone depends","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474100,"byte_end":474175,"line_start":49,"line_end":49,"column_start":5,"column_end":80}},{"value":"/ on whether the cache actually plans on storing it.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474180,"byte_end":474234,"line_start":50,"line_end":50,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474432,"byte_end":474435,"line_start":54,"line_end":54,"column_start":8,"column_end":11},"name":"get","qualname":"::test_runner::result_cache::ResultCache::get","value":"fn (&self, key: u64) -> Option<&TestCaseResult>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" If `put()` has been called with a semantically equivalent `key`, return\n the saved result. Otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `put()` has been called with a semantically equivalent `key`, return","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474297,"byte_end":474372,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"/ the saved result. Otherwise, return `None`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474377,"byte_end":474424,"line_start":53,"line_end":53,"column_start":5,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1737},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":475681,"byte_end":475699,"line_start":100,"line_end":100,"column_start":8,"column_end":26},"name":"basic_result_cache","qualname":"::test_runner::result_cache::basic_result_cache","value":"fn () -> Box<dyn ResultCache>","parent":null,"children":[],"decl_id":null,"docs":" A basic result cache.","sig":null,"attributes":[{"value":"/ A basic result cache.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":475554,"byte_end":475579,"line_start":96,"line_end":96,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":475580,"byte_end":475583,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ Values are identified by their `Debug` string representation.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":475584,"byte_end":475649,"line_start":98,"line_end":98,"column_start":1,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":475650,"byte_end":475673,"line_start":99,"line_end":99,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":1744},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":476153,"byte_end":476170,"line_start":118,"line_end":118,"column_start":8,"column_end":25},"name":"noop_result_cache","qualname":"::test_runner::result_cache::noop_result_cache","value":"fn () -> Box<dyn ResultCache>","parent":null,"children":[],"decl_id":null,"docs":" A result cache that does nothing.","sig":null,"attributes":[{"value":"/ A result cache that does nothing.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":476040,"byte_end":476077,"line_start":115,"line_end":115,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":476078,"byte_end":476081,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ This is the default value of `ProptestConfig.result_cache`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":476082,"byte_end":476145,"line_start":117,"line_end":117,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7528},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477635,"byte_end":477643,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"XorShift","qualname":"::test_runner::rng::RngAlgorithm::XorShift","value":"RngAlgorithm::XorShift","parent":{"krate":0,"index":7527},"children":[],"decl_id":null,"docs":" The [XorShift](https://rust-random.github.io/rand/rand_xorshift/struct.XorShiftRng.html)\n algorithm. This was the default up through and including Proptest 0.9.0.","sig":null,"attributes":[{"value":"/ The [XorShift](https://rust-random.github.io/rand/rand_xorshift/struct.XorShiftRng.html)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477198,"byte_end":477290,"line_start":26,"line_end":26,"column_start":5,"column_end":97}},{"value":"/ algorithm. This was the default up through and including Proptest 0.9.0.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477295,"byte_end":477371,"line_start":27,"line_end":27,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477376,"byte_end":477379,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ It is faster than ChaCha but produces lower quality randomness and has","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477384,"byte_end":477458,"line_start":29,"line_end":29,"column_start":5,"column_end":79}},{"value":"/ some pathological cases where it may fail to produce outputs that are","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477463,"byte_end":477536,"line_start":30,"line_end":30,"column_start":5,"column_end":78}},{"value":"/ random even to casual observation.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477541,"byte_end":477579,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477584,"byte_end":477587,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ The seed must be exactly 16 bytes.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477592,"byte_end":477630,"line_start":33,"line_end":33,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7530},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477855,"byte_end":477861,"line_start":39,"line_end":39,"column_start":5,"column_end":11},"name":"ChaCha","qualname":"::test_runner::rng::RngAlgorithm::ChaCha","value":"RngAlgorithm::ChaCha","parent":{"krate":0,"index":7527},"children":[],"decl_id":null,"docs":" The [ChaCha](https://rust-random.github.io/rand/rand_chacha/struct.ChaChaRng.html)\n algorithm. This became the default with Proptest 0.9.1.","sig":null,"attributes":[{"value":"/ The [ChaCha](https://rust-random.github.io/rand/rand_chacha/struct.ChaChaRng.html)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477649,"byte_end":477735,"line_start":35,"line_end":35,"column_start":5,"column_end":91}},{"value":"/ algorithm. This became the default with Proptest 0.9.1.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477740,"byte_end":477799,"line_start":36,"line_end":36,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477804,"byte_end":477807,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The seed must be exactly 32 bytes.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477812,"byte_end":477850,"line_start":38,"line_end":38,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7532},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478473,"byte_end":478484,"line_start":52,"line_end":52,"column_start":5,"column_end":16},"name":"PassThrough","qualname":"::test_runner::rng::RngAlgorithm::PassThrough","value":"RngAlgorithm::PassThrough","parent":{"krate":0,"index":7527},"children":[],"decl_id":null,"docs":" This is not an actual RNG algorithm, but instead returns data directly\n from its \"seed\".","sig":null,"attributes":[{"value":"/ This is not an actual RNG algorithm, but instead returns data directly","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477867,"byte_end":477941,"line_start":40,"line_end":40,"column_start":5,"column_end":79}},{"value":"/ from its \"seed\".","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477946,"byte_end":477966,"line_start":41,"line_end":41,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477971,"byte_end":477974,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ This is useful when Proptest is being driven from some other entropy","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477979,"byte_end":478051,"line_start":43,"line_end":43,"column_start":5,"column_end":77}},{"value":"/ source, such as a fuzzer.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478056,"byte_end":478085,"line_start":44,"line_end":44,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478090,"byte_end":478093,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ If the seed is depleted, the RNG will return 0s forever.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478098,"byte_end":478158,"line_start":46,"line_end":46,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478163,"byte_end":478166,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Note that in cases where a new RNG is to be derived from an existing","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478171,"byte_end":478243,"line_start":48,"line_end":48,"column_start":5,"column_end":77}},{"value":"/ one, *the data is split evenly between them*, regardless of how much","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478248,"byte_end":478320,"line_start":49,"line_end":49,"column_start":5,"column_end":77}},{"value":"/ entropy is actually needed. This means that combinators like","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478325,"byte_end":478389,"line_start":50,"line_end":50,"column_start":5,"column_end":69}},{"value":"/ `prop_perturb` and `prop_flat_map` can require extremely large inputs.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478394,"byte_end":478468,"line_start":51,"line_end":51,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7534},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478536,"byte_end":478550,"line_start":55,"line_end":55,"column_start":5,"column_end":19},"name":"_NonExhaustive","qualname":"::test_runner::rng::RngAlgorithm::_NonExhaustive","value":"RngAlgorithm::_NonExhaustive","parent":{"krate":0,"index":7527},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478490,"byte_end":478512,"line_start":53,"line_end":53,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":7527},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477179,"byte_end":477191,"line_start":25,"line_end":25,"column_start":10,"column_end":22},"name":"RngAlgorithm","qualname":"::test_runner::rng::RngAlgorithm","value":"RngAlgorithm::{XorShift, ChaCha, PassThrough, _NonExhaustive}","parent":null,"children":[{"krate":0,"index":7528},{"krate":0,"index":7530},{"krate":0,"index":7532},{"krate":0,"index":7534}],"decl_id":null,"docs":" Identifies a particular RNG algorithm supported by proptest.","sig":null,"attributes":[{"value":"/ Identifies a particular RNG algorithm supported by proptest.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":476853,"byte_end":476917,"line_start":19,"line_end":19,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":476918,"byte_end":476921,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Proptest supports dynamic configuration of algorithms to allow it to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":476922,"byte_end":476994,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ continue operating with persisted regression files and to allow the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":476995,"byte_end":477066,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ configuration to be expressed in the `Config` struct.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":477067,"byte_end":477124,"line_start":23,"line_end":23,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":7547},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":479724,"byte_end":479731,"line_start":100,"line_end":100,"column_start":12,"column_end":19},"name":"TestRng","qualname":"::test_runner::rng::TestRng","value":"TestRng {  }","parent":null,"children":[{"krate":0,"index":7548}],"decl_id":null,"docs":" Proptest's random number generator.\n","sig":null,"attributes":[{"value":"/ Proptest's random number generator.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":479649,"byte_end":479688,"line_start":98,"line_end":98,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486810,"byte_end":486819,"line_start":329,"line_end":329,"column_start":12,"column_end":21},"name":"from_seed","qualname":"<TestRng>::from_seed","value":"fn (algorithm: RngAlgorithm, seed: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new RNG with the given algorithm and seed.","sig":null,"attributes":[{"value":"/ Create a new RNG with the given algorithm and seed.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486459,"byte_end":486514,"line_start":320,"line_end":320,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486519,"byte_end":486522,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ Any RNG created with the same algorithm-seed pair will produce the same","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486527,"byte_end":486602,"line_start":322,"line_end":322,"column_start":5,"column_end":80}},{"value":"/ sequence of values on all systems and all supporting versions of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486607,"byte_end":486675,"line_start":323,"line_end":323,"column_start":5,"column_end":73}},{"value":"/ proptest.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486680,"byte_end":486693,"line_start":324,"line_end":324,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486698,"byte_end":486701,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486706,"byte_end":486719,"line_start":326,"line_end":326,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486724,"byte_end":486727,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ Panics if `seed` is not an appropriate length for `algorithm`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486732,"byte_end":486798,"line_start":328,"line_end":328,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490987,"byte_end":491004,"line_start":431,"line_end":431,"column_start":12,"column_end":29},"name":"deterministic_rng","qualname":"<TestRng>::deterministic_rng","value":"fn (algorithm: RngAlgorithm) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a `TestRng` with a particular hard-coded seed.","sig":null,"attributes":[{"value":"/ Returns a `TestRng` with a particular hard-coded seed.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490128,"byte_end":490186,"line_start":417,"line_end":417,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490191,"byte_end":490194,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ The seed value will always be the same for a particular version of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490199,"byte_end":490269,"line_start":419,"line_end":419,"column_start":5,"column_end":75}},{"value":"/ Proptest and algorithm, but may change across releases.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490274,"byte_end":490333,"line_start":420,"line_end":420,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490338,"byte_end":490341,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ This is useful for testing things like strategy implementations without","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490346,"byte_end":490421,"line_start":422,"line_end":422,"column_start":5,"column_end":80}},{"value":"/ risking getting \"unlucky\" RNGs which deviate from average behaviour","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490426,"byte_end":490497,"line_start":423,"line_end":423,"column_start":5,"column_end":76}},{"value":"/ enough to cause spurious failures. For example, a strategy for `bool`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490502,"byte_end":490575,"line_start":424,"line_end":424,"column_start":5,"column_end":78}},{"value":"/ which is supposed to produce `true` 50% of the time might have a test","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490580,"byte_end":490653,"line_start":425,"line_end":425,"column_start":5,"column_end":78}},{"value":"/ which checks that the distribution is \"close enough\" to 50%. If every","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490658,"byte_end":490731,"line_start":426,"line_end":426,"column_start":5,"column_end":78}},{"value":"/ test run starts with a different RNG, occasionally there will be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490736,"byte_end":490804,"line_start":427,"line_end":427,"column_start":5,"column_end":73}},{"value":"/ spurious test failures when the RNG happens to produce a very skewed","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490809,"byte_end":490881,"line_start":428,"line_end":428,"column_start":5,"column_end":77}},{"value":"/ distribution. Using this or `TestRunner::deterministic()` avoids such","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490886,"byte_end":490959,"line_start":429,"line_end":429,"column_start":5,"column_end":78}},{"value":"/ issues.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":490964,"byte_end":490975,"line_start":430,"line_end":430,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":7606},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":498654,"byte_end":498664,"line_start":69,"line_end":69,"column_start":12,"column_end":22},"name":"TestRunner","qualname":"::test_runner::runner::TestRunner","value":"TestRunner {  }","parent":null,"children":[{"krate":0,"index":7607},{"krate":0,"index":7608},{"krate":0,"index":7609},{"krate":0,"index":7610},{"krate":0,"index":7611},{"krate":0,"index":7612},{"krate":0,"index":7613},{"krate":0,"index":7614}],"decl_id":null,"docs":" State used when running a proptest test.\n","sig":null,"attributes":[{"value":"/ State used when running a proptest test.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":498581,"byte_end":498625,"line_start":67,"line_end":67,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505205,"byte_end":505208,"line_start":302,"line_end":302,"column_start":12,"column_end":15},"name":"new","qualname":"<TestRunner>::new","value":"fn (config: Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a fresh `TestRunner` with the given configuration.","sig":null,"attributes":[{"value":"/ Create a fresh `TestRunner` with the given configuration.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":504826,"byte_end":504887,"line_start":294,"line_end":294,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":504892,"byte_end":504895,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ The runner will use an RNG with a generated seed and the default","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":504900,"byte_end":504968,"line_start":296,"line_end":296,"column_start":5,"column_end":73}},{"value":"/ algorithm.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":504973,"byte_end":504987,"line_start":297,"line_end":297,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":504992,"byte_end":504995,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ In `no_std` environments, every `TestRunner` will use the same","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505000,"byte_end":505066,"line_start":299,"line_end":299,"column_start":5,"column_end":71}},{"value":"/ hard-coded seed. This seed is not contractually guaranteed and may be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505071,"byte_end":505144,"line_start":300,"line_end":300,"column_start":5,"column_end":78}},{"value":"/ changed between releases without notice.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505149,"byte_end":505193,"line_start":301,"line_end":301,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1859},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505888,"byte_end":505901,"line_start":322,"line_end":322,"column_start":12,"column_end":25},"name":"deterministic","qualname":"<TestRunner>::deterministic","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a fresh `TestRunner` with the standard deterministic RNG.","sig":null,"attributes":[{"value":"/ Create a fresh `TestRunner` with the standard deterministic RNG.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505366,"byte_end":505434,"line_start":307,"line_end":307,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505439,"byte_end":505442,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ This is sugar for the following:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505447,"byte_end":505483,"line_start":309,"line_end":309,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505488,"byte_end":505491,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505496,"byte_end":505507,"line_start":311,"line_end":311,"column_start":5,"column_end":16}},{"value":"/ # use proptest::test_runner::*;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505512,"byte_end":505547,"line_start":312,"line_end":312,"column_start":5,"column_end":40}},{"value":"/ let config = Config::default();","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505552,"byte_end":505587,"line_start":313,"line_end":313,"column_start":5,"column_end":40}},{"value":"/ let algorithm = config.rng_algorithm;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505592,"byte_end":505633,"line_start":314,"line_end":314,"column_start":5,"column_end":46}},{"value":"/ TestRunner::new_with_rng(","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505638,"byte_end":505667,"line_start":315,"line_end":315,"column_start":5,"column_end":34}},{"value":"/     config,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505672,"byte_end":505687,"line_start":316,"line_end":316,"column_start":5,"column_end":20}},{"value":"/     TestRng::deterministic_rng(algorithm));","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505692,"byte_end":505739,"line_start":317,"line_end":317,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505744,"byte_end":505751,"line_start":318,"line_end":318,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505756,"byte_end":505759,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Refer to `TestRng::deterministic_rng()` for more information on the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505764,"byte_end":505835,"line_start":320,"line_end":320,"column_start":5,"column_end":76}},{"value":"/ properties of the RNG used here.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":505840,"byte_end":505876,"line_start":321,"line_end":321,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":506172,"byte_end":506184,"line_start":329,"line_end":329,"column_start":12,"column_end":24},"name":"new_with_rng","qualname":"<TestRunner>::new_with_rng","value":"fn (config: Config, rng: TestRng) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a fresh `TestRunner` with the given configuration and RNG.\n","sig":null,"attributes":[{"value":"/ Create a fresh `TestRunner` with the given configuration and RNG.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":506091,"byte_end":506160,"line_start":328,"line_end":328,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507211,"byte_end":507214,"line_start":359,"line_end":359,"column_start":12,"column_end":15},"name":"rng","qualname":"<TestRunner>::rng","value":"fn (&mut self) -> &mut TestRng","parent":null,"children":[],"decl_id":null,"docs":" Returns the RNG for this test run.\n","sig":null,"attributes":[{"value":"/ Returns the RNG for this test run.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507161,"byte_end":507199,"line_start":358,"line_end":358,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507377,"byte_end":507384,"line_start":365,"line_end":365,"column_start":12,"column_end":19},"name":"new_rng","qualname":"<TestRunner>::new_rng","value":"fn (&mut self) -> TestRng","parent":null,"children":[],"decl_id":null,"docs":" Create a new, independent but deterministic RNG from the RNG in this\n runner.\n","sig":null,"attributes":[{"value":"/ Create a new, independent but deterministic RNG from the RNG in this","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507277,"byte_end":507349,"line_start":363,"line_end":363,"column_start":5,"column_end":77}},{"value":"/ runner.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507354,"byte_end":507365,"line_start":364,"line_end":364,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507504,"byte_end":507510,"line_start":370,"line_end":370,"column_start":12,"column_end":18},"name":"config","qualname":"<TestRunner>::config","value":"fn (&self) -> &Config","parent":null,"children":[],"decl_id":null,"docs":" Returns the configuration of this runner.\n","sig":null,"attributes":[{"value":"/ Returns the configuration of this runner.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507447,"byte_end":507492,"line_start":369,"line_end":369,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":508108,"byte_end":508111,"line_start":385,"line_end":385,"column_start":12,"column_end":15},"name":"run","qualname":"<TestRunner>::run","value":"fn <S> (&mut self, strategy: &S, test: impl Fn(S::Value) -> TestCaseResult) -> TestRunResult<S>","parent":null,"children":[],"decl_id":null,"docs":" Run test cases against `f`, choosing inputs via `strategy`.","sig":null,"attributes":[{"value":"/ Run test cases against `f`, choosing inputs via `strategy`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507563,"byte_end":507626,"line_start":374,"line_end":374,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507631,"byte_end":507634,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ If any failure cases occur, try to find a minimal failure case and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507639,"byte_end":507709,"line_start":376,"line_end":376,"column_start":5,"column_end":75}},{"value":"/ report that. If invoking `f` panics, the panic is turned into a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507714,"byte_end":507781,"line_start":377,"line_end":377,"column_start":5,"column_end":72}},{"value":"/ `TestCaseError::Fail`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507786,"byte_end":507812,"line_start":378,"line_end":378,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507817,"byte_end":507820,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ If failure persistence is enabled, all persisted failing cases are","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507825,"byte_end":507895,"line_start":380,"line_end":380,"column_start":5,"column_end":75}},{"value":"/ tested first. If a later non-persisted case fails, its seed is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507900,"byte_end":507966,"line_start":381,"line_end":381,"column_start":5,"column_end":71}},{"value":"/ persisted before returning failure.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":507971,"byte_end":508010,"line_start":382,"line_end":382,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":508015,"byte_end":508018,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ Returns success or failure indicating why the test as a whole failed.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":508023,"byte_end":508096,"line_start":384,"line_end":384,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":517993,"byte_end":518000,"line_start":660,"line_end":660,"column_start":12,"column_end":19},"name":"run_one","qualname":"<TestRunner>::run_one","value":"fn <V> (&mut self, case: V, test: impl Fn(V::Value) -> TestCaseResult) -> Result<bool, TestError<V::Value>>","parent":null,"children":[],"decl_id":null,"docs":" Run one specific test case against this runner.","sig":null,"attributes":[{"value":"/ Run one specific test case against this runner.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":517518,"byte_end":517569,"line_start":651,"line_end":651,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":517574,"byte_end":517577,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ If the test fails, finds the minimal failing test case. If the test","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":517582,"byte_end":517653,"line_start":653,"line_end":653,"column_start":5,"column_end":76}},{"value":"/ does not fail, returns whether it succeeded or was filtered out.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":517658,"byte_end":517726,"line_start":654,"line_end":654,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":517731,"byte_end":517734,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ This does not honour the `fork` config, and will not be able to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":517739,"byte_end":517806,"line_start":656,"line_end":656,"column_start":5,"column_end":72}},{"value":"/ terminate the run if it runs for longer than `timeout`. However, if the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":517811,"byte_end":517886,"line_start":657,"line_end":657,"column_start":5,"column_end":80}},{"value":"/ test function returns but took longer than `timeout`, the test case","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":517891,"byte_end":517962,"line_start":658,"line_end":658,"column_start":5,"column_end":76}},{"value":"/ will fail.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":517967,"byte_end":517981,"line_start":659,"line_end":659,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1897},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":524095,"byte_end":524107,"line_start":830,"line_end":830,"column_start":12,"column_end":24},"name":"reject_local","qualname":"<TestRunner>::reject_local","value":"fn (&mut self, whence: impl Into<Reason>) -> Result<(), Reason>","parent":null,"children":[],"decl_id":null,"docs":" Update the state to account for a local rejection from `whence`, and\n return `Ok` if the caller should keep going or `Err` to abort.\n","sig":null,"attributes":[{"value":"/ Update the state to account for a local rejection from `whence`, and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":523940,"byte_end":524012,"line_start":828,"line_end":828,"column_start":5,"column_end":77}},{"value":"/ return `Ok` if the caller should keep going or `Err` to abort.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":524017,"byte_end":524083,"line_start":829,"line_end":829,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1903},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":525447,"byte_end":525461,"line_start":867,"line_end":867,"column_start":12,"column_end":26},"name":"flat_map_regen","qualname":"<TestRunner>::flat_map_regen","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Increment the counter of flat map regenerations and return whether it\n is still under the configured limit.\n","sig":null,"attributes":[{"value":"/ Increment the counter of flat map regenerations and return whether it","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":525317,"byte_end":525390,"line_start":865,"line_end":865,"column_start":5,"column_end":78}},{"value":"/ is still under the configured limit.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":525395,"byte_end":525435,"line_start":866,"line_end":866,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":1913},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tuple","qualname":"::tuple","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","parent":null,"children":[{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":7628},{"krate":0,"index":7638},{"krate":0,"index":7636},{"krate":0,"index":7633},{"krate":0,"index":1916},{"krate":0,"index":1919},{"krate":0,"index":7641},{"krate":0,"index":7646},{"krate":0,"index":7652},{"krate":0,"index":7658},{"krate":0,"index":7665},{"krate":0,"index":7672},{"krate":0,"index":7680},{"krate":0,"index":7688},{"krate":0,"index":7697},{"krate":0,"index":7706},{"krate":0,"index":7716},{"krate":0,"index":7726},{"krate":0,"index":7737},{"krate":0,"index":7748},{"krate":0,"index":7760},{"krate":0,"index":7772},{"krate":0,"index":7785},{"krate":0,"index":7798},{"krate":0,"index":7812},{"krate":0,"index":7826}],"decl_id":null,"docs":" Support for combining strategies into tuples.","sig":null,"attributes":[{"value":"! Support for combining strategies into tuples.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":542636,"byte_end":542685,"line_start":10,"line_end":10,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":542686,"byte_end":542689,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! There is no explicit \"tuple strategy\"; simply make a tuple containing the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":542690,"byte_end":542767,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"! strategy and that tuple is itself a strategy.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":542768,"byte_end":542817,"line_start":13,"line_end":13,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":7628},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":542976,"byte_end":542990,"line_start":20,"line_end":20,"column_start":12,"column_end":26},"name":"TupleValueTree","qualname":"::tuple::TupleValueTree","value":"TupleValueTree {  }","parent":null,"children":[{"krate":0,"index":7630},{"krate":0,"index":7631},{"krate":0,"index":7632}],"decl_id":null,"docs":" Common `ValueTree` implementation for all tuple strategies.\n","sig":null,"attributes":[{"value":"/ Common `ValueTree` implementation for all tuple strategies.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":542871,"byte_end":542934,"line_start":18,"line_end":18,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1918},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":543283,"byte_end":543286,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<TupleValueTree<T>>::new","value":"fn (inner: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TupleValueTree` wrapping `inner`.","sig":null,"attributes":[{"value":"/ Create a new `TupleValueTree` wrapping `inner`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":543095,"byte_end":543146,"line_start":27,"line_end":27,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":543151,"byte_end":543154,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ It only makes sense for `inner` to be a tuple of an arity for which the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":543159,"byte_end":543234,"line_start":29,"line_end":29,"column_start":5,"column_end":80}},{"value":"/ type implements `ValueTree`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":543239,"byte_end":543271,"line_start":30,"line_end":30,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":1920},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","parent":null,"children":[{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1928},{"krate":0,"index":1930},{"krate":0,"index":1932},{"krate":0,"index":1938},{"krate":0,"index":7841},{"krate":0,"index":7851},{"krate":0,"index":7850},{"krate":0,"index":7846},{"krate":0,"index":7847},{"krate":0,"index":7844},{"krate":0,"index":7857},{"krate":0,"index":7862},{"krate":0,"index":7861},{"krate":0,"index":7859},{"krate":0,"index":7853},{"krate":0,"index":1940},{"krate":0,"index":1944},{"krate":0,"index":1947},{"krate":0,"index":1949},{"krate":0,"index":1952},{"krate":0,"index":1957},{"krate":0,"index":7876},{"krate":0,"index":7880},{"krate":0,"index":7864},{"krate":0,"index":7868},{"krate":0,"index":7873},{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1974}],"decl_id":null,"docs":" Strategies for generating `std::Option` values.\n","sig":null,"attributes":[{"value":"! Strategies for generating `std::Option` values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":547160,"byte_end":547211,"line_start":10,"line_end":10,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1926},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":547846,"byte_end":547850,"line_start":32,"line_end":32,"column_start":8,"column_end":12},"name":"prob","qualname":"::option::prob","value":"fn (from: impl Into<Probability>) -> Probability","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Probability` from some value that is convertible into it.","sig":null,"attributes":[{"value":"/ Creates a `Probability` from some value that is convertible into it.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":547588,"byte_end":547660,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":547661,"byte_end":547664,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":547665,"byte_end":547677,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":547678,"byte_end":547681,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Panics if the converted to probability would lie","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":547682,"byte_end":547734,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/ outside interval `[0.0, 1.0]`. Consult the `Into` (or `From`)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":547735,"byte_end":547800,"line_start":30,"line_end":30,"column_start":1,"column_end":66}},{"value":"/ implementations for more details.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":547801,"byte_end":547838,"line_start":31,"line_end":31,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1933},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548487,"byte_end":548490,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<Probability>::new","value":"fn (prob: f64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Probability` from a `f64`.","sig":null,"attributes":[{"value":"/ Creates a `Probability` from a `f64`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548333,"byte_end":548374,"line_start":55,"line_end":55,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548379,"byte_end":548382,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548387,"byte_end":548399,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548404,"byte_end":548407,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Panics if the probability is outside interval `[0.0, 1.0]`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548412,"byte_end":548475,"line_start":59,"line_end":59,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548893,"byte_end":548897,"line_start":71,"line_end":71,"column_start":12,"column_end":16},"name":"with","qualname":"<Probability>::with","value":"fn <X> (self, and: X) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument producing a product\n type expected by some implementations of `A: Arbitrary` in\n `A::Parameters`. This can be more ergonomic to work with and may\n help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument producing a product","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548643,"byte_end":548712,"line_start":67,"line_end":67,"column_start":5,"column_end":74}},{"value":"/ type expected by some implementations of `A: Arbitrary` in","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548717,"byte_end":548779,"line_start":68,"line_end":68,"column_start":5,"column_end":67}},{"value":"/ `A::Parameters`. This can be more ergonomic to work with and may","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548784,"byte_end":548852,"line_start":69,"line_end":69,"column_start":5,"column_end":73}},{"value":"/ help type inference.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548857,"byte_end":548881,"line_start":70,"line_end":70,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":549268,"byte_end":549272,"line_start":79,"line_end":79,"column_start":12,"column_end":16},"name":"lift","qualname":"<Probability>::lift","value":"fn <X> (self) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument generated with a\n default value producing a product type expected by some\n implementations of `A: Arbitrary` in `A::Parameters`.\n This can be more ergonomic to work with and may help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument generated with a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548987,"byte_end":549053,"line_start":75,"line_end":75,"column_start":5,"column_end":71}},{"value":"/ default value producing a product type expected by some","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":549058,"byte_end":549117,"line_start":76,"line_end":76,"column_start":5,"column_end":64}},{"value":"/ implementations of `A: Arbitrary` in `A::Parameters`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":549122,"byte_end":549179,"line_start":77,"line_end":77,"column_start":5,"column_end":62}},{"value":"/ This can be more ergonomic to work with and may help type inference.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":549184,"byte_end":549256,"line_start":78,"line_end":78,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7841},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":550035,"byte_end":550046,"line_start":114,"line_end":114,"column_start":12,"column_end":23},"name":"Probability","qualname":"::option::Probability","value":"","parent":null,"children":[],"decl_id":null,"docs":" A probability in the range `[0.0, 1.0]` with a default of `0.5`.\n","sig":null,"attributes":[{"value":"/ A probability in the range `[0.0, 1.0]` with a default of `0.5`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":549914,"byte_end":549982,"line_start":112,"line_end":112,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":7876},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":551380,"byte_end":551394,"line_start":167,"line_end":167,"column_start":16,"column_end":30},"name":"OptionStrategy","qualname":"::option::OptionStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates `Option` values whose inner `Some` values are\n generated by another strategy.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":7864},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":551629,"byte_end":551644,"line_start":172,"line_end":172,"column_start":16,"column_end":31},"name":"OptionValueTree","qualname":"::option::OptionValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` type corresponding to `OptionStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1972},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552777,"byte_end":552779,"line_start":213,"line_end":213,"column_start":8,"column_end":10},"name":"of","qualname":"::option::of","value":"fn <T> (t: T) -> OptionStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a strategy producing `Optional` values wrapping values from the\n given delegate strategy.","sig":null,"attributes":[{"value":"/ Return a strategy producing `Optional` values wrapping values from the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552562,"byte_end":552636,"line_start":207,"line_end":207,"column_start":1,"column_end":75}},{"value":"/ given delegate strategy.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552637,"byte_end":552665,"line_start":208,"line_end":208,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552666,"byte_end":552669,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ `Some` values shrink to `None`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552670,"byte_end":552705,"line_start":210,"line_end":210,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552706,"byte_end":552709,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ `Some` and `None` are each chosen with 50% probability.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552710,"byte_end":552769,"line_start":212,"line_end":212,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":1974},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":553147,"byte_end":553155,"line_start":224,"line_end":224,"column_start":8,"column_end":16},"name":"weighted","qualname":"::option::weighted","value":"fn <T> (probability_of_some: impl Into<Probability>, t: T) -> OptionStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a strategy producing `Optional` values wrapping values from the\n given delegate strategy.","sig":null,"attributes":[{"value":"/ Return a strategy producing `Optional` values wrapping values from the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552865,"byte_end":552939,"line_start":217,"line_end":217,"column_start":1,"column_end":75}},{"value":"/ given delegate strategy.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552940,"byte_end":552968,"line_start":218,"line_end":218,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552969,"byte_end":552972,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ `Some` values shrink to `None`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552973,"byte_end":553008,"line_start":220,"line_end":220,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":553009,"byte_end":553012,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ `Some` is chosen with a probability given by `probability_of_some`, which","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":553013,"byte_end":553090,"line_start":222,"line_end":222,"column_start":1,"column_end":78}},{"value":"/ must be between 0.0 and 1.0, both exclusive.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":553091,"byte_end":553139,"line_start":223,"line_end":223,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":1977},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","parent":null,"children":[{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1986},{"krate":0,"index":1992},{"krate":0,"index":1996},{"krate":0,"index":1999},{"krate":0,"index":2003},{"krate":0,"index":2008},{"krate":0,"index":2014},{"krate":0,"index":2018},{"krate":0,"index":2021},{"krate":0,"index":2025},{"krate":0,"index":2030},{"krate":0,"index":2033},{"krate":0,"index":7901},{"krate":0,"index":7906},{"krate":0,"index":7886},{"krate":0,"index":7891},{"krate":0,"index":7897},{"krate":0,"index":7928},{"krate":0,"index":7933},{"krate":0,"index":7913},{"krate":0,"index":7918},{"krate":0,"index":7924},{"krate":0,"index":2036},{"krate":0,"index":2040},{"krate":0,"index":2044},{"krate":0,"index":2048},{"krate":0,"index":2052},{"krate":0,"index":2056},{"krate":0,"index":2060},{"krate":0,"index":2063},{"krate":0,"index":2067},{"krate":0,"index":2070}],"decl_id":null,"docs":" Strategies for combining delegate strategies into `std::Result`s.","sig":null,"attributes":[{"value":"! Strategies for combining delegate strategies into `std::Result`s.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":554769,"byte_end":554838,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":554839,"byte_end":554842,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! That is, the strategies here are for producing `Ok` _and_ `Err` cases. To","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":554843,"byte_end":554920,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"! simply adapt a strategy producing `T` into `Result<T, something>` which is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":554921,"byte_end":554999,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"! always `Ok`, you can do something like `base_strategy.prop_map(Ok)` to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555000,"byte_end":555074,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"! simply wrap the generated values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555075,"byte_end":555112,"line_start":15,"line_end":15,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555113,"byte_end":555116,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! Note that there are two nearly identical APIs for doing this, termed \"maybe","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555117,"byte_end":555196,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"! ok\" and \"maybe err\". The difference between the two is in how they shrink;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555197,"byte_end":555275,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"! \"maybe ok\" treats `Ok` as the special case and shrinks to `Err`;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555276,"byte_end":555344,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"! conversely, \"maybe err\" treats `Err` as the special case and shrinks to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555345,"byte_end":555420,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"! `Ok`. Which to use largely depends on the code being tested; if the code","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555421,"byte_end":555497,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"! typically handles errors by immediately bailing out and doing nothing else,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555498,"byte_end":555577,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"! \"maybe ok\" is likely more suitable, as shrinking will cause the code to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555578,"byte_end":555653,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"! take simpler paths. On the other hand, functions that need to make a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555654,"byte_end":555726,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"! complicated or fragile \"back out\" process on error are better tested with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555727,"byte_end":555804,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"! \"maybe err\" since the success case results in an easier to understand code","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555805,"byte_end":555883,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"! path.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":555884,"byte_end":555893,"line_start":27,"line_end":27,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":7901},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":557552,"byte_end":557559,"line_start":89,"line_end":89,"column_start":16,"column_end":23},"name":"MaybeOk","qualname":"::result::MaybeOk","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates `Result`s using `Ok` and `Err` values from two\n delegate strategies.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":7886},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":557763,"byte_end":557779,"line_start":93,"line_end":93,"column_start":16,"column_end":32},"name":"MaybeOkValueTree","qualname":"::result::MaybeOkValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` type corresponding to `MaybeOk`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7928},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":558265,"byte_end":558273,"line_start":107,"line_end":107,"column_start":16,"column_end":24},"name":"MaybeErr","qualname":"::result::MaybeErr","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates `Result`s using `Ok` and `Err` values from two\n delegate strategies.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":7913},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":558479,"byte_end":558496,"line_start":111,"line_end":111,"column_start":16,"column_end":33},"name":"MaybeErrValueTree","qualname":"::result::MaybeErrValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` type corresponding to `MaybeErr`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2060},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560361,"byte_end":560369,"line_start":181,"line_end":181,"column_start":8,"column_end":16},"name":"maybe_ok","qualname":"::result::maybe_ok","value":"fn <T, E> (t: T, e: E) -> MaybeOk<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560140,"byte_end":560216,"line_start":175,"line_end":175,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560217,"byte_end":560253,"line_start":176,"line_end":176,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560254,"byte_end":560257,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ `Ok` and `Err` are chosen with equal probability.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560258,"byte_end":560311,"line_start":178,"line_end":178,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560312,"byte_end":560315,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Err`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560316,"byte_end":560353,"line_start":180,"line_end":180,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":2063},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560741,"byte_end":560758,"line_start":192,"line_end":192,"column_start":8,"column_end":25},"name":"maybe_ok_weighted","qualname":"::result::maybe_ok_weighted","value":"fn <T, E> (probability_of_ok: impl Into<Probability>, t: T, e: E) -> MaybeOk<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560463,"byte_end":560539,"line_start":185,"line_end":185,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560540,"byte_end":560576,"line_start":186,"line_end":186,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560577,"byte_end":560580,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ `probability_of_ok` is the probability (between 0.0 and 1.0, exclusive)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560581,"byte_end":560656,"line_start":188,"line_end":188,"column_start":1,"column_end":76}},{"value":"/ that `Ok` is initially chosen.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560657,"byte_end":560691,"line_start":189,"line_end":189,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560692,"byte_end":560695,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Err`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":560696,"byte_end":560733,"line_start":191,"line_end":191,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":2067},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561487,"byte_end":561496,"line_start":218,"line_end":218,"column_start":8,"column_end":17},"name":"maybe_err","qualname":"::result::maybe_err","value":"fn <T, E> (t: T, e: E) -> MaybeErr<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561267,"byte_end":561343,"line_start":212,"line_end":212,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561344,"byte_end":561380,"line_start":213,"line_end":213,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561381,"byte_end":561384,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ `Ok` and `Err` are chosen with equal probability.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561385,"byte_end":561438,"line_start":215,"line_end":215,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561439,"byte_end":561442,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Ok`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561443,"byte_end":561479,"line_start":217,"line_end":217,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":2070},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561870,"byte_end":561888,"line_start":229,"line_end":229,"column_start":8,"column_end":26},"name":"maybe_err_weighted","qualname":"::result::maybe_err_weighted","value":"fn <T, E> (probability_of_err: impl Into<Probability>, t: T, e: E) -> MaybeErr<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561592,"byte_end":561668,"line_start":222,"line_end":222,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561669,"byte_end":561705,"line_start":223,"line_end":223,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561706,"byte_end":561709,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ `probability_of_ok` is the probability (between 0.0 and 1.0, exclusive)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561710,"byte_end":561785,"line_start":225,"line_end":225,"column_start":1,"column_end":76}},{"value":"/ that `Err` is initially chosen.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561786,"byte_end":561821,"line_start":226,"line_end":226,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561822,"byte_end":561825,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Ok`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":561826,"byte_end":561862,"line_start":228,"line_end":228,"column_start":1,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":2074},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sample","qualname":"::sample","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","parent":null,"children":[{"krate":0,"index":2075},{"krate":0,"index":2079},{"krate":0,"index":2080},{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091},{"krate":0,"index":2092},{"krate":0,"index":2095},{"krate":0,"index":7940},{"krate":0,"index":7947},{"krate":0,"index":7944},{"krate":0,"index":2099},{"krate":0,"index":7950},{"krate":0,"index":7957},{"krate":0,"index":7954},{"krate":0,"index":2104},{"krate":0,"index":7960},{"krate":0,"index":7967},{"krate":0,"index":7964},{"krate":0,"index":2111},{"krate":0,"index":7978},{"krate":0,"index":7985},{"krate":0,"index":7982},{"krate":0,"index":7988},{"krate":0,"index":7995},{"krate":0,"index":7992},{"krate":0,"index":7970},{"krate":0,"index":7975},{"krate":0,"index":2115},{"krate":0,"index":8001},{"krate":0,"index":8007},{"krate":0,"index":8006},{"krate":0,"index":8004},{"krate":0,"index":2118},{"krate":0,"index":8012},{"krate":0,"index":8017},{"krate":0,"index":8016},{"krate":0,"index":8014},{"krate":0,"index":8009},{"krate":0,"index":8025},{"krate":0,"index":8030},{"krate":0,"index":8028},{"krate":0,"index":8032},{"krate":0,"index":8037},{"krate":0,"index":8035},{"krate":0,"index":8019},{"krate":0,"index":8023},{"krate":0,"index":2126},{"krate":0,"index":8042},{"krate":0,"index":8047},{"krate":0,"index":8045},{"krate":0,"index":8049},{"krate":0,"index":8051},{"krate":0,"index":8053},{"krate":0,"index":8056},{"krate":0,"index":2128},{"krate":0,"index":2130},{"krate":0,"index":2134},{"krate":0,"index":2139}],"decl_id":null,"docs":" Strategies for generating values by taking samples of collections.","sig":null,"attributes":[{"value":"! Strategies for generating values by taking samples of collections.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":565220,"byte_end":565290,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":565291,"byte_end":565294,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! Note that the strategies in this module are not native combinators; that","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":565295,"byte_end":565371,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"! is, the input collection is not itself a strategy, but is rather fixed when","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":565372,"byte_end":565451,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"! the strategy is created.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":565452,"byte_end":565480,"line_start":14,"line_end":14,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":2095},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566433,"byte_end":566444,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"subsequence","qualname":"::sample::subsequence","value":"fn <T> (values: impl Into<Cow<'static, [T]>>, size: impl Into<SizeRange>) -> Subsequence<T>","parent":null,"children":[],"decl_id":null,"docs":" Sample subsequences whose size are within `size` from the given collection\n `values`.","sig":null,"attributes":[{"value":"/ Sample subsequences whose size are within `size` from the given collection","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":565849,"byte_end":565927,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ `values`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":565928,"byte_end":565941,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":565942,"byte_end":565945,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ A subsequence is a subset of the elements in a collection in the order they","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":565946,"byte_end":566025,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ occur in that collection. The elements are not chosen to be contiguous.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566026,"byte_end":566101,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566102,"byte_end":566105,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This is roughly analogous to `rand::sample`, except that it guarantees that","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566106,"byte_end":566185,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ the order is preserved.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566186,"byte_end":566213,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566214,"byte_end":566217,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ `values` may be a static slice or a `Vec`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566218,"byte_end":566264,"line_start":41,"line_end":41,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566265,"byte_end":566268,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566269,"byte_end":566282,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566283,"byte_end":566286,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Panics if the maximum size implied by `size` is larger than the size of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566287,"byte_end":566362,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/ `values`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566363,"byte_end":566376,"line_start":46,"line_end":46,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566377,"byte_end":566380,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Panics if `size` is a zero-length range.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566381,"byte_end":566425,"line_start":48,"line_end":48,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":7940},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":567204,"byte_end":567215,"line_start":76,"line_end":76,"column_start":12,"column_end":23},"name":"Subsequence","qualname":"::sample::Subsequence","value":"Subsequence {  }","parent":null,"children":[{"krate":0,"index":7942},{"krate":0,"index":7943}],"decl_id":null,"docs":" Strategy to generate `Vec`s by sampling a subsequence from another\n collection.","sig":null,"attributes":[{"value":"/ Strategy to generate `Vec`s by sampling a subsequence from another","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":566958,"byte_end":567028,"line_start":70,"line_end":70,"column_start":1,"column_end":71}},{"value":"/ collection.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":567029,"byte_end":567044,"line_start":71,"line_end":71,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":567045,"byte_end":567048,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ This is created by the `subsequence` function in the same module.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":567049,"byte_end":567118,"line_start":73,"line_end":73,"column_start":1,"column_end":70}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":567143,"byte_end":567192,"line_start":75,"line_end":75,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":7950},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":567762,"byte_end":567782,"line_start":95,"line_end":95,"column_start":12,"column_end":32},"name":"SubsequenceValueTree","qualname":"::sample::SubsequenceValueTree","value":"SubsequenceValueTree {  }","parent":null,"children":[{"krate":0,"index":7952},{"krate":0,"index":7953}],"decl_id":null,"docs":" `ValueTree` type for `Subsequence`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` type for `Subsequence`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":567687,"byte_end":567726,"line_start":93,"line_end":93,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":7978},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":568789,"byte_end":568795,"line_start":134,"line_end":134,"column_start":16,"column_end":22},"name":"Select","qualname":"::sample::Select","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to produce one value from a fixed collection of options.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":7988},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569015,"byte_end":569030,"line_start":139,"line_end":139,"column_start":16,"column_end":31},"name":"SelectValueTree","qualname":"::sample::SelectValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `Select`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2115},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569704,"byte_end":569710,"line_start":156,"line_end":156,"column_start":8,"column_end":14},"name":"select","qualname":"::sample::select","value":"fn <T> (values: impl Into<Cow<'static, [T]>>) -> Select<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which uniformly selects one value from `values`.","sig":null,"attributes":[{"value":"/ Create a strategy which uniformly selects one value from `values`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569158,"byte_end":569228,"line_start":144,"line_end":144,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569229,"byte_end":569232,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ `values` should be a `&'static [T]` or a `Vec<T>`, or potentially another","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569233,"byte_end":569310,"line_start":146,"line_end":146,"column_start":1,"column_end":78}},{"value":"/ type that can be coerced to `Cow<'static,[T]>`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569311,"byte_end":569362,"line_start":147,"line_end":147,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569363,"byte_end":569366,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is largely equivalent to making a `Union` of a bunch of `Just`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569367,"byte_end":569438,"line_start":149,"line_end":149,"column_start":1,"column_end":72}},{"value":"/ strategies, but is substantially more efficient and shrinks by binary","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569439,"byte_end":569512,"line_start":150,"line_end":150,"column_start":1,"column_end":74}},{"value":"/ search.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569513,"byte_end":569524,"line_start":151,"line_end":151,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569525,"byte_end":569528,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ If `values` is also to be generated by a strategy, see","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569529,"byte_end":569587,"line_start":153,"line_end":153,"column_start":1,"column_end":59}},{"value":"/ [`Index`](struct.Index.html) for a more efficient way to select values than","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569588,"byte_end":569667,"line_start":154,"line_end":154,"column_start":1,"column_end":80}},{"value":"/ using `prop_flat_map()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569668,"byte_end":569696,"line_start":155,"line_end":155,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":8001},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571821,"byte_end":571826,"line_start":213,"line_end":213,"column_start":12,"column_end":17},"name":"Index","qualname":"::sample::Index","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stand-in for an index into a slice or similar collection or conceptually\n similar things.","sig":null,"attributes":[{"value":"/ A stand-in for an index into a slice or similar collection or conceptually","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569909,"byte_end":569987,"line_start":164,"line_end":164,"column_start":1,"column_end":79}},{"value":"/ similar things.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":569988,"byte_end":570007,"line_start":165,"line_end":165,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570008,"byte_end":570011,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ At the lowest level, `Index` is a mechanism for generating `usize` values","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570012,"byte_end":570089,"line_start":167,"line_end":167,"column_start":1,"column_end":78}},{"value":"/ in the range [0..N), for some N whose value is not known until it is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570090,"byte_end":570162,"line_start":168,"line_end":168,"column_start":1,"column_end":73}},{"value":"/ needed. (Contrast with using `0..N` itself as a strategy, where you need to","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570163,"byte_end":570242,"line_start":169,"line_end":169,"column_start":1,"column_end":80}},{"value":"/ know N when you define the strategy.)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570243,"byte_end":570284,"line_start":170,"line_end":170,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570285,"byte_end":570288,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ For any upper bound, the actual index produced by an `Index` is the same no","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570289,"byte_end":570368,"line_start":172,"line_end":172,"column_start":1,"column_end":80}},{"value":"/ matter how many times it is used. Different upper bounds will produce","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570369,"byte_end":570442,"line_start":173,"line_end":173,"column_start":1,"column_end":74}},{"value":"/ different but not independent values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570443,"byte_end":570484,"line_start":174,"line_end":174,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570485,"byte_end":570488,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Shrinking will cause the index to binary search through the underlying","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570489,"byte_end":570563,"line_start":176,"line_end":176,"column_start":1,"column_end":75}},{"value":"/ collection(s) it is used to sample.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570564,"byte_end":570603,"line_start":177,"line_end":177,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570604,"byte_end":570607,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Note that `Index` _cannot_ currently be used as a slice index (e.g.,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570608,"byte_end":570680,"line_start":179,"line_end":179,"column_start":1,"column_end":73}},{"value":"/ `slice[index]`) due to the trait coherence rules.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570681,"byte_end":570734,"line_start":180,"line_end":180,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570735,"byte_end":570738,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570739,"byte_end":570753,"line_start":182,"line_end":182,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570754,"byte_end":570757,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ If the collection itself being indexed is itself generated by a strategy,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570758,"byte_end":570835,"line_start":184,"line_end":184,"column_start":1,"column_end":78}},{"value":"/ you can make separately define that strategy and a strategy generating one","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570836,"byte_end":570914,"line_start":185,"line_end":185,"column_start":1,"column_end":79}},{"value":"/ or more `Index`es and then join the two after input generation, avoiding a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570915,"byte_end":570993,"line_start":186,"line_end":186,"column_start":1,"column_end":79}},{"value":"/ call to `prop_flat_map()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":570994,"byte_end":571024,"line_start":187,"line_end":187,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571025,"byte_end":571028,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571029,"byte_end":571036,"line_start":189,"line_end":189,"column_start":1,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571037,"byte_end":571066,"line_start":190,"line_end":190,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571067,"byte_end":571070,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571071,"byte_end":571086,"line_start":192,"line_end":192,"column_start":1,"column_end":16}},{"value":"/     # /*","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571087,"byte_end":571099,"line_start":193,"line_end":193,"column_start":1,"column_end":13}},{"value":"/     #[test]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571100,"byte_end":571115,"line_start":194,"line_end":194,"column_start":1,"column_end":16}},{"value":"/     # */","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571116,"byte_end":571128,"line_start":195,"line_end":195,"column_start":1,"column_end":13}},{"value":"/     fn my_test(","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571129,"byte_end":571148,"line_start":196,"line_end":196,"column_start":1,"column_end":20}},{"value":"/         names in prop::collection::vec(\"[a-z]+\", 10..20),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571149,"byte_end":571210,"line_start":197,"line_end":197,"column_start":1,"column_end":62}},{"value":"/         indices in prop::collection::vec(any::<prop::sample::Index>(), 5..10)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571211,"byte_end":571292,"line_start":198,"line_end":198,"column_start":1,"column_end":82}},{"value":"/     ) {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571293,"byte_end":571304,"line_start":199,"line_end":199,"column_start":1,"column_end":12}},{"value":"/         // We now have Vec<String> of ten to twenty names, and a Vec<Index>","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571305,"byte_end":571384,"line_start":200,"line_end":200,"column_start":1,"column_end":80}},{"value":"/         // of five to ten indices and can combine them however we like.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571385,"byte_end":571460,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/         for index in &indices {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571461,"byte_end":571496,"line_start":202,"line_end":202,"column_start":1,"column_end":36}},{"value":"/             println!(\"Accessing item by index: {}\", names[index.index(names.len())]);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571497,"byte_end":571586,"line_start":203,"line_end":203,"column_start":1,"column_end":90}},{"value":"/             println!(\"Accessing item by convenience method: {}\", index.get(&names));","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571587,"byte_end":571675,"line_start":204,"line_end":204,"column_start":1,"column_end":89}},{"value":"/         }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571676,"byte_end":571689,"line_start":205,"line_end":205,"column_start":1,"column_end":14}},{"value":"/         // Test stuff...","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571690,"byte_end":571718,"line_start":206,"line_end":206,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571719,"byte_end":571728,"line_start":207,"line_end":207,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571729,"byte_end":571734,"line_start":208,"line_end":208,"column_start":1,"column_end":6}},{"value":"/ #","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571735,"byte_end":571740,"line_start":209,"line_end":209,"column_start":1,"column_end":6}},{"value":"/ # fn main() { my_test(); }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571741,"byte_end":571771,"line_start":210,"line_end":210,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571772,"byte_end":571779,"line_start":211,"line_end":211,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":572012,"byte_end":572017,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"name":"index","qualname":"<Index>::index","value":"fn (&self, size: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the real index that would be used to index a collection of size `size`.","sig":null,"attributes":[{"value":"/ Return the real index that would be used to index a collection of size `size`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571853,"byte_end":571935,"line_start":216,"line_end":216,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571940,"byte_end":571943,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571948,"byte_end":571961,"line_start":218,"line_end":218,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571966,"byte_end":571969,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Panics if `size == 0`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571974,"byte_end":572000,"line_start":220,"line_end":220,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":572588,"byte_end":572591,"line_start":234,"line_end":234,"column_start":12,"column_end":15},"name":"get","qualname":"<Index>::get","value":"fn <'a, T> (&self, slice: &'a [T]) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the element in `slice` that this `Index` refers to.","sig":null,"attributes":[{"value":"/ Return a reference to the element in `slice` that this `Index` refers to.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":572432,"byte_end":572509,"line_start":231,"line_end":231,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":572514,"byte_end":572517,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ A shortcut for `&slice[index.index(slice.len())]`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":572522,"byte_end":572576,"line_start":233,"line_end":233,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":572860,"byte_end":572867,"line_start":242,"line_end":242,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Index>::get_mut","value":"fn <'a, T> (&self, slice: &'a mut [T]) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the element in `slice` that this `Index`\n refers to.","sig":null,"attributes":[{"value":"/ Return a mutable reference to the element in `slice` that this `Index`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":572684,"byte_end":572758,"line_start":238,"line_end":238,"column_start":5,"column_end":79}},{"value":"/ refers to.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":572763,"byte_end":572777,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":572782,"byte_end":572785,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ A shortcut for `&mut slice[index.index(slice.len())]`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":572790,"byte_end":572848,"line_start":241,"line_end":241,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":8025},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573230,"byte_end":573243,"line_start":259,"line_end":259,"column_start":16,"column_end":29},"name":"IndexStrategy","qualname":"::sample::IndexStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `Index`es.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":8032},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573426,"byte_end":573440,"line_start":264,"line_end":264,"column_start":16,"column_end":30},"name":"IndexValueTree","qualname":"::sample::IndexValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `IndexStrategy`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8042},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574771,"byte_end":574779,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"Selector","qualname":"::sample::Selector","value":"Selector {  }","parent":null,"children":[{"krate":0,"index":8043},{"krate":0,"index":8044}],"decl_id":null,"docs":" A value for picking random values out of iterators.","sig":null,"attributes":[{"value":"/ A value for picking random values out of iterators.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573664,"byte_end":573719,"line_start":275,"line_end":275,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573720,"byte_end":573723,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ This is, in a sense, a more flexible variant of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573724,"byte_end":573775,"line_start":277,"line_end":277,"column_start":1,"column_end":52}},{"value":"/ [`Index`](struct.Index.html) in that it can operate on arbitrary","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573776,"byte_end":573844,"line_start":278,"line_end":278,"column_start":1,"column_end":69}},{"value":"/ `IntoIterator` values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573845,"byte_end":573871,"line_start":279,"line_end":279,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573872,"byte_end":573875,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ Initially, the selection is roughly uniform, with a very slight bias","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573876,"byte_end":573948,"line_start":281,"line_end":281,"column_start":1,"column_end":73}},{"value":"/ towards items earlier in the iterator.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573949,"byte_end":573991,"line_start":282,"line_end":282,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573992,"byte_end":573995,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ Shrinking causes the selection to move toward items earlier in the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573996,"byte_end":574066,"line_start":284,"line_end":284,"column_start":1,"column_end":71}},{"value":"/ iterator, ultimately settling on the very first, but this currently happens","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574067,"byte_end":574146,"line_start":285,"line_end":285,"column_start":1,"column_end":80}},{"value":"/ in a very haphazard way that may fail to find the earliest failing input.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574147,"byte_end":574224,"line_start":286,"line_end":286,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574225,"byte_end":574228,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574229,"byte_end":574243,"line_start":288,"line_end":288,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574244,"byte_end":574247,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ Generate a non-indexable collection and a value to pick out of it.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574248,"byte_end":574318,"line_start":290,"line_end":290,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574319,"byte_end":574322,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574323,"byte_end":574330,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574331,"byte_end":574360,"line_start":293,"line_end":293,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574361,"byte_end":574364,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574365,"byte_end":574380,"line_start":295,"line_end":295,"column_start":1,"column_end":16}},{"value":"/     # /*","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574381,"byte_end":574393,"line_start":296,"line_end":296,"column_start":1,"column_end":13}},{"value":"/     #[test]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574394,"byte_end":574409,"line_start":297,"line_end":297,"column_start":1,"column_end":16}},{"value":"/     # */","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574410,"byte_end":574422,"line_start":298,"line_end":298,"column_start":1,"column_end":13}},{"value":"/     fn my_test(","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574423,"byte_end":574442,"line_start":299,"line_end":299,"column_start":1,"column_end":20}},{"value":"/         names in prop::collection::hash_set(\"[a-z]+\", 10..20),","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574443,"byte_end":574509,"line_start":300,"line_end":300,"column_start":1,"column_end":67}},{"value":"/         selector in any::<prop::sample::Selector>()","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574510,"byte_end":574565,"line_start":301,"line_end":301,"column_start":1,"column_end":56}},{"value":"/     ) {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574566,"byte_end":574577,"line_start":302,"line_end":302,"column_start":1,"column_end":12}},{"value":"/         println!(\"Selected name: {}\", selector.select(&names));","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574578,"byte_end":574645,"line_start":303,"line_end":303,"column_start":1,"column_end":68}},{"value":"/         // Test stuff...","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574646,"byte_end":574674,"line_start":304,"line_end":304,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574675,"byte_end":574684,"line_start":305,"line_end":305,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574685,"byte_end":574690,"line_start":306,"line_end":306,"column_start":1,"column_end":6}},{"value":"/ #","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574691,"byte_end":574696,"line_start":307,"line_end":307,"column_start":1,"column_end":6}},{"value":"/ # fn main() { my_test(); }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574697,"byte_end":574727,"line_start":308,"line_end":308,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574728,"byte_end":574735,"line_start":309,"line_end":309,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8049},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574933,"byte_end":574949,"line_start":320,"line_end":320,"column_start":12,"column_end":28},"name":"SelectorStrategy","qualname":"::sample::SelectorStrategy","value":"SelectorStrategy {  }","parent":null,"children":[{"krate":0,"index":8050}],"decl_id":null,"docs":" Strategy to create `Selector`s.","sig":null,"attributes":[{"value":"/ Strategy to create `Selector`s.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574828,"byte_end":574863,"line_start":316,"line_end":316,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574864,"byte_end":574867,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ Created via `any::<Selector>()`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574868,"byte_end":574904,"line_start":318,"line_end":318,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":8053},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":575060,"byte_end":575077,"line_start":326,"line_end":326,"column_start":12,"column_end":29},"name":"SelectorValueTree","qualname":"::sample::SelectorValueTree","value":"SelectorValueTree {  }","parent":null,"children":[{"krate":0,"index":8054},{"krate":0,"index":8055}],"decl_id":null,"docs":" `ValueTree` corresponding to `SelectorStrategy`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` corresponding to `SelectorStrategy`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":574979,"byte_end":575031,"line_start":324,"line_end":324,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2140},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576371,"byte_end":576377,"line_start":379,"line_end":379,"column_start":12,"column_end":18},"name":"select","qualname":"<Selector>::select","value":"fn <T> (&self, it: T) -> T::Item","parent":null,"children":[],"decl_id":null,"docs":" Pick a random element from iterable `it`.","sig":null,"attributes":[{"value":"/ Pick a random element from iterable `it`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576056,"byte_end":576101,"line_start":369,"line_end":369,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576106,"byte_end":576109,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ The selection is unaffected by the elements themselves, and is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576114,"byte_end":576180,"line_start":371,"line_end":371,"column_start":5,"column_end":71}},{"value":"/ dependent only on the actual length of `it`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576185,"byte_end":576233,"line_start":372,"line_end":372,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576238,"byte_end":576241,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ `it` is always iterated completely.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576246,"byte_end":576285,"line_start":374,"line_end":374,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576290,"byte_end":576293,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576298,"byte_end":576311,"line_start":376,"line_end":376,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576316,"byte_end":576319,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Panics if `it` has no elements.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576324,"byte_end":576359,"line_start":378,"line_end":378,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2142},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576788,"byte_end":576798,"line_start":391,"line_end":391,"column_start":12,"column_end":22},"name":"try_select","qualname":"<Selector>::try_select","value":"fn <T> (&self, it: T) -> Option<T::Item>","parent":null,"children":[],"decl_id":null,"docs":" Pick a random element from iterable `it`.","sig":null,"attributes":[{"value":"/ Pick a random element from iterable `it`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576498,"byte_end":576543,"line_start":383,"line_end":383,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576548,"byte_end":576551,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `it` is empty.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576556,"byte_end":576592,"line_start":385,"line_end":385,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576597,"byte_end":576600,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ The selection is unaffected by the elements themselves, and is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576605,"byte_end":576671,"line_start":387,"line_end":387,"column_start":5,"column_end":71}},{"value":"/ dependent only on the actual length of `it`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576676,"byte_end":576724,"line_start":388,"line_end":388,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576729,"byte_end":576732,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ `it` is always iterated completely.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576737,"byte_end":576776,"line_start":390,"line_end":390,"column_start":5,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":2144},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"string","qualname":"::string","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","parent":null,"children":[{"krate":0,"index":2145},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2164},{"krate":0,"index":2167},{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":8058},{"krate":0,"index":8081},{"krate":0,"index":8079},{"krate":0,"index":8075},{"krate":0,"index":8076},{"krate":0,"index":8072},{"krate":0,"index":8073},{"krate":0,"index":8066},{"krate":0,"index":8064},{"krate":0,"index":8061},{"krate":0,"index":2175},{"krate":0,"index":2177},{"krate":0,"index":2179},{"krate":0,"index":2181},{"krate":0,"index":2183},{"krate":0,"index":8111},{"krate":0,"index":8115},{"krate":0,"index":8099},{"krate":0,"index":8103},{"krate":0,"index":8108},{"krate":0,"index":2184},{"krate":0,"index":2188},{"krate":0,"index":2190},{"krate":0,"index":2193},{"krate":0,"index":2196},{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2213},{"krate":0,"index":2217},{"krate":0,"index":2223},{"krate":0,"index":2225},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2233},{"krate":0,"index":2234}],"decl_id":null,"docs":" Strategies for generating strings and byte strings from regular\n expressions.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2276,"byte_end":2299,"line_start":105,"line_end":105,"column_start":1,"column_end":24}},{"value":"! Strategies for generating strings and byte strings from regular","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":581918,"byte_end":581985,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"! expressions.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":581986,"byte_end":582002,"line_start":11,"line_end":11,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":8058},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":582686,"byte_end":582697,"line_start":37,"line_end":37,"column_start":12,"column_end":23},"name":"StringParam","qualname":"::string::StringParam","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wraps the regex that forms the `Strategy` for `String` so that a sensible\n `Default` can be given. The default is a string of non-control characters.\n","sig":null,"attributes":[{"value":"/ Wraps the regex that forms the `Strategy` for `String` so that a sensible","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":582457,"byte_end":582534,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ `Default` can be given. The default is a string of non-control characters.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":582535,"byte_end":582613,"line_start":35,"line_end":35,"column_start":1,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8083},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":583561,"byte_end":583572,"line_start":70,"line_end":70,"column_start":13,"column_end":24},"name":"RegexSyntax","qualname":"::string::error_container::Error::RegexSyntax","value":"Error::RegexSyntax(ParseError)","parent":{"krate":0,"index":8082},"children":[],"decl_id":null,"docs":" The string passed as the regex was not syntactically valid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8086},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":583878,"byte_end":583894,"line_start":78,"line_end":78,"column_start":13,"column_end":29},"name":"UnsupportedRegex","qualname":"::string::error_container::Error::UnsupportedRegex","value":"Error::UnsupportedRegex(&'static str)","parent":{"krate":0,"index":8082},"children":[],"decl_id":null,"docs":" The regex was syntactically valid, but contains elements not\n supported by proptest.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8082},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":583465,"byte_end":583470,"line_start":68,"line_end":68,"column_start":18,"column_end":23},"name":"Error","qualname":"::string::error_container::Error","value":"Error::{RegexSyntax, UnsupportedRegex}","parent":null,"children":[{"krate":0,"index":8083},{"krate":0,"index":8086}],"decl_id":null,"docs":" Errors which may occur when preparing a regular expression for use with\n string generation.\n","sig":null,"attributes":[{"value":"allow(unknown_lints)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-1.2.3/src/lib.rs","byte_start":7616901,"byte_end":7616924,"line_start":556,"line_end":556,"column_start":9,"column_end":32}},{"value":"allow(renamed_and_removed_lints)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-1.2.3/src/lib.rs","byte_start":7616974,"byte_end":7617009,"line_start":557,"line_end":557,"column_start":9,"column_end":44}},{"value":"allow(unused_doc_comment)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-1.2.3/src/lib.rs","byte_start":7617018,"byte_end":7617046,"line_start":558,"line_end":558,"column_start":9,"column_end":37}},{"value":"allow(unused_doc_comments)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-1.2.3/src/lib.rs","byte_start":7617055,"byte_end":7617084,"line_start":559,"line_end":559,"column_start":9,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":8111},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":584262,"byte_end":584284,"line_start":93,"line_end":93,"column_start":16,"column_end":38},"name":"RegexGeneratorStrategy","qualname":"::string::RegexGeneratorStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates values (i.e., `String` or `Vec<u8>`) matching\n a regular expression.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":8099},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":584449,"byte_end":584472,"line_start":96,"line_end":96,"column_start":16,"column_end":39},"name":"RegexGeneratorValueTree","qualname":"::string::RegexGeneratorValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `RegexGeneratorStrategy`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2190},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585228,"byte_end":585245,"line_start":119,"line_end":119,"column_start":11,"column_end":28},"name":"StrategyFromRegex","qualname":"::string::StrategyFromRegex","value":"StrategyFromRegex: Sized + fmt::Debug","parent":null,"children":[{"krate":0,"index":2191},{"krate":0,"index":2192}],"decl_id":null,"docs":" A type which knows how to produce a `Strategy` from a regular expression\n generating the type.","sig":null,"attributes":[{"value":"/ A type which knows how to produce a `Strategy` from a regular expression","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":584857,"byte_end":584933,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/ generating the type.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":584934,"byte_end":584958,"line_start":113,"line_end":113,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":584959,"byte_end":584962,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ This trait exists for the benefit of `#[proptest(regex = \"...\")]`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":584963,"byte_end":585033,"line_start":115,"line_end":115,"column_start":1,"column_end":71}},{"value":"/ It is semver exempt, so use at your own risk.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585034,"byte_end":585083,"line_start":116,"line_end":116,"column_start":1,"column_end":50}},{"value":"/ If you found a use for the trait beyond `Vec<u8>` and `String`,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585084,"byte_end":585151,"line_start":117,"line_end":117,"column_start":1,"column_end":68}},{"value":"/ please file an issue at https://github.com/AltSysrq/proptest.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585152,"byte_end":585217,"line_start":118,"line_end":118,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":2191},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585277,"byte_end":585285,"line_start":120,"line_end":120,"column_start":10,"column_end":18},"name":"Strategy","qualname":"::string::StrategyFromRegex::Strategy","value":"type Strategy: Strategy<Value = Self>;","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2192},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585375,"byte_end":585385,"line_start":123,"line_end":123,"column_start":8,"column_end":18},"name":"from_regex","qualname":"::string::StrategyFromRegex::from_regex","value":"fn (regex: &str) -> Self::Strategy","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" Produce a strategy for `Self` from the `regex`.\n","sig":null,"attributes":[{"value":"/ Produce a strategy for `Self` from the `regex`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585316,"byte_end":585367,"line_start":122,"line_end":122,"column_start":5,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":2199},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":586046,"byte_end":586058,"line_start":147,"line_end":147,"column_start":8,"column_end":20},"name":"string_regex","qualname":"::string::string_regex","value":"fn (regex: &str) -> ParseResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Creates a strategy which generates strings matching the given regular\n expression.","sig":null,"attributes":[{"value":"/ Creates a strategy which generates strings matching the given regular","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585789,"byte_end":585862,"line_start":142,"line_end":142,"column_start":1,"column_end":74}},{"value":"/ expression.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585863,"byte_end":585878,"line_start":143,"line_end":143,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585879,"byte_end":585882,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ If you don't need error handling and aren't limited by setup time, it is","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585883,"byte_end":585959,"line_start":145,"line_end":145,"column_start":1,"column_end":77}},{"value":"/ also possible to directly use a `&str` as a strategy with the same effect.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585960,"byte_end":586038,"line_start":146,"line_end":146,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":2200},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":586227,"byte_end":586246,"line_start":152,"line_end":152,"column_start":8,"column_end":27},"name":"string_regex_parsed","qualname":"::string::string_regex_parsed","value":"fn (expr: &Hir) -> ParseResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Like `string_regex()`, but allows providing a pre-parsed expression.\n","sig":null,"attributes":[{"value":"/ Like `string_regex()`, but allows providing a pre-parsed expression.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":586147,"byte_end":586219,"line_start":151,"line_end":151,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":2203},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":586622,"byte_end":586633,"line_start":165,"line_end":165,"column_start":8,"column_end":19},"name":"bytes_regex","qualname":"::string::bytes_regex","value":"fn (regex: &str) -> ParseResult<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a strategy which generates byte strings matching the given regular\n expression.\n","sig":null,"attributes":[{"value":"/ Creates a strategy which generates byte strings matching the given regular","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":586520,"byte_end":586598,"line_start":163,"line_end":163,"column_start":1,"column_end":79}},{"value":"/ expression.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":586599,"byte_end":586614,"line_start":164,"line_end":164,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":2204},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":586801,"byte_end":586819,"line_start":170,"line_end":170,"column_start":8,"column_end":26},"name":"bytes_regex_parsed","qualname":"::string::bytes_regex_parsed","value":"fn (expr: &Hir) -> ParseResult<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Like `bytes_regex()`, but allows providing a pre-parsed expression.\n","sig":null,"attributes":[{"value":"/ Like `bytes_regex()`, but allows providing a pre-parsed expression.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":586722,"byte_end":586793,"line_start":169,"line_end":169,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":2236},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","parent":null,"children":[{"krate":0,"index":2237},{"krate":0,"index":2241},{"krate":0,"index":2246},{"krate":0,"index":2247},{"krate":0,"index":2248},{"krate":0,"index":2256},{"krate":0,"index":2259}],"decl_id":null,"docs":" Re-exports the most commonly-needed APIs of proptest.","sig":null,"attributes":[{"value":"! Re-exports the most commonly-needed APIs of proptest.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598242,"byte_end":598299,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598300,"byte_end":598303,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! This module is intended to be wildcard-imported, i.e.,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598304,"byte_end":598362,"line_start":12,"line_end":12,"column_start":1,"column_end":59}},{"value":"! `use proptest::prelude::*;`. Note that it re-exports the whole crate itself","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598363,"byte_end":598442,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"! under the name `prop`, so you don't need a separate `use proptest;` line.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598443,"byte_end":598520,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598521,"byte_end":598524,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! In addition to Proptest's own APIs, this also reexports a small portion of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598525,"byte_end":598603,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"! the `rand` crate sufficient to easily use `prop_perturb` and other","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598604,"byte_end":598674,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"! functionality that exposes random number generators. Please note that this","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598675,"byte_end":598753,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"! is will always be a direct reexport; using these in preference to using the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598754,"byte_end":598833,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"! `rand` crate directly will not provide insulation from the upcoming","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598834,"byte_end":598905,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"! revision to the `rand` crate.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":598906,"byte_end":598939,"line_start":21,"line_end":21,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":2259},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599545,"byte_end":599549,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"name":"prop","qualname":"::prelude::prop","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","parent":null,"children":[{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273}],"decl_id":null,"docs":" Re-exports the entire public API of proptest so that an import of `prelude`\n allows simply writing, for example, `prop::num::i32::ANY` rather than\n `proptest::num::i32::ANY` plus a separate `use proptest;`.\n","sig":null,"attributes":[{"value":"/ Re-exports the entire public API of proptest so that an import of `prelude`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599320,"byte_end":599399,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ allows simply writing, for example, `prop::num::i32::ANY` rather than","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599400,"byte_end":599473,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ `proptest::num::i32::ANY` plus a separate `use proptest;`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/prelude.rs","byte_start":599474,"byte_end":599536,"line_start":36,"line_end":36,"column_start":1,"column_end":63}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sugar.rs","byte_start":46731,"byte_end":46745,"line_start":1058,"line_end":1058,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/sample.rs","byte_start":92826,"byte_end":92831,"line_start":13,"line_end":13,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/sample.rs","byte_start":93002,"byte_end":93010,"line_start":23,"line_end":23,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_core/iter.rs","byte_start":100433,"byte_end":100439,"line_start":38,"line_end":38,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_core/iter.rs","byte_start":101228,"byte_end":101231,"line_start":68,"line_end":68,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_core/iter.rs","byte_start":102208,"byte_end":102213,"line_start":107,"line_end":107,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_core/result.rs","byte_start":111314,"byte_end":111320,"line_start":58,"line_end":58,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_core/result.rs","byte_start":111784,"byte_end":111790,"line_start":74,"line_end":74,"column_start":67,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_alloc/collections.rs","byte_start":122628,"byte_end":122635,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_alloc/collections.rs","byte_start":123088,"byte_end":123096,"line_start":168,"line_end":168,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_alloc/collections.rs","byte_start":124180,"byte_end":124188,"line_start":206,"line_end":206,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_alloc/collections.rs","byte_start":124848,"byte_end":124856,"line_start":228,"line_end":228,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_std/string.rs","byte_start":153597,"byte_end":153603,"line_start":29,"line_end":29,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173929,"byte_end":173949,"line_start":58,"line_end":58,"column_start":12,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":185558,"byte_end":185561,"line_start":124,"line_end":124,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186591,"byte_end":186605,"line_start":172,"line_end":172,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":187333,"byte_end":187347,"line_start":197,"line_end":197,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188457,"byte_end":188478,"line_start":235,"line_end":235,"column_start":21,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":189619,"byte_end":189640,"line_start":269,"line_end":269,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":190629,"byte_end":190644,"line_start":306,"line_end":306,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":194756,"byte_end":194765,"line_start":448,"line_end":448,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":195263,"byte_end":195272,"line_start":464,"line_end":464,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":195880,"byte_end":195889,"line_start":490,"line_end":490,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":201698,"byte_end":201701,"line_start":26,"line_end":26,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202283,"byte_end":202291,"line_start":48,"line_end":48,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202749,"byte_end":202762,"line_start":71,"line_end":71,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202927,"byte_end":202940,"line_start":80,"line_end":80,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211367,"byte_end":211379,"line_start":179,"line_end":179,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":213467,"byte_end":213479,"line_start":248,"line_end":248,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":214465,"byte_end":214478,"line_start":282,"line_end":282,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":214732,"byte_end":214745,"line_start":292,"line_end":292,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219628,"byte_end":219637,"line_start":49,"line_end":49,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219777,"byte_end":219786,"line_start":56,"line_end":56,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":677},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":221826,"byte_end":221835,"line_start":122,"line_end":122,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":222021,"byte_end":222030,"line_start":129,"line_end":129,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":222207,"byte_end":222216,"line_start":136,"line_end":136,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":222404,"byte_end":222413,"line_start":143,"line_end":143,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":222595,"byte_end":222604,"line_start":150,"line_end":150,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":222827,"byte_end":222836,"line_start":157,"line_end":157,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":223393,"byte_end":223402,"line_start":181,"line_end":181,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":227966,"byte_end":227973,"line_start":323,"line_end":323,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":229684,"byte_end":229691,"line_start":374,"line_end":374,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":231405,"byte_end":231412,"line_start":426,"line_end":426,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":233311,"byte_end":233318,"line_start":484,"line_end":484,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":235316,"byte_end":235327,"line_start":548,"line_end":548,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":236028,"byte_end":236031,"line_start":570,"line_end":570,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":236610,"byte_end":236622,"line_start":591,"line_end":591,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":254042,"byte_end":254052,"line_start":366,"line_end":366,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":292299,"byte_end":292305,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":292525,"byte_end":292531,"line_start":35,"line_end":35,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":292818,"byte_end":292824,"line_start":45,"line_end":45,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":293074,"byte_end":293080,"line_start":55,"line_end":55,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":293676,"byte_end":293682,"line_start":75,"line_end":75,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":834}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":294070,"byte_end":294076,"line_start":88,"line_end":88,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":296227,"byte_end":296236,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":296456,"byte_end":296465,"line_start":35,"line_end":35,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":296755,"byte_end":296764,"line_start":45,"line_end":45,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":297039,"byte_end":297048,"line_start":56,"line_end":56,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":297743,"byte_end":297761,"line_start":81,"line_end":81,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":297925,"byte_end":297943,"line_start":88,"line_end":88,"column_start":42,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":298274,"byte_end":298292,"line_start":99,"line_end":99,"column_start":5,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":299210,"byte_end":299228,"line_start":131,"line_end":131,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":301986,"byte_end":301993,"line_start":26,"line_end":26,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":302139,"byte_end":302146,"line_start":33,"line_end":33,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":303549,"byte_end":303565,"line_start":70,"line_end":70,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":304033,"byte_end":304049,"line_start":87,"line_end":87,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":304583,"byte_end":304599,"line_start":106,"line_end":106,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":305046,"byte_end":305062,"line_start":122,"line_end":122,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":307884,"byte_end":307894,"line_start":205,"line_end":205,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":308498,"byte_end":308511,"line_start":227,"line_end":227,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":308762,"byte_end":308775,"line_start":236,"line_end":236,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":309008,"byte_end":309021,"line_start":246,"line_end":246,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314263,"byte_end":314267,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314497,"byte_end":314501,"line_start":59,"line_end":59,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314712,"byte_end":314716,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":316166,"byte_end":316170,"line_start":111,"line_end":111,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320139,"byte_end":320143,"line_start":39,"line_end":39,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320330,"byte_end":320334,"line_start":48,"line_end":48,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1008},{"krate":0,"index":6642},{"krate":0,"index":6643},{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321394,"byte_end":321402,"line_start":79,"line_end":79,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321708,"byte_end":321716,"line_start":89,"line_end":89,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321912,"byte_end":321920,"line_start":98,"line_end":98,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1029},{"krate":0,"index":6644},{"krate":0,"index":6645},{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":322078,"byte_end":322086,"line_start":106,"line_end":106,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":322137,"byte_end":322145,"line_start":108,"line_end":108,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":322300,"byte_end":322308,"line_start":116,"line_end":116,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":324041,"byte_end":324054,"line_start":34,"line_end":34,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":327006,"byte_end":327019,"line_start":119,"line_end":119,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":327187,"byte_end":327200,"line_start":130,"line_end":130,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":327436,"byte_end":327454,"line_start":141,"line_end":141,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":327878,"byte_end":327896,"line_start":159,"line_end":159,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1092}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":329321,"byte_end":329324,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1107}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":329565,"byte_end":329568,"line_start":39,"line_end":39,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1111}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":329789,"byte_end":329792,"line_start":48,"line_end":48,"column_start":69,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":330130,"byte_end":330133,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":330907,"byte_end":330914,"line_start":94,"line_end":94,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":331189,"byte_end":331196,"line_start":105,"line_end":105,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":331400,"byte_end":331407,"line_start":113,"line_end":113,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":331540,"byte_end":331547,"line_start":119,"line_end":119,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":331822,"byte_end":331829,"line_start":131,"line_end":131,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":332540,"byte_end":332547,"line_start":163,"line_end":163,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":332792,"byte_end":332799,"line_start":172,"line_end":172,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":333037,"byte_end":333044,"line_start":182,"line_end":182,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":333595,"byte_end":333611,"line_start":207,"line_end":207,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1188}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":333902,"byte_end":333918,"line_start":217,"line_end":217,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":334202,"byte_end":334218,"line_start":228,"line_end":228,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/recursive.rs","byte_start":336757,"byte_end":336766,"line_start":26,"line_end":26,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/recursive.rs","byte_start":337173,"byte_end":337182,"line_start":38,"line_end":38,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/recursive.rs","byte_start":337607,"byte_end":337616,"line_start":54,"line_end":54,"column_start":7,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/recursive.rs","byte_start":338139,"byte_end":338148,"line_start":77,"line_end":77,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":345589,"byte_end":345596,"line_start":90,"line_end":90,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":346723,"byte_end":346739,"line_start":128,"line_end":128,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1260},{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":347177,"byte_end":347193,"line_start":147,"line_end":147,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":377140,"byte_end":377148,"line_start":635,"line_end":635,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":377372,"byte_end":377380,"line_start":644,"line_end":644,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":378304,"byte_end":378307,"line_start":681,"line_end":681,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379386,"byte_end":379399,"line_start":716,"line_end":716,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1342}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379505,"byte_end":379519,"line_start":722,"line_end":722,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1345}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379641,"byte_end":379654,"line_start":728,"line_end":728,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":380014,"byte_end":380028,"line_start":746,"line_end":746,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":380587,"byte_end":380607,"line_start":773,"line_end":773,"column_start":32,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1363}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381821,"byte_end":381847,"line_start":809,"line_end":809,"column_start":18,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391702,"byte_end":391707,"line_start":40,"line_end":40,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1389},{"krate":0,"index":1392},{"krate":0,"index":1397},{"krate":0,"index":1399}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":394238,"byte_end":394243,"line_start":120,"line_end":120,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":398568,"byte_end":398582,"line_start":258,"line_end":258,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":6927},{"krate":0,"index":6928},{"krate":0,"index":6929},{"krate":0,"index":6930}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":398674,"byte_end":398688,"line_start":262,"line_end":262,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":398965,"byte_end":398979,"line_start":276,"line_end":276,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1426}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401327,"byte_end":401337,"line_start":342,"line_end":342,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1430}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":415200,"byte_end":415206,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":415678,"byte_end":415684,"line_start":65,"line_end":65,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":416005,"byte_end":416011,"line_start":75,"line_end":75,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":416599,"byte_end":416605,"line_start":95,"line_end":95,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1471}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":416994,"byte_end":417000,"line_start":108,"line_end":108,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":418005,"byte_end":418008,"line_start":155,"line_end":155,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1486}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":418209,"byte_end":418212,"line_start":162,"line_end":162,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":418484,"byte_end":418487,"line_start":171,"line_end":171,"column_start":60,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1494},{"krate":0,"index":1495},{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":418807,"byte_end":418810,"line_start":183,"line_end":183,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434596,"byte_end":434602,"line_start":356,"line_end":356,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":438239,"byte_end":438245,"line_start":479,"line_end":479,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1551}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439724,"byte_end":439737,"line_start":39,"line_end":39,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1558},{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440492,"byte_end":440505,"line_start":59,"line_end":59,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1563}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440875,"byte_end":440888,"line_start":71,"line_end":71,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1566}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441473,"byte_end":441482,"line_start":89,"line_end":89,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1569}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441953,"byte_end":441962,"line_start":104,"line_end":104,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":450330,"byte_end":450352,"line_start":78,"line_end":78,"column_start":18,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1608}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":450466,"byte_end":450488,"line_start":84,"line_end":84,"column_start":29,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1610},{"krate":0,"index":1616},{"krate":0,"index":1617},{"krate":0,"index":1618},{"krate":0,"index":1620}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":458338,"byte_end":458360,"line_start":328,"line_end":328,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1631}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/map.rs","byte_start":466758,"byte_end":466779,"line_start":26,"line_end":26,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1648},{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/noop.rs","byte_start":469510,"byte_end":469532,"line_start":21,"line_end":21,"column_start":29,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1666}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443109,"byte_end":443122,"line_start":35,"line_end":35,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1672}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443259,"byte_end":443272,"line_start":41,"line_end":41,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1674},{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":446636,"byte_end":446639,"line_start":139,"line_end":139,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1692}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471759,"byte_end":471765,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1700}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":472031,"byte_end":472037,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1702}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":472135,"byte_end":472141,"line_start":38,"line_end":38,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1704}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":472235,"byte_end":472241,"line_start":44,"line_end":44,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1706}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":472349,"byte_end":472355,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1708}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473370,"byte_end":473384,"line_start":28,"line_end":28,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474658,"byte_end":474674,"line_start":64,"line_end":64,"column_start":22,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1723},{"krate":0,"index":1735},{"krate":0,"index":1736}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474918,"byte_end":474928,"line_start":71,"line_end":71,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1733},{"krate":0,"index":1734}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":475829,"byte_end":475844,"line_start":105,"line_end":105,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478572,"byte_end":478584,"line_start":58,"line_end":58,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478657,"byte_end":478669,"line_start":64,"line_end":64,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1769},{"krate":0,"index":1770}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":479351,"byte_end":479363,"line_start":86,"line_end":86,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1772},{"krate":0,"index":1773}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":479518,"byte_end":479530,"line_start":92,"line_end":92,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":479962,"byte_end":479969,"line_start":115,"line_end":115,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1777},{"krate":0,"index":1779},{"krate":0,"index":1781},{"krate":0,"index":1782}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":482131,"byte_end":482135,"line_start":187,"line_end":187,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1784},{"krate":0,"index":1787},{"krate":0,"index":1793}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486445,"byte_end":486452,"line_start":319,"line_end":319,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1810}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":498922,"byte_end":498932,"line_start":81,"line_end":81,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1839}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":499533,"byte_end":499543,"line_start":96,"line_end":96,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1841}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":500195,"byte_end":500205,"line_start":117,"line_end":117,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1843}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":501213,"byte_end":501223,"line_start":164,"line_end":164,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1849}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":504809,"byte_end":504819,"line_start":293,"line_end":293,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1864},{"krate":0,"index":1865},{"krate":0,"index":1868},{"krate":0,"index":1871},{"krate":0,"index":1874},{"krate":0,"index":1879},{"krate":0,"index":1883},{"krate":0,"index":1886},{"krate":0,"index":1890},{"krate":0,"index":1897},{"krate":0,"index":1899},{"krate":0,"index":1901},{"krate":0,"index":1903},{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":543071,"byte_end":543085,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1918}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":547934,"byte_end":547945,"line_start":36,"line_end":36,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1929}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548076,"byte_end":548087,"line_start":43,"line_end":43,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1931}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548315,"byte_end":548326,"line_start":54,"line_end":54,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1936}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":550442,"byte_end":550454,"line_start":128,"line_end":128,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1946}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":550529,"byte_end":550541,"line_start":133,"line_end":133,"column_start":18,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":550571,"byte_end":550583,"line_start":134,"line_end":134,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1951}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":550723,"byte_end":550735,"line_start":139,"line_end":139,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":550914,"byte_end":550926,"line_start":147,"line_end":147,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552066,"byte_end":552080,"line_start":183,"line_end":183,"column_start":47,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1965}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552232,"byte_end":552247,"line_start":189,"line_end":189,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1968}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552391,"byte_end":552406,"line_start":198,"line_end":198,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1971}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556251,"byte_end":556257,"line_start":42,"line_end":42,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1995}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556338,"byte_end":556344,"line_start":47,"line_end":47,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556380,"byte_end":556386,"line_start":48,"line_end":48,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2002}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556547,"byte_end":556553,"line_start":53,"line_end":53,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2006},{"krate":0,"index":2007}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556735,"byte_end":556742,"line_start":60,"line_end":60,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2017}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556823,"byte_end":556830,"line_start":65,"line_end":65,"column_start":21,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556866,"byte_end":556873,"line_start":66,"line_end":66,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2024}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":557035,"byte_end":557042,"line_start":71,"line_end":71,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2028},{"krate":0,"index":2029}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":558927,"byte_end":558934,"line_start":121,"line_end":121,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2039}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":559129,"byte_end":559137,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2043}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":559299,"byte_end":559315,"line_start":135,"line_end":135,"column_start":42,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2047}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":559496,"byte_end":559512,"line_start":145,"line_end":145,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2051}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":559738,"byte_end":559755,"line_start":155,"line_end":155,"column_start":42,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2055}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":559937,"byte_end":559954,"line_start":165,"line_end":165,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2059}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":567380,"byte_end":567391,"line_start":81,"line_end":81,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2103}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":567935,"byte_end":567955,"line_start":100,"line_end":100,"column_start":53,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2106},{"krate":0,"index":2107},{"krate":0,"index":2109},{"krate":0,"index":2110}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":568470,"byte_end":568481,"line_start":121,"line_end":121,"column_start":65,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":2113},{"krate":0,"index":2114}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571841,"byte_end":571846,"line_start":215,"line_end":215,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2123}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573533,"byte_end":573546,"line_start":269,"line_end":269,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2127}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":575158,"byte_end":575174,"line_start":331,"line_end":331,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2129}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":575286,"byte_end":575302,"line_start":337,"line_end":337,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2133}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":575615,"byte_end":575632,"line_start":349,"line_end":349,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2137},{"krate":0,"index":2138}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576041,"byte_end":576049,"line_start":368,"line_end":368,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2140},{"krate":0,"index":2142}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":582843,"byte_end":582854,"line_start":45,"line_end":45,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2178}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":582945,"byte_end":582956,"line_start":51,"line_end":51,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2180}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585448,"byte_end":585454,"line_start":126,"line_end":126,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2194},{"krate":0,"index":2195}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585632,"byte_end":585635,"line_start":134,"line_end":134,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2197},{"krate":0,"index":2198}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":590252,"byte_end":590262,"line_start":283,"line_end":283,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2228},{"krate":0,"index":2229}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":1320,"byte_end":1330,"line_start":44,"line_end":44,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2056,"byte_end":2061,"line_start":89,"line_end":89,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":22}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2072,"byte_end":2081,"line_start":91,"line_end":91,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":37}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/mod.rs","byte_start":64894,"byte_end":64901,"line_start":27,"line_end":27,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":65}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2091,"byte_end":2096,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":492}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2106,"byte_end":2110,"line_start":93,"line_end":93,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":501}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2120,"byte_end":2124,"line_start":94,"line_end":94,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":583}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2134,"byte_end":2138,"line_start":95,"line_end":95,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":604}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2148,"byte_end":2158,"line_start":96,"line_end":96,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":641}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2168,"byte_end":2171,"line_start":97,"line_end":97,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":761}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2181,"byte_end":2189,"line_start":98,"line_end":98,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":800}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/mod.rs","byte_start":291593,"byte_end":291600,"line_start":37,"line_end":37,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1447}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2199,"byte_end":2210,"line_start":99,"line_end":99,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1513}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2220,"byte_end":2225,"line_start":100,"line_end":100,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1913}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2236,"byte_end":2242,"line_start":102,"line_end":102,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1920}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2252,"byte_end":2258,"line_start":103,"line_end":103,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1977}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2268,"byte_end":2274,"line_start":104,"line_end":104,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2074}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2308,"byte_end":2314,"line_start":106,"line_end":106,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2144}},{"kind":"Mod","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/lib.rs","byte_start":2325,"byte_end":2332,"line_start":108,"line_end":108,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2236}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sugar.rs","byte_start":46731,"byte_end":46745,"line_start":1058,"line_end":1058,"column_start":36,"column_end":50},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2297},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":67997,"byte_end":68002,"line_start":45,"line_end":45,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":45}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/traits.rs","byte_start":68010,"byte_end":68015,"line_start":45,"line_end":45,"column_start":35,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":6069},"to":{"krate":0,"index":45}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78564,"byte_end":78569,"line_start":41,"line_end":41,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":6069},"to":{"krate":0,"index":70}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":78572,"byte_end":78577,"line_start":41,"line_end":41,"column_start":52,"column_end":57},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":70}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82439,"byte_end":82444,"line_start":131,"line_end":131,"column_start":10,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":6069},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/functor.rs","byte_start":82447,"byte_end":82452,"line_start":131,"line_end":131,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/sample.rs","byte_start":92826,"byte_end":92831,"line_start":13,"line_end":13,"column_start":20,"column_end":25},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":8001},"to":{"krate":0,"index":45}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/sample.rs","byte_start":93002,"byte_end":93010,"line_start":23,"line_end":23,"column_start":20,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":8042},"to":{"krate":0,"index":45}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_core/iter.rs","byte_start":100433,"byte_end":100439,"line_start":38,"line_end":38,"column_start":35,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":1,"index":28833},"to":{"krate":0,"index":70}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_core/iter.rs","byte_start":101228,"byte_end":101231,"line_start":68,"line_end":68,"column_start":36,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":28800},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_core/iter.rs","byte_start":102208,"byte_end":102213,"line_start":107,"line_end":107,"column_start":38,"column_end":43},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":28764},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_core/result.rs","byte_start":111314,"byte_end":111320,"line_start":58,"line_end":58,"column_start":63,"column_end":69},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":29668},"to":{"krate":0,"index":70}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_core/result.rs","byte_start":111784,"byte_end":111790,"line_start":74,"line_end":74,"column_start":67,"column_end":73},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":29668},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_alloc/collections.rs","byte_start":122628,"byte_end":122635,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"kind":{"Impl":{"id":52}},"from":{"krate":4,"index":6209},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_alloc/collections.rs","byte_start":123088,"byte_end":123096,"line_start":168,"line_end":168,"column_start":46,"column_end":54},"kind":{"Impl":{"id":53}},"from":{"krate":4,"index":718},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_alloc/collections.rs","byte_start":124180,"byte_end":124188,"line_start":206,"line_end":206,"column_start":9,"column_end":17},"kind":{"Impl":{"id":56}},"from":{"krate":5,"index":670},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_alloc/collections.rs","byte_start":124848,"byte_end":124856,"line_start":228,"line_end":228,"column_start":47,"column_end":55},"kind":{"Impl":{"id":58}},"from":{"krate":5,"index":718},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/arbitrary/_std/string.rs","byte_start":153597,"byte_end":153603,"line_start":29,"line_end":29,"column_start":20,"column_end":26},"kind":{"Impl":{"id":106}},"from":{"krate":5,"index":4867},"to":{"krate":0,"index":45}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/array.rs","byte_start":173929,"byte_end":173949,"line_start":58,"line_end":58,"column_start":12,"column_end":32},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":4064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183319,"byte_end":183324,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1606},"to":{"krate":0,"index":515}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":183332,"byte_end":183337,"line_start":34,"line_end":34,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":6069},"to":{"krate":0,"index":515}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":185558,"byte_end":185561,"line_start":124,"line_end":124,"column_start":21,"column_end":24},"kind":{"Impl":{"id":134}},"from":{"krate":5,"index":4166},"to":{"krate":0,"index":515}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":186591,"byte_end":186605,"line_start":172,"line_end":172,"column_start":21,"column_end":35},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":5059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":187333,"byte_end":187347,"line_start":197,"line_end":197,"column_start":34,"column_end":48},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":5059},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":188457,"byte_end":188478,"line_start":235,"line_end":235,"column_start":21,"column_end":42},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":5072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":189619,"byte_end":189640,"line_start":269,"line_end":269,"column_start":34,"column_end":55},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":5072},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":190629,"byte_end":190644,"line_start":306,"line_end":306,"column_start":35,"column_end":50},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":5083},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":194756,"byte_end":194765,"line_start":448,"line_end":448,"column_start":10,"column_end":19},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":5182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":195263,"byte_end":195272,"line_start":464,"line_end":464,"column_start":25,"column_end":34},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":5182},"to":{"krate":0,"index":515}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bits.rs","byte_start":195880,"byte_end":195889,"line_start":490,"line_end":490,"column_start":34,"column_end":43},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":5182},"to":{"krate":1,"index":4755}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":201698,"byte_end":201701,"line_start":26,"line_end":26,"column_start":19,"column_end":22},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":5189},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202283,"byte_end":202291,"line_start":48,"line_end":48,"column_start":19,"column_end":27},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":5197},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202749,"byte_end":202762,"line_start":71,"line_end":71,"column_start":6,"column_end":19},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":5205},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/bool.rs","byte_start":202927,"byte_end":202940,"line_start":80,"line_end":80,"column_start":20,"column_end":33},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":5205},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":211367,"byte_end":211379,"line_start":179,"line_end":179,"column_start":10,"column_end":22},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":5228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":213467,"byte_end":213479,"line_start":248,"line_end":248,"column_start":23,"column_end":35},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":5228},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":214465,"byte_end":214478,"line_start":282,"line_end":282,"column_start":6,"column_end":19},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":5239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/char.rs","byte_start":214732,"byte_end":214745,"line_start":292,"line_end":292,"column_start":20,"column_end":33},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":5239},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219628,"byte_end":219637,"line_start":49,"line_end":49,"column_start":18,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":5246},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":219777,"byte_end":219786,"line_start":56,"line_end":56,"column_start":6,"column_end":15},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":221826,"byte_end":221835,"line_start":122,"line_end":122,"column_start":31,"column_end":40},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5246},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":222021,"byte_end":222030,"line_start":129,"line_end":129,"column_start":22,"column_end":31},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":5246},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":222207,"byte_end":222216,"line_start":136,"line_end":136,"column_start":31,"column_end":40},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":5246},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":222404,"byte_end":222413,"line_start":143,"line_end":143,"column_start":29,"column_end":38},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":5246},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":222595,"byte_end":222604,"line_start":150,"line_end":150,"column_start":38,"column_end":47},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":5246},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":222827,"byte_end":222836,"line_start":157,"line_end":157,"column_start":40,"column_end":49},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":5246},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":223393,"byte_end":223402,"line_start":181,"line_end":181,"column_start":21,"column_end":30},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":5246},"to":{"krate":1,"index":1967}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":227966,"byte_end":227973,"line_start":323,"line_end":323,"column_start":54,"column_end":61},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":5410},"to":{"krate":0,"index":1451}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":229684,"byte_end":229691,"line_start":374,"line_end":374,"column_start":49,"column_end":56},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":5410},"to":{"krate":0,"index":1451}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":231405,"byte_end":231412,"line_start":426,"line_end":426,"column_start":60,"column_end":67},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":5410},"to":{"krate":0,"index":1451}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":233311,"byte_end":233318,"line_start":484,"line_end":484,"column_start":55,"column_end":62},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":5410},"to":{"krate":0,"index":1451}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":235316,"byte_end":235327,"line_start":548,"line_end":548,"column_start":32,"column_end":43},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":5263},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":236028,"byte_end":236031,"line_start":570,"line_end":570,"column_start":32,"column_end":35},"kind":{"Impl":{"id":165}},"from":{"krate":5,"index":4166},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/collection.rs","byte_start":236610,"byte_end":236622,"line_start":591,"line_end":591,"column_start":34,"column_end":46},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":5605},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/num.rs","byte_start":254042,"byte_end":254052,"line_start":366,"line_end":366,"column_start":6,"column_end":16},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":6308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":292299,"byte_end":292305,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":292525,"byte_end":292531,"line_start":35,"line_end":35,"column_start":39,"column_end":45},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":292818,"byte_end":292824,"line_start":45,"line_end":45,"column_start":29,"column_end":35},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":293074,"byte_end":293080,"line_start":55,"line_end":55,"column_start":58,"column_end":64},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":807},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":293676,"byte_end":293682,"line_start":75,"line_end":75,"column_start":46,"column_end":52},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter.rs","byte_start":294070,"byte_end":294076,"line_start":88,"line_end":88,"column_start":60,"column_end":66},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":807},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":296227,"byte_end":296236,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":849},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":296456,"byte_end":296465,"line_start":35,"line_end":35,"column_start":39,"column_end":48},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":849},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":296755,"byte_end":296764,"line_start":45,"line_end":45,"column_start":29,"column_end":38},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":849},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":297039,"byte_end":297048,"line_start":56,"line_end":56,"column_start":9,"column_end":18},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":849},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":297743,"byte_end":297761,"line_start":81,"line_end":81,"column_start":9,"column_end":27},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":874},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":297925,"byte_end":297943,"line_start":88,"line_end":88,"column_start":42,"column_end":60},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":874},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":298274,"byte_end":298292,"line_start":99,"line_end":99,"column_start":5,"column_end":23},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/filter_map.rs","byte_start":299210,"byte_end":299228,"line_start":131,"line_end":131,"column_start":9,"column_end":27},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":874},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":301986,"byte_end":301993,"line_start":26,"line_end":26,"column_start":19,"column_end":26},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":6594},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":302139,"byte_end":302146,"line_start":33,"line_end":33,"column_start":32,"column_end":39},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":6594},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":303549,"byte_end":303565,"line_start":70,"line_end":70,"column_start":30,"column_end":46},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":922},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":304033,"byte_end":304049,"line_start":87,"line_end":87,"column_start":35,"column_end":51},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":922},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":304583,"byte_end":304599,"line_start":106,"line_end":106,"column_start":20,"column_end":36},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":922},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":305046,"byte_end":305062,"line_start":122,"line_end":122,"column_start":34,"column_end":50},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":922},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":307884,"byte_end":307894,"line_start":205,"line_end":205,"column_start":32,"column_end":42},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":6605},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":308498,"byte_end":308511,"line_start":227,"line_end":227,"column_start":39,"column_end":52},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":308762,"byte_end":308775,"line_start":236,"line_end":236,"column_start":29,"column_end":42},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/flatten.rs","byte_start":309008,"byte_end":309021,"line_start":246,"line_end":246,"column_start":9,"column_end":22},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":949},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314263,"byte_end":314267,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":6617},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314497,"byte_end":314501,"line_start":59,"line_end":59,"column_start":32,"column_end":36},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":6617},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":314712,"byte_end":314716,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":6617},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/fuse.rs","byte_start":316166,"byte_end":316170,"line_start":111,"line_end":111,"column_start":34,"column_end":38},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":6617},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320139,"byte_end":320143,"line_start":39,"line_end":39,"column_start":42,"column_end":46},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":6630},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":320330,"byte_end":320334,"line_start":48,"line_end":48,"column_start":43,"column_end":47},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":6630},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321394,"byte_end":321402,"line_start":79,"line_end":79,"column_start":23,"column_end":31},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1010},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321708,"byte_end":321716,"line_start":89,"line_end":89,"column_start":56,"column_end":64},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1010},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":321912,"byte_end":321920,"line_start":98,"line_end":98,"column_start":49,"column_end":57},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1010},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":322078,"byte_end":322086,"line_start":106,"line_end":106,"column_start":39,"column_end":47},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1010},"to":{"krate":1,"index":1914}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":322137,"byte_end":322145,"line_start":108,"line_end":108,"column_start":41,"column_end":49},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1010},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/just.rs","byte_start":322300,"byte_end":322308,"line_start":116,"line_end":116,"column_start":38,"column_end":46},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1010},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":324041,"byte_end":324054,"line_start":34,"line_end":34,"column_start":19,"column_end":32},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":327006,"byte_end":327019,"line_start":119,"line_end":119,"column_start":29,"column_end":42},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1058},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":327187,"byte_end":327200,"line_start":130,"line_end":130,"column_start":34,"column_end":47},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1058},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":327436,"byte_end":327454,"line_start":141,"line_end":141,"column_start":29,"column_end":47},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1061},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/lazy.rs","byte_start":327878,"byte_end":327896,"line_start":159,"line_end":159,"column_start":34,"column_end":52},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1061},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":329321,"byte_end":329324,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1099},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":329565,"byte_end":329568,"line_start":39,"line_end":39,"column_start":29,"column_end":32},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1099},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":329789,"byte_end":329792,"line_start":48,"line_end":48,"column_start":69,"column_end":72},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1099},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":330130,"byte_end":330133,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1099},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":330907,"byte_end":330914,"line_start":94,"line_end":94,"column_start":12,"column_end":19},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":331189,"byte_end":331196,"line_start":105,"line_end":105,"column_start":39,"column_end":46},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":1128},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":331400,"byte_end":331407,"line_start":113,"line_end":113,"column_start":29,"column_end":36},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":1128},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":331540,"byte_end":331547,"line_start":119,"line_end":119,"column_start":47,"column_end":54},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":1128},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":331822,"byte_end":331829,"line_start":131,"line_end":131,"column_start":49,"column_end":56},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1128},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":332540,"byte_end":332547,"line_start":163,"line_end":163,"column_start":39,"column_end":46},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1158},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":332792,"byte_end":332799,"line_start":172,"line_end":172,"column_start":29,"column_end":36},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":1158},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":333037,"byte_end":333044,"line_start":182,"line_end":182,"column_start":9,"column_end":16},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":1158},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":333595,"byte_end":333611,"line_start":207,"line_end":207,"column_start":39,"column_end":55},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":1179},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":333902,"byte_end":333918,"line_start":217,"line_end":217,"column_start":29,"column_end":45},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1179},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/map.rs","byte_start":334202,"byte_end":334218,"line_start":228,"line_end":228,"column_start":9,"column_end":25},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1179},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/recursive.rs","byte_start":336757,"byte_end":336766,"line_start":26,"line_end":26,"column_start":39,"column_end":48},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1210},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/recursive.rs","byte_start":337173,"byte_end":337182,"line_start":38,"line_end":38,"column_start":22,"column_end":31},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1210},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/recursive.rs","byte_start":337607,"byte_end":337616,"line_start":54,"line_end":54,"column_start":7,"column_end":16},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":1210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/recursive.rs","byte_start":338139,"byte_end":338148,"line_start":77,"line_end":77,"column_start":20,"column_end":29},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":1210},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":345589,"byte_end":345596,"line_start":90,"line_end":90,"column_start":32,"column_end":39},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":6648},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":346723,"byte_end":346739,"line_start":128,"line_end":128,"column_start":20,"column_end":36},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":6835},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/shuffle.rs","byte_start":347177,"byte_end":347193,"line_start":147,"line_end":147,"column_start":34,"column_end":50},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":6835},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":352896,"byte_end":352901,"line_start":37,"line_end":37,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":6069},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":377140,"byte_end":377148,"line_start":635,"line_end":635,"column_start":32,"column_end":40},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":6847},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":377372,"byte_end":377380,"line_start":644,"line_end":644,"column_start":34,"column_end":42},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":6847},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":378304,"byte_end":378307,"line_start":681,"line_end":681,"column_start":43,"column_end":46},"kind":{"Impl":{"id":240}},"from":{"krate":5,"index":81},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379386,"byte_end":379399,"line_start":716,"line_end":716,"column_start":19,"column_end":32},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":6886},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379505,"byte_end":379519,"line_start":722,"line_end":722,"column_start":19,"column_end":33},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":6893},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":379641,"byte_end":379654,"line_start":728,"line_end":728,"column_start":34,"column_end":47},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":6886},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":380014,"byte_end":380028,"line_start":746,"line_end":746,"column_start":34,"column_end":48},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":6893},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":380587,"byte_end":380607,"line_start":773,"line_end":773,"column_start":32,"column_end":52},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":6900},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/traits.rs","byte_start":381821,"byte_end":381847,"line_start":809,"line_end":809,"column_start":18,"column_end":44},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":6907},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":391702,"byte_end":391707,"line_start":40,"line_end":40,"column_start":19,"column_end":24},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":6916},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":394238,"byte_end":394243,"line_start":120,"line_end":120,"column_start":32,"column_end":37},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":6916},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":398568,"byte_end":398582,"line_start":258,"line_end":258,"column_start":33,"column_end":47},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":1412},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":398674,"byte_end":398688,"line_start":262,"line_end":262,"column_start":29,"column_end":43},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":1412},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":398965,"byte_end":398979,"line_start":276,"line_end":276,"column_start":34,"column_end":48},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":1412},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/unions.rs","byte_start":401327,"byte_end":401337,"line_start":342,"line_end":342,"column_start":9,"column_end":19},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":6943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":415200,"byte_end":415206,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":7320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":415678,"byte_end":415684,"line_start":65,"line_end":65,"column_start":39,"column_end":45},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":7320},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":416005,"byte_end":416011,"line_start":75,"line_end":75,"column_start":63,"column_end":69},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":7320},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":416599,"byte_end":416605,"line_start":95,"line_end":95,"column_start":43,"column_end":49},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":7320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":416994,"byte_end":417000,"line_start":108,"line_end":108,"column_start":57,"column_end":63},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":7320},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":418005,"byte_end":418008,"line_start":155,"line_end":155,"column_start":12,"column_end":15},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":7330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":418209,"byte_end":418212,"line_start":162,"line_end":162,"column_start":39,"column_end":42},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":7330},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":418484,"byte_end":418487,"line_start":171,"line_end":171,"column_start":60,"column_end":63},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":7330},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/strategy/statics.rs","byte_start":418807,"byte_end":418810,"line_start":183,"line_end":183,"column_start":54,"column_end":57},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":7330},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":434596,"byte_end":434602,"line_start":356,"line_end":356,"column_start":6,"column_end":12},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":7350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/config.rs","byte_start":438239,"byte_end":438245,"line_start":479,"line_end":479,"column_start":18,"column_end":24},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":7350},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":439724,"byte_end":439737,"line_start":39,"line_end":39,"column_start":6,"column_end":19},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":7372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440492,"byte_end":440505,"line_start":59,"line_end":59,"column_start":23,"column_end":36},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":7372},"to":{"krate":1,"index":6074}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":440875,"byte_end":440888,"line_start":71,"line_end":71,"column_start":42,"column_end":55},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":7372},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441473,"byte_end":441482,"line_start":89,"line_end":89,"column_start":38,"column_end":47},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":7383},"to":{"krate":1,"index":6074}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/errors.rs","byte_start":441953,"byte_end":441962,"line_start":104,"line_end":104,"column_start":45,"column_end":54},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":7383},"to":{"krate":4,"index":1634}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":450330,"byte_end":450352,"line_start":78,"line_end":78,"column_start":18,"column_end":40},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":7409},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":450466,"byte_end":450488,"line_start":84,"line_end":84,"column_start":29,"column_end":51},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":7409},"to":{"krate":0,"index":1676}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/file.rs","byte_start":458338,"byte_end":458360,"line_start":328,"line_end":328,"column_start":6,"column_end":28},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":7409},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/map.rs","byte_start":466758,"byte_end":466779,"line_start":26,"line_end":26,"column_start":29,"column_end":50},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":7445},"to":{"krate":0,"index":1676}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/noop.rs","byte_start":469510,"byte_end":469532,"line_start":21,"line_end":21,"column_start":29,"column_end":51},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":7457},"to":{"krate":0,"index":1676}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443109,"byte_end":443122,"line_start":35,"line_end":35,"column_start":18,"column_end":31},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":7466},"to":{"krate":1,"index":6074}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443259,"byte_end":443272,"line_start":41,"line_end":41,"column_start":18,"column_end":31},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":7466},"to":{"krate":1,"index":7596}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443774,"byte_end":443778,"line_start":55,"line_end":55,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1904},"to":{"krate":0,"index":1676}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443781,"byte_end":443785,"line_start":55,"line_end":55,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":1916},"to":{"krate":0,"index":1676}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":443793,"byte_end":443798,"line_start":55,"line_end":55,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":6069},"to":{"krate":0,"index":1676}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/failure_persistence/mod.rs","byte_start":446636,"byte_end":446639,"line_start":139,"line_end":139,"column_start":16,"column_end":19},"kind":{"Impl":{"id":276}},"from":{"krate":5,"index":81},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":471759,"byte_end":471765,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":7488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":472031,"byte_end":472037,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":7488},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":472135,"byte_end":472141,"line_start":38,"line_end":38,"column_start":23,"column_end":29},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":7488},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":472235,"byte_end":472241,"line_start":44,"line_end":44,"column_start":25,"column_end":31},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":7488},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/reason.rs","byte_start":472349,"byte_end":472355,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":7488},"to":{"krate":1,"index":6074}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":473370,"byte_end":473384,"line_start":28,"line_end":28,"column_start":10,"column_end":24},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":7513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474658,"byte_end":474674,"line_start":64,"line_end":64,"column_start":22,"column_end":38},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":7519},"to":{"krate":0,"index":1718}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":474918,"byte_end":474928,"line_start":71,"line_end":71,"column_start":28,"column_end":38},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":1729},"to":{"krate":4,"index":2943}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/result_cache.rs","byte_start":475829,"byte_end":475844,"line_start":105,"line_end":105,"column_start":22,"column_end":37},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":1738},"to":{"krate":0,"index":1718}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478572,"byte_end":478584,"line_start":58,"line_end":58,"column_start":18,"column_end":30},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":7527},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":478657,"byte_end":478669,"line_start":64,"line_end":64,"column_start":6,"column_end":18},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":7527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":479351,"byte_end":479363,"line_start":86,"line_end":86,"column_start":23,"column_end":35},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":7527},"to":{"krate":1,"index":7596}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":479518,"byte_end":479530,"line_start":92,"line_end":92,"column_start":23,"column_end":35},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":7527},"to":{"krate":1,"index":6074}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":479962,"byte_end":479969,"line_start":115,"line_end":115,"column_start":18,"column_end":25},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":7547},"to":{"krate":19,"index":141}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":482131,"byte_end":482135,"line_start":187,"line_end":187,"column_start":6,"column_end":10},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":7568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/rng.rs","byte_start":486445,"byte_end":486452,"line_start":319,"line_end":319,"column_start":6,"column_end":13},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":7547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":498922,"byte_end":498932,"line_start":81,"line_end":81,"column_start":21,"column_end":31},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":7606},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":499533,"byte_end":499543,"line_start":96,"line_end":96,"column_start":23,"column_end":33},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":7606},"to":{"krate":1,"index":6074}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":500195,"byte_end":500205,"line_start":117,"line_end":117,"column_start":18,"column_end":28},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":7606},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":501213,"byte_end":501223,"line_start":164,"line_end":164,"column_start":6,"column_end":16},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":7617},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/test_runner/runner.rs","byte_start":504809,"byte_end":504819,"line_start":293,"line_end":293,"column_start":6,"column_end":16},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":7606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/tuple.rs","byte_start":543071,"byte_end":543085,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":7628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":547934,"byte_end":547945,"line_start":36,"line_end":36,"column_start":18,"column_end":29},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":7841},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548076,"byte_end":548087,"line_start":43,"line_end":43,"column_start":20,"column_end":31},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":7841},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":548315,"byte_end":548326,"line_start":54,"line_end":54,"column_start":6,"column_end":17},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":7841},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":550442,"byte_end":550454,"line_start":128,"line_end":128,"column_start":19,"column_end":31},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":1940},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":550529,"byte_end":550541,"line_start":133,"line_end":133,"column_start":18,"column_end":30},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":1940},"to":{"krate":1,"index":1914}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":550571,"byte_end":550583,"line_start":134,"line_end":134,"column_start":24,"column_end":36},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":1940},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":550723,"byte_end":550735,"line_start":139,"line_end":139,"column_start":34,"column_end":46},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":1940},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":550914,"byte_end":550926,"line_start":147,"line_end":147,"column_start":35,"column_end":47},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":1940},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552066,"byte_end":552080,"line_start":183,"line_end":183,"column_start":47,"column_end":61},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":7876},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552232,"byte_end":552247,"line_start":189,"line_end":189,"column_start":29,"column_end":44},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":7864},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/option.rs","byte_start":552391,"byte_end":552406,"line_start":198,"line_end":198,"column_start":34,"column_end":49},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":7864},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556251,"byte_end":556257,"line_start":42,"line_end":42,"column_start":22,"column_end":28},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":1986},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556338,"byte_end":556344,"line_start":47,"line_end":47,"column_start":21,"column_end":27},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":1986},"to":{"krate":1,"index":1914}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556380,"byte_end":556386,"line_start":48,"line_end":48,"column_start":27,"column_end":33},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":1986},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556547,"byte_end":556553,"line_start":53,"line_end":53,"column_start":58,"column_end":64},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":1986},"to":{"krate":0,"index":1479}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556735,"byte_end":556742,"line_start":60,"line_end":60,"column_start":22,"column_end":29},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":2008},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556823,"byte_end":556830,"line_start":65,"line_end":65,"column_start":21,"column_end":28},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":2008},"to":{"krate":1,"index":1914}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":556866,"byte_end":556873,"line_start":66,"line_end":66,"column_start":27,"column_end":34},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":2008},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":557035,"byte_end":557042,"line_start":71,"line_end":71,"column_start":58,"column_end":65},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":2008},"to":{"krate":0,"index":1479}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":558927,"byte_end":558934,"line_start":121,"line_end":121,"column_start":9,"column_end":16},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":7901},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":559129,"byte_end":559137,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":7928},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":559299,"byte_end":559315,"line_start":135,"line_end":135,"column_start":42,"column_end":58},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":7886},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":559496,"byte_end":559512,"line_start":145,"line_end":145,"column_start":47,"column_end":63},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":7886},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":559738,"byte_end":559755,"line_start":155,"line_end":155,"column_start":42,"column_end":59},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":7913},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/result.rs","byte_start":559937,"byte_end":559954,"line_start":165,"line_end":165,"column_start":47,"column_end":64},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":7913},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":567380,"byte_end":567391,"line_start":81,"line_end":81,"column_start":52,"column_end":63},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":7940},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":567935,"byte_end":567955,"line_start":100,"line_end":100,"column_start":53,"column_end":73},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":7950},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":568470,"byte_end":568481,"line_start":121,"line_end":121,"column_start":65,"column_end":76},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":7960},"to":{"krate":0,"index":1479}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":571841,"byte_end":571846,"line_start":215,"line_end":215,"column_start":6,"column_end":11},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":8001},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":573533,"byte_end":573546,"line_start":269,"line_end":269,"column_start":6,"column_end":19},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":8025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":575158,"byte_end":575174,"line_start":331,"line_end":331,"column_start":6,"column_end":22},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":8049},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":575286,"byte_end":575302,"line_start":337,"line_end":337,"column_start":19,"column_end":35},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":8049},"to":{"krate":0,"index":1279}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":575615,"byte_end":575632,"line_start":349,"line_end":349,"column_start":20,"column_end":37},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":8053},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/sample.rs","byte_start":576041,"byte_end":576049,"line_start":368,"line_end":368,"column_start":6,"column_end":14},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":8042},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":582843,"byte_end":582854,"line_start":45,"line_end":45,"column_start":29,"column_end":40},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":8058},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":582945,"byte_end":582956,"line_start":51,"line_end":51,"column_start":18,"column_end":29},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":8058},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585247,"byte_end":585252,"line_start":119,"line_end":119,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":2190}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585260,"byte_end":585265,"line_start":119,"line_end":119,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":6069},"to":{"krate":0,"index":2190}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585448,"byte_end":585454,"line_start":126,"line_end":126,"column_start":28,"column_end":34},"kind":{"Impl":{"id":337}},"from":{"krate":5,"index":4867},"to":{"krate":0,"index":2190}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":585632,"byte_end":585635,"line_start":134,"line_end":134,"column_start":28,"column_end":31},"kind":{"Impl":{"id":338}},"from":{"krate":5,"index":4166},"to":{"krate":0,"index":2190}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-0.10.0/src/string.rs","byte_start":590252,"byte_end":590262,"line_start":283,"line_end":283,"column_start":52,"column_end":62},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":2217},"to":{"krate":1,"index":4852}}]}