{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0","program":"/home/rob/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","zeroize","--edition=2018","/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=cd6b00df37d9d5fc","-C","extra-filename=-cd6b00df37d9d5fc","--out-dir","/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps","-L","dependency=/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/rob/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/rob/Programming/Ergo/projects/sigma-rust/sigma-tree/target/rls/debug/deps/libzeroize-cd6b00df37d9d5fc.rmeta"},"prelude":{"crate_id":{"name":"zeroize","disambiguator":[1712467034412164141,3880212341288837417]},"crate_root":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src","external_crates":[{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16221439354469382097,15565837348772828253]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15613252303691562375,4556165055238676072]}},{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[12269617896898487533,65142111397584226]}}],"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":0,"byte_end":15440,"line_start":1,"line_end":476,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":0,"byte_end":15440,"line_start":1,"line_end":476,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":9},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":16},{"krate":0,"index":69},{"krate":0,"index":73},{"krate":0,"index":77},{"krate":0,"index":81},{"krate":0,"index":85},{"krate":0,"index":89},{"krate":0,"index":93},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":105},{"krate":0,"index":109},{"krate":0,"index":113},{"krate":0,"index":117},{"krate":0,"index":121},{"krate":0,"index":125},{"krate":0,"index":129},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":141},{"krate":0,"index":145},{"krate":0,"index":149},{"krate":0,"index":153},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":165},{"krate":0,"index":169},{"krate":0,"index":173},{"krate":0,"index":177},{"krate":0,"index":181},{"krate":0,"index":185},{"krate":0,"index":189},{"krate":0,"index":193},{"krate":0,"index":197},{"krate":0,"index":201},{"krate":0,"index":205},{"krate":0,"index":209},{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":225},{"krate":0,"index":229},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":241},{"krate":0,"index":245},{"krate":0,"index":249},{"krate":0,"index":253},{"krate":0,"index":257},{"krate":0,"index":261},{"krate":0,"index":265},{"krate":0,"index":269},{"krate":0,"index":273},{"krate":0,"index":277},{"krate":0,"index":281},{"krate":0,"index":285},{"krate":0,"index":289},{"krate":0,"index":293},{"krate":0,"index":297},{"krate":0,"index":301},{"krate":0,"index":305},{"krate":0,"index":309},{"krate":0,"index":313},{"krate":0,"index":317},{"krate":0,"index":321},{"krate":0,"index":17},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":325},{"krate":0,"index":343},{"krate":0,"index":340},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":51}],"decl_id":null,"docs":" Securely zero memory with a simple trait ([Zeroize]) built on stable Rust\n primitives which guarantee the operation will not be \"optimized away\".","sig":null,"attributes":[{"value":"! Securely zero memory with a simple trait ([Zeroize]) built on stable Rust","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":0,"byte_end":77,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"! primitives which guarantee the operation will not be \"optimized away\".","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":78,"byte_end":152,"line_start":2,"line_end":2,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":153,"byte_end":156,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! ## About","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":157,"byte_end":169,"line_start":4,"line_end":4,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":170,"byte_end":173,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! [Zeroing memory securely is hard] - compilers optimize for performance, and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":174,"byte_end":253,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"! in doing so they love to \"optimize away\" unnecessary zeroing calls. There are","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":254,"byte_end":335,"line_start":7,"line_end":7,"column_start":1,"column_end":82}},{"value":"! many documented \"tricks\" to attempt to avoid these optimizations and ensure","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":336,"byte_end":415,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"! that a zeroing routine is performed reliably.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":416,"byte_end":465,"line_start":9,"line_end":9,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":466,"byte_end":469,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! This crate isn't about tricks: it uses [core::ptr::write_volatile]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":470,"byte_end":540,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"! and [core::sync::atomic] memory fences to provide easy-to-use, portable","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":541,"byte_end":616,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"! zeroing behavior which works on all of Rust's core number types and slices","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":617,"byte_end":695,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"! thereof, implemented in pure Rust with no usage of FFI or assembly.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":696,"byte_end":767,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":768,"byte_end":771,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! - No insecure fallbacks!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":772,"byte_end":800,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"! - No dependencies!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":801,"byte_end":823,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"! - No FFI or inline assembly! **WASM friendly** (and tested)!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":824,"byte_end":888,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"! - `#![no_std]` i.e. **embedded-friendly**!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":889,"byte_end":935,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"! - No functionality besides securely zeroing memory!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":936,"byte_end":991,"line_start":20,"line_end":20,"column_start":1,"column_end":56}},{"value":"! - (Optional) Custom derive support for zeroing complex structures","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":992,"byte_end":1061,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1062,"byte_end":1065,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! ## Minimum Supported Rust Version","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1066,"byte_end":1103,"line_start":23,"line_end":23,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1104,"byte_end":1107,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! Requires Rust **1.39** or newer.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1108,"byte_end":1144,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1145,"byte_end":1148,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! In the future, we reserve the right to change MSRV (i.e. MSRV is out-of-scope","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1149,"byte_end":1230,"line_start":27,"line_end":27,"column_start":1,"column_end":82}},{"value":"! for this crate's SemVer guarantees), however when we do it will be accompanied","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1231,"byte_end":1313,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"! with a minor version bump.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1314,"byte_end":1344,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1345,"byte_end":1348,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! ## Usage","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1349,"byte_end":1361,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1362,"byte_end":1365,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1366,"byte_end":1373,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"! use zeroize::Zeroize;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1374,"byte_end":1399,"line_start":34,"line_end":34,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1400,"byte_end":1403,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1404,"byte_end":1419,"line_start":36,"line_end":36,"column_start":1,"column_end":16}},{"value":"!     // Protip: don't embed secrets in your source code.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1420,"byte_end":1479,"line_start":37,"line_end":37,"column_start":1,"column_end":60}},{"value":"!     // This is just an example.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1480,"byte_end":1515,"line_start":38,"line_end":38,"column_start":1,"column_end":36}},{"value":"!     let mut secret = b\"Air shield password: 1,2,3,4,5\".to_vec();","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1516,"byte_end":1584,"line_start":39,"line_end":39,"column_start":1,"column_end":69}},{"value":"!     // [ ... ] open the air shield here","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1585,"byte_end":1628,"line_start":40,"line_end":40,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1629,"byte_end":1632,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"!     // Now that we're done using the secret, zero it out.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1633,"byte_end":1694,"line_start":42,"line_end":42,"column_start":1,"column_end":62}},{"value":"!     secret.zeroize();","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1695,"byte_end":1720,"line_start":43,"line_end":43,"column_start":1,"column_end":26}},{"value":"! }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1721,"byte_end":1726,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1727,"byte_end":1734,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1735,"byte_end":1738,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! The [Zeroize] trait is impl'd on all of Rust's core scalar types including","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1739,"byte_end":1817,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"! integers, floats, `bool`, and `char`.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1818,"byte_end":1859,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1860,"byte_end":1863,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! Additionally, it's implemented on slices and `IterMut`s of the above types.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1864,"byte_end":1943,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1944,"byte_end":1947,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! When the `alloc` feature is enabled (which it is by default), it's also","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":1948,"byte_end":2023,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"! impl'd for `Vec<T>` for the above types as well as `String`, where it provides","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2024,"byte_end":2106,"line_start":53,"line_end":53,"column_start":1,"column_end":83}},{"value":"! [Vec::clear()] / [String::clear()]-like behavior (truncating to zero-length)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2107,"byte_end":2187,"line_start":54,"line_end":54,"column_start":1,"column_end":81}},{"value":"! but ensures the backing memory is securely zeroed with some caveats.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2188,"byte_end":2260,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"! (NOTE: see \"Stack/Heap Zeroing Notes\" for important `Vec`/`String` details)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2261,"byte_end":2340,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2341,"byte_end":2344,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! The [DefaultIsZeroes] marker trait can be impl'd on types which also","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2345,"byte_end":2417,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"! impl [Default], which implements [Zeroize] by overwriting a value with","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2418,"byte_end":2492,"line_start":59,"line_end":59,"column_start":1,"column_end":75}},{"value":"! the default value.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2493,"byte_end":2515,"line_start":60,"line_end":60,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2516,"byte_end":2519,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"! ## Custom Derive Support","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2520,"byte_end":2548,"line_start":62,"line_end":62,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2549,"byte_end":2552,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! This crate has custom derive support for the `Zeroize` trait,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2553,"byte_end":2618,"line_start":64,"line_end":64,"column_start":1,"column_end":66}},{"value":"! gated under the `zeroize` crate's `zeroize_derive` Cargo feature,","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2619,"byte_end":2688,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"! which automatically calls `zeroize()` on all members of a struct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2689,"byte_end":2757,"line_start":66,"line_end":66,"column_start":1,"column_end":69}},{"value":"! or tuple struct.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2758,"byte_end":2778,"line_start":67,"line_end":67,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2779,"byte_end":2782,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"! Additionally it supports the following attribute:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2783,"byte_end":2836,"line_start":69,"line_end":69,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2837,"byte_end":2840,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"! - `#[zeroize(drop)]`: call `zeroize()` when this item is dropped","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2841,"byte_end":2909,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2910,"byte_end":2913,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"! Example which derives `Drop`:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2914,"byte_end":2947,"line_start":73,"line_end":73,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2948,"byte_end":2951,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2952,"byte_end":2959,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"! use zeroize::Zeroize;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2960,"byte_end":2985,"line_start":76,"line_end":76,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2986,"byte_end":2989,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! // This struct will be zeroized on drop","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":2990,"byte_end":3033,"line_start":78,"line_end":78,"column_start":1,"column_end":44}},{"value":"! #[derive(Zeroize)]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3034,"byte_end":3056,"line_start":79,"line_end":79,"column_start":1,"column_end":23}},{"value":"! #[zeroize(drop)]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3057,"byte_end":3077,"line_start":80,"line_end":80,"column_start":1,"column_end":21}},{"value":"! struct MyStruct([u8; 32]);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3078,"byte_end":3108,"line_start":81,"line_end":81,"column_start":1,"column_end":31}},{"value":"! ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3109,"byte_end":3116,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3117,"byte_end":3120,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! Example which does not derive `Drop` (useful for e.g. `Copy` types)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3121,"byte_end":3192,"line_start":84,"line_end":84,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3193,"byte_end":3196,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3197,"byte_end":3204,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"! use zeroize::Zeroize;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3205,"byte_end":3230,"line_start":87,"line_end":87,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3231,"byte_end":3234,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"! // This struct will *NOT* be zeroized on drop","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3235,"byte_end":3284,"line_start":89,"line_end":89,"column_start":1,"column_end":50}},{"value":"! #[derive(Copy, Clone, Zeroize)]","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3285,"byte_end":3320,"line_start":90,"line_end":90,"column_start":1,"column_end":36}},{"value":"! struct MyStruct([u8; 32]);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3321,"byte_end":3351,"line_start":91,"line_end":91,"column_start":1,"column_end":31}},{"value":"! ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3352,"byte_end":3359,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3360,"byte_end":3363,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! ## `Zeroizing<Z>`: wrapper for zeroizing arbitrary values on drop","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3364,"byte_end":3433,"line_start":94,"line_end":94,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3434,"byte_end":3437,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"! `Zeroizing<Z: Zeroize>` is a generic wrapper type that impls `Deref`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3438,"byte_end":3510,"line_start":96,"line_end":96,"column_start":1,"column_end":73}},{"value":"! and `DerefMut`, allowing access to an inner value of type `Z`, and also","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3511,"byte_end":3586,"line_start":97,"line_end":97,"column_start":1,"column_end":76}},{"value":"! impls a `Drop` handler which calls `zeroize()` on its contents:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3587,"byte_end":3654,"line_start":98,"line_end":98,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3655,"byte_end":3658,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3659,"byte_end":3666,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"! use zeroize::Zeroizing;","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3667,"byte_end":3694,"line_start":101,"line_end":101,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3695,"byte_end":3698,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3699,"byte_end":3714,"line_start":103,"line_end":103,"column_start":1,"column_end":16}},{"value":"!     let mut secret = Zeroizing::new([0u8; 5]);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3715,"byte_end":3765,"line_start":104,"line_end":104,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3766,"byte_end":3769,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"!     // Set the air shield password","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3770,"byte_end":3808,"line_start":106,"line_end":106,"column_start":1,"column_end":39}},{"value":"!     // Protip (again): don't embed secrets in your source code.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3809,"byte_end":3876,"line_start":107,"line_end":107,"column_start":1,"column_end":68}},{"value":"!     secret.copy_from_slice(&[1, 2, 3, 4, 5]);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3877,"byte_end":3926,"line_start":108,"line_end":108,"column_start":1,"column_end":50}},{"value":"!     assert_eq!(secret.as_ref(), &[1, 2, 3, 4, 5]);","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3927,"byte_end":3981,"line_start":109,"line_end":109,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3982,"byte_end":3985,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"!     // The contents of `secret` will be automatically zeroized on drop","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":3986,"byte_end":4060,"line_start":111,"line_end":111,"column_start":1,"column_end":75}},{"value":"! }","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4061,"byte_end":4066,"line_start":112,"line_end":112,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4067,"byte_end":4074,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4075,"byte_end":4078,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"! ## What guarantees does this crate provide?","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4079,"byte_end":4126,"line_start":115,"line_end":115,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4127,"byte_end":4130,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! This crate guarantees the following:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4131,"byte_end":4171,"line_start":117,"line_end":117,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4172,"byte_end":4175,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"! 1. The zeroing operation can't be \"optimized away\" by the compiler.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4176,"byte_end":4247,"line_start":119,"line_end":119,"column_start":1,"column_end":72}},{"value":"! 2. All subsequent reads to memory will see \"zeroized\" values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4248,"byte_end":4313,"line_start":120,"line_end":120,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4314,"byte_end":4317,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"! LLVM's volatile semantics ensure #1 is true.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4318,"byte_end":4366,"line_start":122,"line_end":122,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4367,"byte_end":4370,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"! Additionally, thanks to work by the [Unsafe Code Guidelines Working Group],","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4371,"byte_end":4450,"line_start":124,"line_end":124,"column_start":1,"column_end":80}},{"value":"! we can now fairly confidently say #2 is true as well. Previously there were","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4451,"byte_end":4530,"line_start":125,"line_end":125,"column_start":1,"column_end":80}},{"value":"! worries that the approach used by this crate (mixing volatile and","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4531,"byte_end":4600,"line_start":126,"line_end":126,"column_start":1,"column_end":70}},{"value":"! non-volatile accesses) was undefined behavior due to language contained","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4601,"byte_end":4676,"line_start":127,"line_end":127,"column_start":1,"column_end":76}},{"value":"! in the documentation for `write_volatile`, however after some discussion","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4677,"byte_end":4753,"line_start":128,"line_end":128,"column_start":1,"column_end":77}},{"value":"! [these remarks have been removed] and the specific usage pattern in this","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4754,"byte_end":4830,"line_start":129,"line_end":129,"column_start":1,"column_end":77}},{"value":"! crate is considered to be well-defined.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4831,"byte_end":4874,"line_start":130,"line_end":130,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4875,"byte_end":4878,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"! Additionally this crate leverages [compiler_fence] from","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4879,"byte_end":4938,"line_start":132,"line_end":132,"column_start":1,"column_end":60}},{"value":"! [core::sync::atomic] with the strictest ordering ([Ordering::SeqCst])","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":4939,"byte_end":5012,"line_start":133,"line_end":133,"column_start":1,"column_end":74}},{"value":"! as a precaution to help ensure reads are not reordered before memory has","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5013,"byte_end":5089,"line_start":134,"line_end":134,"column_start":1,"column_end":77}},{"value":"! been zeroed.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5090,"byte_end":5106,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5107,"byte_end":5110,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"! All of that said, there is still potential for microarchitectural attacks","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5111,"byte_end":5188,"line_start":137,"line_end":137,"column_start":1,"column_end":78}},{"value":"! (ala Spectre/Meltdown) to leak \"zeroized\" secrets through covert channels.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5189,"byte_end":5267,"line_start":138,"line_end":138,"column_start":1,"column_end":79}},{"value":"! This crate makes no guarantees that zeroized values cannot be leaked","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5268,"byte_end":5340,"line_start":139,"line_end":139,"column_start":1,"column_end":73}},{"value":"! through such channels, as they represent flaws in the underlying hardware.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5341,"byte_end":5419,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5420,"byte_end":5423,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"! ## Stack/Heap Zeroing Notes","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5424,"byte_end":5455,"line_start":142,"line_end":142,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5456,"byte_end":5459,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"! This crate can be used to zero values from either the stack or the heap.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5460,"byte_end":5536,"line_start":144,"line_end":144,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5537,"byte_end":5540,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"! However, be aware several operations in Rust can unintentionally leave","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5541,"byte_end":5615,"line_start":146,"line_end":146,"column_start":1,"column_end":75}},{"value":"! copies of data in memory. This includes but is not limited to:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5616,"byte_end":5682,"line_start":147,"line_end":147,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5683,"byte_end":5686,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"! - Moves and `Copy`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5687,"byte_end":5709,"line_start":149,"line_end":149,"column_start":1,"column_end":23}},{"value":"! - Heap reallocation when using `Vec` and `String`","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5710,"byte_end":5763,"line_start":150,"line_end":150,"column_start":1,"column_end":54}},{"value":"! - Borrowers of a reference making copies of the data","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5764,"byte_end":5820,"line_start":151,"line_end":151,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5821,"byte_end":5824,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"! [`Pin`][pin] can be leveraged in conjunction with this crate to ensure","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5825,"byte_end":5899,"line_start":153,"line_end":153,"column_start":1,"column_end":75}},{"value":"! data kept on the stack isn't moved.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5900,"byte_end":5939,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5940,"byte_end":5943,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"! The `Zeroize` impls for `Vec` and `String` zeroize the entire capacity of","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":5944,"byte_end":6021,"line_start":156,"line_end":156,"column_start":1,"column_end":78}},{"value":"! their backing buffer, but cannot guarantee copies of the data were not","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6022,"byte_end":6096,"line_start":157,"line_end":157,"column_start":1,"column_end":75}},{"value":"! previously made by buffer reallocation. It's therefore important when","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6097,"byte_end":6170,"line_start":158,"line_end":158,"column_start":1,"column_end":74}},{"value":"! attempting to zeroize such buffers to initialize them to the correct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6171,"byte_end":6243,"line_start":159,"line_end":159,"column_start":1,"column_end":73}},{"value":"! capacity, and take care to prevent subsequent reallocation.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6244,"byte_end":6307,"line_start":160,"line_end":160,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6308,"byte_end":6311,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"! The `secrecy` crate provides higher-level abstractions for eliminating","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6312,"byte_end":6386,"line_start":162,"line_end":162,"column_start":1,"column_end":75}},{"value":"! usage patterns which can cause reallocations:","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6387,"byte_end":6436,"line_start":163,"line_end":163,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6437,"byte_end":6440,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"! <https://crates.io/crates/secrecy>","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6441,"byte_end":6479,"line_start":165,"line_end":165,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6480,"byte_end":6483,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"! ## What about: clearing registers, mlock, mprotect, etc?","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6484,"byte_end":6544,"line_start":167,"line_end":167,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6545,"byte_end":6548,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"! This crate is focused on providing simple, unobtrusive support for reliably","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6549,"byte_end":6628,"line_start":169,"line_end":169,"column_start":1,"column_end":80}},{"value":"! zeroing memory using the best approach possible on stable Rust.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6629,"byte_end":6696,"line_start":170,"line_end":170,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6697,"byte_end":6700,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"! Clearing registers is a difficult problem that can't easily be solved by","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6701,"byte_end":6777,"line_start":172,"line_end":172,"column_start":1,"column_end":77}},{"value":"! something like a crate, and requires either inline ASM or rustc support.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6778,"byte_end":6854,"line_start":173,"line_end":173,"column_start":1,"column_end":77}},{"value":"! See <https://github.com/rust-lang/rust/issues/17046> for background on","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6855,"byte_end":6929,"line_start":174,"line_end":174,"column_start":1,"column_end":75}},{"value":"! this particular problem.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6930,"byte_end":6958,"line_start":175,"line_end":175,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6959,"byte_end":6962,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"! Other memory protection mechanisms are interesting and useful, but often","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":6963,"byte_end":7039,"line_start":177,"line_end":177,"column_start":1,"column_end":77}},{"value":"! overkill (e.g. defending against RAM scraping or attackers with swap access).","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7040,"byte_end":7121,"line_start":178,"line_end":178,"column_start":1,"column_end":82}},{"value":"! In as much as there may be merit to these approaches, there are also many","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7122,"byte_end":7199,"line_start":179,"line_end":179,"column_start":1,"column_end":78}},{"value":"! other crates that already implement more sophisticated memory protections.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7200,"byte_end":7278,"line_start":180,"line_end":180,"column_start":1,"column_end":79}},{"value":"! Such protections are explicitly out-of-scope for this crate.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7279,"byte_end":7343,"line_start":181,"line_end":181,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7344,"byte_end":7347,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"! Zeroing memory is [good cryptographic hygiene] and this crate seeks to promote","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7348,"byte_end":7430,"line_start":183,"line_end":183,"column_start":1,"column_end":83}},{"value":"! it in the most unobtrusive manner possible. This includes omitting complex","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7431,"byte_end":7509,"line_start":184,"line_end":184,"column_start":1,"column_end":79}},{"value":"! `unsafe` memory protection systems and just trying to make the best memory","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7510,"byte_end":7588,"line_start":185,"line_end":185,"column_start":1,"column_end":79}},{"value":"! zeroing crate available.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7589,"byte_end":7617,"line_start":186,"line_end":186,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7618,"byte_end":7621,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"! [Zeroize]: https://docs.rs/zeroize/latest/zeroize/trait.Zeroize.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7622,"byte_end":7694,"line_start":188,"line_end":188,"column_start":1,"column_end":73}},{"value":"! [Zeroing memory securely is hard]: http://www.daemonology.net/blog/2014-09-04-how-to-zero-a-buffer.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7695,"byte_end":7802,"line_start":189,"line_end":189,"column_start":1,"column_end":108}},{"value":"! [Vec::clear()]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.clear","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7803,"byte_end":7885,"line_start":190,"line_end":190,"column_start":1,"column_end":83}},{"value":"! [String::clear()]: https://doc.rust-lang.org/std/string/struct.String.html#method.clear","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7886,"byte_end":7977,"line_start":191,"line_end":191,"column_start":1,"column_end":92}},{"value":"! [DefaultIsZeroes]: https://docs.rs/zeroize/latest/zeroize/trait.DefaultIsZeroes.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":7978,"byte_end":8066,"line_start":192,"line_end":192,"column_start":1,"column_end":89}},{"value":"! [Default]: https://doc.rust-lang.org/std/default/trait.Default.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":8067,"byte_end":8138,"line_start":193,"line_end":193,"column_start":1,"column_end":72}},{"value":"! [core::ptr::write_volatile]: https://doc.rust-lang.org/core/ptr/fn.write_volatile.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":8139,"byte_end":8229,"line_start":194,"line_end":194,"column_start":1,"column_end":91}},{"value":"! [Unsafe Code Guidelines Working Group]: https://github.com/rust-lang/unsafe-code-guidelines","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":8230,"byte_end":8325,"line_start":195,"line_end":195,"column_start":1,"column_end":96}},{"value":"! [these remarks have been removed]: https://github.com/rust-lang/rust/pull/60972","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":8326,"byte_end":8409,"line_start":196,"line_end":196,"column_start":1,"column_end":84}},{"value":"! [core::sync::atomic]: https://doc.rust-lang.org/stable/core/sync/atomic/index.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":8410,"byte_end":8496,"line_start":197,"line_end":197,"column_start":1,"column_end":87}},{"value":"! [Ordering::SeqCst]: https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.SeqCst","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":8497,"byte_end":8596,"line_start":198,"line_end":198,"column_start":1,"column_end":100}},{"value":"! [compiler_fence]: https://doc.rust-lang.org/stable/core/sync/atomic/fn.compiler_fence.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":8597,"byte_end":8691,"line_start":199,"line_end":199,"column_start":1,"column_end":95}},{"value":"! [pin]: https://doc.rust-lang.org/std/pin/struct.Pin.html","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":8692,"byte_end":8752,"line_start":200,"line_end":200,"column_start":1,"column_end":61}},{"value":"! [good cryptographic hygiene]: https://github.com/veorq/cryptocoding#clean-memory-of-secret-data","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":8753,"byte_end":8852,"line_start":201,"line_end":201,"column_start":1,"column_end":100}},{"value":"no_std","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":8854,"byte_end":8864,"line_start":203,"line_end":203,"column_start":1,"column_end":11}},{"value":"warn(missing_docs, rust_2018_idioms, trivial_casts, unused_qualifications)","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":8922,"byte_end":9000,"line_start":205,"line_end":205,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":9},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9403,"byte_end":9410,"line_start":224,"line_end":224,"column_start":11,"column_end":18},"name":"Zeroize","qualname":"::Zeroize","value":"Zeroize","parent":null,"children":[{"krate":0,"index":10}],"decl_id":null,"docs":" Trait for securely erasing types from memory\n","sig":null,"attributes":[{"value":"/ Trait for securely erasing types from memory","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9344,"byte_end":9392,"line_start":223,"line_end":223,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9571,"byte_end":9578,"line_start":227,"line_end":227,"column_start":8,"column_end":15},"name":"zeroize","qualname":"::Zeroize::zeroize","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Zero out this object from memory using Rust intrinsics which ensure the\n zeroization operation is not \"optimized away\" by the compiler.\n","sig":null,"attributes":[{"value":"/ Zero out this object from memory using Rust intrinsics which ensure the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9417,"byte_end":9492,"line_start":225,"line_end":225,"column_start":5,"column_end":80}},{"value":"/ zeroization operation is not \"optimized away\" by the compiler.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9497,"byte_end":9563,"line_start":226,"line_end":226,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":11},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9681,"byte_end":9696,"line_start":231,"line_end":231,"column_start":11,"column_end":26},"name":"DefaultIsZeroes","qualname":"::DefaultIsZeroes","value":"DefaultIsZeroes: Copy + Default + Sized","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for types whose `Default` is the desired zeroization result\n","sig":null,"attributes":[{"value":"/ Marker trait for types whose `Default` is the desired zeroization result","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9594,"byte_end":9670,"line_start":230,"line_end":230,"column_start":1,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12640,"byte_end":12650,"line_start":346,"line_end":346,"column_start":11,"column_end":21},"name":"TryZeroize","qualname":"::TryZeroize","value":"TryZeroize","parent":null,"children":[{"krate":0,"index":28}],"decl_id":null,"docs":" Fallible trait for representing cases where zeroization may or may not be\n possible.","sig":null,"attributes":[{"value":"/ Fallible trait for representing cases where zeroization may or may not be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12387,"byte_end":12464,"line_start":341,"line_end":341,"column_start":1,"column_end":78}},{"value":"/ possible.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12465,"byte_end":12478,"line_start":342,"line_end":342,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12479,"byte_end":12482,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ This is primarily useful for scenarios like reference counted data, where","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12483,"byte_end":12560,"line_start":344,"line_end":344,"column_start":1,"column_end":78}},{"value":"/ zeroization is only possible when the last reference is dropped.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12561,"byte_end":12629,"line_start":345,"line_end":345,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12842,"byte_end":12853,"line_start":351,"line_end":351,"column_start":8,"column_end":19},"name":"try_zeroize","qualname":"::TryZeroize::try_zeroize","value":"fn (&mut self) -> bool","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Try to zero out this object from memory using Rust intrinsics which\n ensure the zeroization operation is not \"optimized away\" by the\n compiler.\n","sig":null,"attributes":[{"value":"/ Try to zero out this object from memory using Rust intrinsics which","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12657,"byte_end":12728,"line_start":347,"line_end":347,"column_start":5,"column_end":76}},{"value":"/ ensure the zeroization operation is not \"optimized away\" by the","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12733,"byte_end":12800,"line_start":348,"line_end":348,"column_start":5,"column_end":72}},{"value":"/ compiler.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12805,"byte_end":12818,"line_start":349,"line_end":349,"column_start":5,"column_end":18}},{"value":"must_use","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12823,"byte_end":12834,"line_start":350,"line_end":350,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":325},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13053,"byte_end":13062,"line_start":357,"line_end":357,"column_start":12,"column_end":21},"name":"Zeroizing","qualname":"::Zeroizing","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a\n `Drop` handler which zeroizes dropped values.\n","sig":null,"attributes":[{"value":"/ `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12877,"byte_end":12952,"line_start":354,"line_end":354,"column_start":1,"column_end":76}},{"value":"/ `Drop` handler which zeroizes dropped values.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":12953,"byte_end":13002,"line_start":355,"line_end":355,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13245,"byte_end":13248,"line_start":365,"line_end":365,"column_start":12,"column_end":15},"name":"new","qualname":"<Zeroizing<Z>>::new","value":"fn (value: Z) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Move value inside a `Zeroizing` wrapper which ensures it will be\n zeroized when it's dropped.\n","sig":null,"attributes":[{"value":"/ Move value inside a `Zeroizing` wrapper which ensures it will be","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13129,"byte_end":13197,"line_start":363,"line_end":363,"column_start":5,"column_end":73}},{"value":"/ zeroized when it's dropped.","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13202,"byte_end":13233,"line_start":364,"line_end":364,"column_start":5,"column_end":36}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9745,"byte_end":9746,"line_start":233,"line_end":233,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":10904,"byte_end":10911,"line_start":276,"line_end":276,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":11065,"byte_end":11071,"line_start":287,"line_end":287,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13088,"byte_end":13097,"line_start":359,"line_end":359,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13319,"byte_end":13328,"line_start":370,"line_end":370,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13453,"byte_end":13462,"line_start":379,"line_end":379,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13591,"byte_end":13600,"line_start":390,"line_end":390,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13717,"byte_end":13726,"line_start":399,"line_end":399,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13834,"byte_end":13843,"line_start":408,"line_end":408,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9698,"byte_end":9702,"line_start":231,"line_end":231,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":1914},"to":{"krate":0,"index":11}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9705,"byte_end":9712,"line_start":231,"line_end":231,"column_start":35,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":1895},"to":{"krate":0,"index":11}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9715,"byte_end":9720,"line_start":231,"line_end":231,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":11}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":9745,"byte_end":9746,"line_start":233,"line_end":233,"column_start":21,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":13},"to":{"krate":0,"index":9}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":10904,"byte_end":10911,"line_start":276,"line_end":276,"column_start":25,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":6778},"to":{"krate":0,"index":9}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":11065,"byte_end":11071,"line_start":287,"line_end":287,"column_start":21,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":1,"index":29547},"to":{"krate":0,"index":9}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13088,"byte_end":13097,"line_start":359,"line_end":359,"column_start":9,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":325},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13319,"byte_end":13328,"line_start":370,"line_end":370,"column_start":21,"column_end":30},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":1825}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13453,"byte_end":13462,"line_start":379,"line_end":379,"column_start":24,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":2073}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13591,"byte_end":13600,"line_start":390,"line_end":390,"column_start":27,"column_end":36},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":2086}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13717,"byte_end":13726,"line_start":399,"line_end":399,"column_start":21,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":325},"to":{"krate":0,"index":9}},{"span":{"file_name":"/home/rob/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs","byte_start":13834,"byte_end":13843,"line_start":408,"line_end":408,"column_start":18,"column_end":27},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":2097}}]}